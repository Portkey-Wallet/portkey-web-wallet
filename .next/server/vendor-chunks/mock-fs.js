/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mock-fs";
exports.ids = ["vendor-chunks/mock-fs"];
exports.modules = {

/***/ "(ssr)/./node_modules/mock-fs/lib/binding.js":
/*!*********************************************!*\
  !*** ./node_modules/mock-fs/lib/binding.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nconst path = __webpack_require__(/*! path */ \"path\");\n\nconst File = __webpack_require__(/*! ./file */ \"(ssr)/./node_modules/mock-fs/lib/file.js\");\nconst FileDescriptor = __webpack_require__(/*! ./descriptor */ \"(ssr)/./node_modules/mock-fs/lib/descriptor.js\");\nconst Directory = __webpack_require__(/*! ./directory */ \"(ssr)/./node_modules/mock-fs/lib/directory.js\");\nconst SymbolicLink = __webpack_require__(/*! ./symlink */ \"(ssr)/./node_modules/mock-fs/lib/symlink.js\");\nconst FSError = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mock-fs/lib/error.js\");\nconst constants = __webpack_require__(/*! constants */ \"constants\");\nconst getPathParts = (__webpack_require__(/*! ./filesystem */ \"(ssr)/./node_modules/mock-fs/lib/filesystem.js\").getPathParts);\nconst bufferFrom = (__webpack_require__(/*! ./buffer */ \"(ssr)/./node_modules/mock-fs/lib/buffer.js\").from);\nconst bufferAlloc = (__webpack_require__(/*! ./buffer */ \"(ssr)/./node_modules/mock-fs/lib/buffer.js\").alloc);\n\nconst MODE_TO_KTYPE = {\n  [constants.S_IFREG]: constants.UV_DIRENT_FILE,\n  [constants.S_IFDIR]: constants.UV_DIRENT_DIR,\n  [constants.S_IFBLK]: constants.UV_DIRENT_BLOCK,\n  [constants.S_IFCHR]: constants.UV_DIRENT_CHAR,\n  [constants.S_IFLNK]: constants.UV_DIRENT_LINK,\n  [constants.S_IFIFO]: constants.UV_DIRENT_FIFO,\n  [constants.S_IFSOCK]: constants.UV_DIRENT_SOCKET\n};\n\n/** Workaround for optimizations in node 8+ */\nconst fsBinding = process.binding('fs');\nconst kUsePromises = fsBinding.kUsePromises;\nlet statValues;\nif (fsBinding.statValues) {\n  statValues = fsBinding.statValues; // node 10+\n} else if (fsBinding.getStatValues) {\n  statValues = fsBinding.getStatValues(); // node 8\n} else {\n  statValues = [];\n}\n\n// nodejs v6,8,10 and v12 before v12.10.0 has length 28\n// nodejs v12.10.0+ has length 36\nconst statContainsNs = statValues.length > 28;\n\n/** Introduction of BigUint64Array in 10.5 */\nlet BigUint64Array;\nif (global.BigUint64Array) {\n  BigUint64Array = global.BigUint64Array;\n} else {\n  BigUint64Array = function() {};\n}\n\nconst MAX_LINKS = 50;\n\n/**\n * Call the provided function and either return the result or call the callback\n * with it (depending on if a callback is provided).\n * @param {function()} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @param {Object} thisArg This argument for the following function.\n * @param {function()} func Function to call.\n * @return {*} Return (if callback is not provided).\n */\nfunction maybeCallback(callback, ctx, thisArg, func) {\n  let err = null;\n  let val;\n\n  if (kUsePromises && callback === kUsePromises) {\n    // support nodejs v10+ fs.promises\n    try {\n      val = func.call(thisArg);\n    } catch (e) {\n      err = e;\n    }\n    return new Promise(function(resolve, reject) {\n      process.nextTick(function() {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(val);\n        }\n      });\n    });\n  } else if (callback && typeof callback === 'function') {\n    try {\n      val = func.call(thisArg);\n    } catch (e) {\n      err = e;\n    }\n    process.nextTick(function() {\n      if (val === undefined) {\n        callback(err);\n      } else {\n        callback(err, val);\n      }\n    });\n  } else if (ctx && typeof ctx === 'object') {\n    try {\n      return func.call(thisArg);\n    } catch (e) {\n      // default to errno for UNKNOWN\n      ctx.code = e.code || 'UNKNOWN';\n      ctx.errno = e.errno || FSError.codes.UNKNOWN.errno;\n    }\n  } else {\n    return func.call(thisArg);\n  }\n}\n\n/**\n * set syscall property on context object, only for nodejs v10+.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @param {String} syscall Name of syscall.\n */\nfunction markSyscall(ctx, syscall) {\n  if (ctx && typeof ctx === 'object') {\n    ctx.syscall = syscall;\n  }\n}\n\n/**\n * Handle FSReqWrap oncomplete.\n * @param {Function} callback The callback.\n * @return {Function} The normalized callback.\n */\nfunction normalizeCallback(callback) {\n  if (callback && typeof callback.oncomplete === 'function') {\n    // Unpack callback from FSReqWrap\n    callback = callback.oncomplete.bind(callback);\n  }\n  return callback;\n}\n\n/**\n * Handle stat optimizations introduced in Node 8.\n * See https://github.com/nodejs/node/pull/11665.\n * @param {Function} callback The callback.\n * @return {Function} The wrapped callback.\n */\nfunction wrapStatsCallback(callback) {\n  if (callback && typeof callback.oncomplete === 'function') {\n    // Unpack callback from FSReqWrap\n    callback = callback.oncomplete.bind(callback);\n  }\n  if (typeof callback === 'function') {\n    return function(err, stats) {\n      if (stats) {\n        fillStatsArray(stats, statValues);\n      }\n      callback.apply(this, arguments);\n    };\n  } else {\n    return callback;\n  }\n}\n\nfunction getDirentType(mode) {\n  const ktype = MODE_TO_KTYPE[mode & constants.S_IFMT];\n\n  if (ktype === undefined) {\n    return constants.UV_DIRENT_UNKNOWN;\n  }\n\n  return ktype;\n}\n\nfunction notImplemented() {\n  throw new Error('Method not implemented');\n}\n\nfunction deBuffer(p) {\n  return Buffer.isBuffer(p) ? p.toString() : p;\n}\n\n/**\n * Create a new stats object.\n * @param {Object} config Stats properties.\n * @constructor\n */\nfunction Stats(config) {\n  for (const key in config) {\n    this[key] = config[key];\n  }\n  // node 10 expects an array internally\n  // see https://github.com/nodejs/node/pull/19714\n  fillStatsArray(config, this);\n}\n\n/**\n * Check if mode indicates property.\n * @param {number} property Property to check.\n * @return {boolean} Property matches mode.\n */\nStats.prototype._checkModeProperty = function(property) {\n  return (this.mode & constants.S_IFMT) === property;\n};\n\n/**\n * @return {Boolean} Is a directory.\n */\nStats.prototype.isDirectory = function() {\n  return this._checkModeProperty(constants.S_IFDIR);\n};\n\n/**\n * @return {Boolean} Is a regular file.\n */\nStats.prototype.isFile = function() {\n  return this._checkModeProperty(constants.S_IFREG);\n};\n\n/**\n * @return {Boolean} Is a block device.\n */\nStats.prototype.isBlockDevice = function() {\n  return this._checkModeProperty(constants.S_IFBLK);\n};\n\n/**\n * @return {Boolean} Is a character device.\n */\nStats.prototype.isCharacterDevice = function() {\n  return this._checkModeProperty(constants.S_IFCHR);\n};\n\n/**\n * @return {Boolean} Is a symbolic link.\n */\nStats.prototype.isSymbolicLink = function() {\n  return this._checkModeProperty(constants.S_IFLNK);\n};\n\n/**\n * @return {Boolean} Is a named pipe.\n */\nStats.prototype.isFIFO = function() {\n  return this._checkModeProperty(constants.S_IFIFO);\n};\n\n/**\n * @return {Boolean} Is a socket.\n */\nStats.prototype.isSocket = function() {\n  return this._checkModeProperty(constants.S_IFSOCK);\n};\n\n/**\n * Create a new binding with the given file system.\n * @param {FileSystem} system Mock file system.\n * @constructor\n */\nfunction Binding(system) {\n  /**\n   * Mock file system.\n   * @type {FileSystem}\n   */\n  this._system = system;\n\n  /**\n   * Stats constructor.\n   * @type {function}\n   */\n  this.Stats = Stats;\n\n  /**\n   * Lookup of open files.\n   * @type {Object.<number, FileDescriptor>}\n   */\n  this._openFiles = {};\n\n  /**\n   * Counter for file descriptors.\n   * @type {number}\n   */\n  this._counter = -1;\n\n  const stdin = new FileDescriptor(constants.O_RDWR);\n  stdin.setItem(new File.StandardInput());\n  this.trackDescriptor(stdin);\n\n  const stdout = new FileDescriptor(constants.O_RDWR);\n  stdout.setItem(new File.StandardOutput());\n  this.trackDescriptor(stdout);\n\n  const stderr = new FileDescriptor(constants.O_RDWR);\n  stderr.setItem(new File.StandardError());\n  this.trackDescriptor(stderr);\n}\n\n/**\n * Get the file system underlying this binding.\n * @return {FileSystem} The underlying file system.\n */\nBinding.prototype.getSystem = function() {\n  return this._system;\n};\n\n/**\n * Reset the file system underlying this binding.\n * @param {FileSystem} system The new file system.\n */\nBinding.prototype.setSystem = function(system) {\n  this._system = system;\n};\n\n/**\n * Get a file descriptor.\n * @param {number} fd File descriptor identifier.\n * @return {FileDescriptor} File descriptor.\n */\nBinding.prototype.getDescriptorById = function(fd) {\n  if (!this._openFiles.hasOwnProperty(fd)) {\n    throw new FSError('EBADF');\n  }\n  return this._openFiles[fd];\n};\n\n/**\n * Keep track of a file descriptor as open.\n * @param {FileDescriptor} descriptor The file descriptor.\n * @return {number} Identifier for file descriptor.\n */\nBinding.prototype.trackDescriptor = function(descriptor) {\n  const fd = ++this._counter;\n  this._openFiles[fd] = descriptor;\n  return fd;\n};\n\n/**\n * Stop tracking a file descriptor as open.\n * @param {number} fd Identifier for file descriptor.\n */\nBinding.prototype.untrackDescriptorById = function(fd) {\n  if (!this._openFiles.hasOwnProperty(fd)) {\n    throw new FSError('EBADF');\n  }\n  delete this._openFiles[fd];\n};\n\n/**\n * Resolve the canonicalized absolute pathname.\n * @param {string|Buffer} filepath The file path.\n * @param {string} encoding The encoding for the return.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {string|Buffer} The real path.\n */\nBinding.prototype.realpath = function(filepath, encoding, callback, ctx) {\n  markSyscall(ctx, 'realpath');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    let realPath;\n    filepath = deBuffer(filepath);\n    const resolved = path.resolve(filepath);\n    const parts = getPathParts(resolved);\n    let item = this._system.getRoot();\n    let itemPath = '/';\n    let name, i, ii;\n    for (i = 0, ii = parts.length; i < ii; ++i) {\n      name = parts[i];\n      while (item instanceof SymbolicLink) {\n        itemPath = path.resolve(path.dirname(itemPath), item.getPath());\n        item = this._system.getItem(itemPath);\n      }\n      if (!item) {\n        throw new FSError('ENOENT', filepath);\n      }\n      if (item instanceof Directory) {\n        itemPath = path.resolve(itemPath, name);\n        item = item.getItem(name);\n      } else {\n        throw new FSError('ENOTDIR', filepath);\n      }\n    }\n    if (item) {\n      while (item instanceof SymbolicLink) {\n        itemPath = path.resolve(path.dirname(itemPath), item.getPath());\n        item = this._system.getItem(itemPath);\n      }\n      realPath = itemPath;\n    } else {\n      throw new FSError('ENOENT', filepath);\n    }\n\n    if (process.platform === 'win32' && realPath.startsWith('\\\\\\\\?\\\\')) {\n      // Remove win32 file namespace prefix \\\\?\\\n      realPath = realPath.slice(4);\n    }\n\n    if (encoding === 'buffer') {\n      realPath = bufferFrom(realPath);\n    }\n\n    return realPath;\n  });\n};\n\n/**\n * Fill a Float64Array with stat information\n * This is based on the internal FillStatsArray function in Node.\n * https://github.com/nodejs/node/blob/4e05952a8a75af6df625415db612d3a9a1322682/src/node_file.cc#L533\n * @param {Object} stats An object with file stats\n * @param {Float64Array} statValues A Float64Array where stat values should be inserted\n * @returns {void}\n */\nfunction fillStatsArray(stats, statValues) {\n  statValues[0] = stats.dev;\n  statValues[1] = stats.mode;\n  statValues[2] = stats.nlink;\n  statValues[3] = stats.uid;\n  statValues[4] = stats.gid;\n  statValues[5] = stats.rdev;\n  statValues[6] = stats.blksize;\n  statValues[7] = stats.ino;\n  statValues[8] = stats.size;\n  statValues[9] = stats.blocks;\n\n  if (statContainsNs) {\n    // nodejs v12.10.0+\n    // This is based on the internal FillStatsArray function in Node.\n    // https://github.com/nodejs/node/blob/3a2e75d9a5c31d20e429d505b82dd182e33f459a/src/node_file.h#L153-L187\n    statValues[10] = Math.floor(stats.atimeMs / 1000);\n    statValues[11] = (stats.atimeMs % 1000) * 1000000;\n    statValues[12] = Math.floor(stats.mtimeMs / 1000);\n    statValues[13] = (stats.mtimeMs % 1000) * 1000000;\n    statValues[14] = Math.floor(stats.ctimeMs / 1000);\n    statValues[15] = (stats.ctimeMs % 1000) * 1000000;\n    statValues[16] = Math.floor(stats.birthtimeMs / 1000);\n    statValues[17] = (stats.birthtimeMs % 1000) * 1000000;\n  } else {\n    // nodejs before v12.10.0\n    // This is based on the internal FillStatsArray function in Node.\n    // https://github.com/nodejs/node/blob/4e05952a8a75af6df625415db612d3a9a1322682/src/node_file.cc#L533\n    statValues[10] = stats.atimeMs;\n    statValues[11] = stats.mtimeMs;\n    statValues[12] = stats.ctimeMs;\n    statValues[13] = stats.birthtimeMs;\n  }\n}\n\n/**\n * Stat an item.\n * @param {string} filepath Path.\n * @param {function(Error, Stats)|Float64Array|BigUint64Array} callback Callback (optional). In Node 7.7.0+ this will be a Float64Array\n * that should be filled with stat values.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {Stats|undefined} Stats or undefined (if sync).\n */\nBinding.prototype.stat = function(filepath, options, callback, ctx) {\n  // this seems wound not happen in nodejs v10+\n  if (arguments.length < 3) {\n    callback = options;\n    options = {};\n  }\n\n  markSyscall(ctx, 'stat');\n\n  return maybeCallback(wrapStatsCallback(callback), ctx, this, function() {\n    filepath = deBuffer(filepath);\n    let item = this._system.getItem(filepath);\n    if (item instanceof SymbolicLink) {\n      item = this._system.getItem(\n        path.resolve(path.dirname(filepath), item.getPath())\n      );\n    }\n    if (!item) {\n      throw new FSError('ENOENT', filepath);\n    }\n    const stats = item.getStats();\n\n    // In Node 7.7.0+, binding.stat accepts a Float64Array as the second argument,\n    // which should be filled with stat values.\n    // In prior versions of Node, binding.stat simply returns a Stats instance.\n    if (\n      callback instanceof Float64Array ||\n      callback instanceof BigUint64Array\n    ) {\n      fillStatsArray(stats, callback);\n    } else {\n      fillStatsArray(stats, statValues);\n      return new Stats(stats);\n    }\n  });\n};\n\n/**\n * Stat an item.\n * @param {number} fd File descriptor.\n * @param {function(Error, Stats)|Float64Array|BigUint64Array} callback Callback (optional). In Node 7.7.0+ this will be a Float64Array\n * that should be filled with stat values.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {Stats|undefined} Stats or undefined (if sync).\n */\nBinding.prototype.fstat = function(fd, options, callback, ctx) {\n  if (arguments.length < 3) {\n    callback = options;\n    options = {};\n  }\n\n  markSyscall(ctx, 'fstat');\n\n  return maybeCallback(wrapStatsCallback(callback), ctx, this, function() {\n    const descriptor = this.getDescriptorById(fd);\n    const item = descriptor.getItem();\n    const stats = item.getStats();\n\n    // In Node 7.7.0+, binding.stat accepts a Float64Array as the second argument,\n    // which should be filled with stat values.\n    // In prior versions of Node, binding.stat simply returns a Stats instance.\n    if (\n      callback instanceof Float64Array ||\n      callback instanceof BigUint64Array\n    ) {\n      fillStatsArray(stats, callback);\n    } else {\n      fillStatsArray(stats, statValues);\n      return new Stats(stats);\n    }\n  });\n};\n\n/**\n * Close a file descriptor.\n * @param {number} fd File descriptor.\n * @param {function(Error)} callback Callback (optional).\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */\nBinding.prototype.close = function(fd, callback, ctx) {\n  markSyscall(ctx, 'close');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    this.untrackDescriptorById(fd);\n  });\n};\n\n/**\n * Open and possibly create a file.\n * @param {string} pathname File path.\n * @param {number} flags Flags.\n * @param {number} mode Mode.\n * @param {function(Error, string)} callback Callback (optional).\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {string} File descriptor (if sync).\n */\nBinding.prototype.open = function(pathname, flags, mode, callback, ctx) {\n  markSyscall(ctx, 'open');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    pathname = deBuffer(pathname);\n    const descriptor = new FileDescriptor(flags);\n    let item = this._system.getItem(pathname);\n    while (item instanceof SymbolicLink) {\n      item = this._system.getItem(\n        path.resolve(path.dirname(pathname), item.getPath())\n      );\n    }\n    if (descriptor.isExclusive() && item) {\n      throw new FSError('EEXIST', pathname);\n    }\n    if (descriptor.isCreate() && !item) {\n      const parent = this._system.getItem(path.dirname(pathname));\n      if (!parent) {\n        throw new FSError('ENOENT', pathname);\n      }\n      if (!(parent instanceof Directory)) {\n        throw new FSError('ENOTDIR', pathname);\n      }\n      item = new File();\n      if (mode) {\n        item.setMode(mode);\n      }\n      parent.addItem(path.basename(pathname), item);\n    }\n    if (descriptor.isRead()) {\n      if (!item) {\n        throw new FSError('ENOENT', pathname);\n      }\n      if (!item.canRead()) {\n        throw new FSError('EACCES', pathname);\n      }\n    }\n    if (descriptor.isWrite() && !item.canWrite()) {\n      throw new FSError('EACCES', pathname);\n    }\n    if (\n      item instanceof Directory &&\n      (descriptor.isTruncate() || descriptor.isAppend())\n    ) {\n      throw new FSError('EISDIR', pathname);\n    }\n    if (descriptor.isTruncate()) {\n      if (!(item instanceof File)) {\n        throw new FSError('EBADF');\n      }\n      item.setContent('');\n    }\n    if (descriptor.isTruncate() || descriptor.isAppend()) {\n      descriptor.setPosition(item.getContent().length);\n    }\n    descriptor.setItem(item);\n    return this.trackDescriptor(descriptor);\n  });\n};\n\n/**\n * Open a file handler. A new api in nodejs v10+ for fs.promises\n * @param {string} pathname File path.\n * @param {number} flags Flags.\n * @param {number} mode Mode.\n * @param {function} callback Callback (optional), expecting kUsePromises in nodejs v10+.\n */\nBinding.prototype.openFileHandle = function(pathname, flags, mode, callback) {\n  const self = this;\n\n  return this.open(pathname, flags, mode, kUsePromises).then(function(fd) {\n    // nodejs v10+ fs.promises FileHandler constructor only ask these three properties.\n    return {\n      getAsyncId: notImplemented,\n      fd: fd,\n      close: function() {\n        return self.close(fd, kUsePromises);\n      }\n    };\n  });\n};\n\n/**\n * Read from a file descriptor.\n * @param {string} fd File descriptor.\n * @param {Buffer} buffer Buffer that the contents will be written to.\n * @param {number} offset Offset in the buffer to start writing to.\n * @param {number} length Number of bytes to read.\n * @param {?number} position Where to begin reading in the file.  If null,\n *     data will be read from the current file position.\n * @param {function(Error, number, Buffer)} callback Callback (optional) called\n *     with any error, number of bytes read, and the buffer.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {number} Number of bytes read (if sync).\n */\nBinding.prototype.read = function(\n  fd,\n  buffer,\n  offset,\n  length,\n  position,\n  callback,\n  ctx\n) {\n  markSyscall(ctx, 'read');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    const descriptor = this.getDescriptorById(fd);\n    if (!descriptor.isRead()) {\n      throw new FSError('EBADF');\n    }\n    const file = descriptor.getItem();\n    if (file instanceof Directory) {\n      throw new FSError('EISDIR');\n    }\n    if (!(file instanceof File)) {\n      // deleted or not a regular file\n      throw new FSError('EBADF');\n    }\n    if (typeof position !== 'number' || position < 0) {\n      position = descriptor.getPosition();\n    }\n    const content = file.getContent();\n    const start = Math.min(position, content.length);\n    const end = Math.min(position + length, content.length);\n    const read = start < end ? content.copy(buffer, offset, start, end) : 0;\n    descriptor.setPosition(position + read);\n    return read;\n  });\n};\n\n/**\n * Write to a file descriptor given a buffer.\n * @param {string} src Source file.\n * @param {string} dest Destination file.\n * @param {number} flags Modifiers for copy operation.\n * @param {function(Error)} callback Callback (optional) called\n *     with any error.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */\nBinding.prototype.copyFile = function(src, dest, flags, callback, ctx) {\n  markSyscall(ctx, 'copyfile');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    src = deBuffer(src);\n    dest = deBuffer(dest);\n    const srcFd = this.open(src, constants.O_RDONLY);\n\n    try {\n      const srcDescriptor = this.getDescriptorById(srcFd);\n      if (!srcDescriptor.isRead()) {\n        throw new FSError('EBADF');\n      }\n      const srcFile = srcDescriptor.getItem();\n      if (!(srcFile instanceof File)) {\n        throw new FSError('EBADF');\n      }\n      const srcContent = srcFile.getContent();\n\n      let destFlags =\n        constants.O_WRONLY | constants.O_CREAT | constants.O_TRUNC;\n\n      if ((flags & constants.COPYFILE_EXCL) === constants.COPYFILE_EXCL) {\n        destFlags |= constants.O_EXCL;\n      }\n\n      const destFd = this.open(dest, destFlags);\n\n      try {\n        this.write(destFd, srcContent, 0, srcContent.length, 0);\n      } finally {\n        this.close(destFd);\n      }\n    } finally {\n      this.close(srcFd);\n    }\n  });\n};\n\n/**\n * Write to a file descriptor given a buffer.\n * @param {string} fd File descriptor.\n * @param {Array<Buffer>} buffers Array of buffers with contents to write.\n * @param {?number} position Where to begin writing in the file.  If null,\n *     data will be written to the current file position.\n * @param {function(Error, number, Buffer)} callback Callback (optional) called\n *     with any error, number of bytes written, and the buffer.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {number} Number of bytes written (if sync).\n */\nBinding.prototype.writeBuffers = function(\n  fd,\n  buffers,\n  position,\n  callback,\n  ctx\n) {\n  markSyscall(ctx, 'write');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    const descriptor = this.getDescriptorById(fd);\n    if (!descriptor.isWrite()) {\n      throw new FSError('EBADF');\n    }\n    const file = descriptor.getItem();\n    if (!(file instanceof File)) {\n      // not a regular file\n      throw new FSError('EBADF');\n    }\n    if (typeof position !== 'number' || position < 0) {\n      position = descriptor.getPosition();\n    }\n    let content = file.getContent();\n    const newContent = Buffer.concat(buffers);\n    const newLength = position + newContent.length;\n    if (content.length < newLength) {\n      const tempContent = bufferAlloc(newLength);\n      content.copy(tempContent);\n      content = tempContent;\n    }\n    const written = newContent.copy(content, position);\n    file.setContent(content);\n    descriptor.setPosition(newLength);\n    return written;\n  });\n};\n\n/**\n * Write to a file descriptor given a buffer.\n * @param {string} fd File descriptor.\n * @param {Buffer} buffer Buffer with contents to write.\n * @param {number} offset Offset in the buffer to start writing from.\n * @param {number} length Number of bytes to write.\n * @param {?number} position Where to begin writing in the file.  If null,\n *     data will be written to the current file position.\n * @param {function(Error, number, Buffer)} callback Callback (optional) called\n *     with any error, number of bytes written, and the buffer.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {number} Number of bytes written (if sync).\n */\nBinding.prototype.writeBuffer = function(\n  fd,\n  buffer,\n  offset,\n  length,\n  position,\n  callback,\n  ctx\n) {\n  markSyscall(ctx, 'write');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    const descriptor = this.getDescriptorById(fd);\n    if (!descriptor.isWrite()) {\n      throw new FSError('EBADF');\n    }\n    const file = descriptor.getItem();\n    if (!(file instanceof File)) {\n      // not a regular file\n      throw new FSError('EBADF');\n    }\n    if (typeof position !== 'number' || position < 0) {\n      position = descriptor.getPosition();\n    }\n    let content = file.getContent();\n    const newLength = position + length;\n    if (content.length < newLength) {\n      const newContent = bufferAlloc(newLength);\n      content.copy(newContent);\n      content = newContent;\n    }\n    const sourceEnd = Math.min(offset + length, buffer.length);\n    const written = bufferFrom(buffer).copy(\n      content,\n      position,\n      offset,\n      sourceEnd\n    );\n    file.setContent(content);\n    descriptor.setPosition(newLength);\n    return written;\n  });\n};\n\n/**\n * Alias for writeBuffer (used in Node <= 0.10).\n * @param {string} fd File descriptor.\n * @param {Buffer} buffer Buffer with contents to write.\n * @param {number} offset Offset in the buffer to start writing from.\n * @param {number} length Number of bytes to write.\n * @param {?number} position Where to begin writing in the file.  If null,\n *     data will be written to the current file position.\n * @param {function(Error, number, Buffer)} callback Callback (optional) called\n *     with any error, number of bytes written, and the buffer.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {number} Number of bytes written (if sync).\n */\nBinding.prototype.write = Binding.prototype.writeBuffer;\n\n/**\n * Write to a file descriptor given a string.\n * @param {string} fd File descriptor.\n * @param {string} string String with contents to write.\n * @param {number} position Where to begin writing in the file.  If null,\n *     data will be written to the current file position.\n * @param {string} encoding String encoding.\n * @param {function(Error, number, string)} callback Callback (optional) called\n *     with any error, number of bytes written, and the string.\n * @return {number} Number of bytes written (if sync).\n */\nBinding.prototype.writeString = function(\n  fd,\n  string,\n  position,\n  encoding,\n  callback,\n  ctx\n) {\n  markSyscall(ctx, 'write');\n\n  const buffer = bufferFrom(string, encoding);\n  let wrapper;\n  if (callback && callback !== kUsePromises) {\n    if (callback.oncomplete) {\n      callback = callback.oncomplete.bind(callback);\n    }\n    wrapper = function(err, written, returned) {\n      callback(err, written, returned && string);\n    };\n  }\n  return this.writeBuffer(fd, buffer, 0, string.length, position, wrapper, ctx);\n};\n\n/**\n * Rename a file.\n * @param {string} oldPath Old pathname.\n * @param {string} newPath New pathname.\n * @param {function(Error)} callback Callback (optional).\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {undefined}\n */\nBinding.prototype.rename = function(oldPath, newPath, callback, ctx) {\n  markSyscall(ctx, 'rename');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    oldPath = deBuffer(oldPath);\n    newPath = deBuffer(newPath);\n    const oldItem = this._system.getItem(oldPath);\n    if (!oldItem) {\n      throw new FSError('ENOENT', oldPath);\n    }\n    const oldParent = this._system.getItem(path.dirname(oldPath));\n    const oldName = path.basename(oldPath);\n    const newItem = this._system.getItem(newPath);\n    const newParent = this._system.getItem(path.dirname(newPath));\n    const newName = path.basename(newPath);\n    if (newItem) {\n      // make sure they are the same type\n      if (oldItem instanceof File) {\n        if (newItem instanceof Directory) {\n          throw new FSError('EISDIR', newPath);\n        }\n      } else if (oldItem instanceof Directory) {\n        if (!(newItem instanceof Directory)) {\n          throw new FSError('ENOTDIR', newPath);\n        }\n        if (newItem.list().length > 0) {\n          throw new FSError('ENOTEMPTY', newPath);\n        }\n      }\n      newParent.removeItem(newName);\n    } else {\n      if (!newParent) {\n        throw new FSError('ENOENT', newPath);\n      }\n      if (!(newParent instanceof Directory)) {\n        throw new FSError('ENOTDIR', newPath);\n      }\n    }\n    oldParent.removeItem(oldName);\n    newParent.addItem(newName, oldItem);\n  });\n};\n\n/**\n * Read a directory.\n * @param {string} dirpath Path to directory.\n * @param {string} encoding The encoding ('utf-8' or 'buffer').\n * @param {boolean} withFileTypes whether or not to return fs.Dirent objects\n * @param {function(Error, (Array.<string>|Array.<Buffer>)} callback Callback\n *     (optional) called with any error or array of items in the directory.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {Array.<string>|Array.<Buffer>} Array of items in directory (if sync).\n */\nBinding.prototype.readdir = function(\n  dirpath,\n  encoding,\n  withFileTypes,\n  callback,\n  ctx\n) {\n  // again, the shorter arguments would not happen in nodejs v10+\n  if (arguments.length === 2) {\n    callback = encoding;\n    encoding = 'utf-8';\n  } else if (arguments.length === 3) {\n    callback = withFileTypes;\n  }\n\n  markSyscall(ctx, 'scandir');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    dirpath = deBuffer(dirpath);\n    let dpath = dirpath;\n    let dir = this._system.getItem(dirpath);\n    while (dir instanceof SymbolicLink) {\n      dpath = path.resolve(path.dirname(dpath), dir.getPath());\n      dir = this._system.getItem(dpath);\n    }\n    if (!dir) {\n      throw new FSError('ENOENT', dirpath);\n    }\n    if (!(dir instanceof Directory)) {\n      throw new FSError('ENOTDIR', dirpath);\n    }\n    if (!dir.canRead()) {\n      throw new FSError('EACCES', dirpath);\n    }\n\n    let list = dir.list();\n    if (encoding === 'buffer') {\n      list = list.map(function(item) {\n        return bufferFrom(item);\n      });\n    }\n\n    if (withFileTypes === true) {\n      const types = list.map(function(name) {\n        const stats = dir.getItem(name).getStats();\n\n        return getDirentType(stats.mode);\n      });\n      list = [list, types];\n    }\n\n    return list;\n  });\n};\n\n/**\n * Create a directory.\n * @param {string} pathname Path to new directory.\n * @param {number} mode Permissions.\n * @param {boolean} recursive Recursively create deep directory. (added in nodejs v10+)\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */\nBinding.prototype.mkdir = function(pathname, mode, recursive, callback, ctx) {\n  if (typeof recursive !== 'boolean') {\n    // when running nodejs < 10\n    ctx = callback;\n    callback = recursive;\n    recursive = false;\n  }\n\n  markSyscall(ctx, 'mkdir');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    pathname = deBuffer(pathname);\n    const item = this._system.getItem(pathname);\n    if (item) {\n      if (recursive && item instanceof Directory) {\n        // silently pass existing folder in recursive mode\n        return;\n      }\n      throw new FSError('EEXIST', pathname);\n    }\n\n    const _mkdir = function(_pathname) {\n      const parentDir = path.dirname(_pathname);\n      let parent = this._system.getItem(parentDir);\n      if (!parent) {\n        if (!recursive) {\n          throw new FSError('ENOENT', _pathname);\n        }\n        parent = _mkdir(parentDir, true);\n      }\n      this.access(parentDir, parseInt('0002', 8));\n      const dir = new Directory();\n      if (mode) {\n        dir.setMode(mode);\n      }\n      return parent.addItem(path.basename(_pathname), dir);\n    }.bind(this);\n\n    _mkdir(pathname);\n  });\n};\n\n/**\n * Remove a directory.\n * @param {string} pathname Path to directory.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */\nBinding.prototype.rmdir = function(pathname, callback, ctx) {\n  markSyscall(ctx, 'rmdir');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    pathname = deBuffer(pathname);\n    const item = this._system.getItem(pathname);\n    if (!item) {\n      throw new FSError('ENOENT', pathname);\n    }\n    if (!(item instanceof Directory)) {\n      throw new FSError('ENOTDIR', pathname);\n    }\n    if (item.list().length > 0) {\n      throw new FSError('ENOTEMPTY', pathname);\n    }\n    this.access(path.dirname(pathname), parseInt('0002', 8));\n    const parent = this._system.getItem(path.dirname(pathname));\n    parent.removeItem(path.basename(pathname));\n  });\n};\n\nconst PATH_CHARS =\n  'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\nconst MAX_ATTEMPTS = 62 * 62 * 62;\n\n/**\n * Create a directory based on a template.\n * See http://web.mit.edu/freebsd/head/lib/libc/stdio/mktemp.c\n * @param {string} template Path template (trailing Xs will be replaced).\n * @param {string} encoding The encoding ('utf-8' or 'buffer').\n * @param {function(Error, string)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */\nBinding.prototype.mkdtemp = function(prefix, encoding, callback, ctx) {\n  if (encoding && typeof encoding !== 'string') {\n    callback = encoding;\n    encoding = 'utf-8';\n  }\n\n  markSyscall(ctx, 'mkdtemp');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    prefix = prefix.replace(/X{0,6}$/, 'XXXXXX');\n    const parentPath = path.dirname(prefix);\n    const parent = this._system.getItem(parentPath);\n    if (!parent) {\n      throw new FSError('ENOENT', prefix);\n    }\n    if (!(parent instanceof Directory)) {\n      throw new FSError('ENOTDIR', prefix);\n    }\n    this.access(parentPath, parseInt('0002', 8));\n    const template = path.basename(prefix);\n    let unique = false;\n    let count = 0;\n    let name;\n    while (!unique && count < MAX_ATTEMPTS) {\n      let position = template.length - 1;\n      let replacement = '';\n      while (template.charAt(position) === 'X') {\n        replacement += PATH_CHARS.charAt(\n          Math.floor(PATH_CHARS.length * Math.random())\n        );\n        position -= 1;\n      }\n      const candidate = template.slice(0, position + 1) + replacement;\n      if (!parent.getItem(candidate)) {\n        name = candidate;\n        unique = true;\n      }\n      count += 1;\n    }\n    if (!name) {\n      throw new FSError('EEXIST', prefix);\n    }\n    const dir = new Directory();\n    parent.addItem(name, dir);\n    let uniquePath = path.join(parentPath, name);\n    if (encoding === 'buffer') {\n      uniquePath = bufferFrom(uniquePath);\n    }\n    return uniquePath;\n  });\n};\n\n/**\n * Truncate a file.\n * @param {number} fd File descriptor.\n * @param {number} len Number of bytes.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */\nBinding.prototype.ftruncate = function(fd, len, callback, ctx) {\n  markSyscall(ctx, 'ftruncate');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    const descriptor = this.getDescriptorById(fd);\n    if (!descriptor.isWrite()) {\n      throw new FSError('EINVAL');\n    }\n    const file = descriptor.getItem();\n    if (!(file instanceof File)) {\n      throw new FSError('EINVAL');\n    }\n    const content = file.getContent();\n    const newContent = bufferAlloc(len);\n    content.copy(newContent);\n    file.setContent(newContent);\n  });\n};\n\n/**\n * Legacy support.\n * @param {number} fd File descriptor.\n * @param {number} len Number of bytes.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */\nBinding.prototype.truncate = Binding.prototype.ftruncate;\n\n/**\n * Change user and group owner.\n * @param {string} pathname Path.\n * @param {number} uid User id.\n * @param {number} gid Group id.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */\nBinding.prototype.chown = function(pathname, uid, gid, callback, ctx) {\n  markSyscall(ctx, 'chown');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    pathname = deBuffer(pathname);\n    const item = this._system.getItem(pathname);\n    if (!item) {\n      throw new FSError('ENOENT', pathname);\n    }\n    item.setUid(uid);\n    item.setGid(gid);\n  });\n};\n\n/**\n * Change user and group owner.\n * @param {number} fd File descriptor.\n * @param {number} uid User id.\n * @param {number} gid Group id.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */\nBinding.prototype.fchown = function(fd, uid, gid, callback, ctx) {\n  markSyscall(ctx, 'fchown');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    const descriptor = this.getDescriptorById(fd);\n    const item = descriptor.getItem();\n    item.setUid(uid);\n    item.setGid(gid);\n  });\n};\n\n/**\n * Change permissions.\n * @param {string} pathname Path.\n * @param {number} mode Mode.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */\nBinding.prototype.chmod = function(pathname, mode, callback, ctx) {\n  markSyscall(ctx, 'chmod');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    pathname = deBuffer(pathname);\n    const item = this._system.getItem(pathname);\n    if (!item) {\n      throw new FSError('ENOENT', pathname);\n    }\n    item.setMode(mode);\n  });\n};\n\n/**\n * Change permissions.\n * @param {number} fd File descriptor.\n * @param {number} mode Mode.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */\nBinding.prototype.fchmod = function(fd, mode, callback, ctx) {\n  markSyscall(ctx, 'fchmod');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    const descriptor = this.getDescriptorById(fd);\n    const item = descriptor.getItem();\n    item.setMode(mode);\n  });\n};\n\n/**\n * Delete a named item.\n * @param {string} pathname Path to item.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */\nBinding.prototype.unlink = function(pathname, callback, ctx) {\n  markSyscall(ctx, 'unlink');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    pathname = deBuffer(pathname);\n    const item = this._system.getItem(pathname);\n    if (!item) {\n      throw new FSError('ENOENT', pathname);\n    }\n    if (item instanceof Directory) {\n      throw new FSError('EPERM', pathname);\n    }\n    const parent = this._system.getItem(path.dirname(pathname));\n    parent.removeItem(path.basename(pathname));\n  });\n};\n\n/**\n * Update timestamps.\n * @param {string} pathname Path to item.\n * @param {number} atime Access time (in seconds).\n * @param {number} mtime Modification time (in seconds).\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */\nBinding.prototype.utimes = function(pathname, atime, mtime, callback, ctx) {\n  markSyscall(ctx, 'utimes');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    pathname = deBuffer(pathname);\n    const item = this._system.getItem(pathname);\n    if (!item) {\n      throw new FSError('ENOENT', pathname);\n    }\n    item.setATime(new Date(atime * 1000));\n    item.setMTime(new Date(mtime * 1000));\n  });\n};\n\n/**\n * Update timestamps.\n * @param {number} fd File descriptor.\n * @param {number} atime Access time (in seconds).\n * @param {number} mtime Modification time (in seconds).\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */\nBinding.prototype.futimes = function(fd, atime, mtime, callback, ctx) {\n  markSyscall(ctx, 'futimes');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    const descriptor = this.getDescriptorById(fd);\n    const item = descriptor.getItem();\n    item.setATime(new Date(atime * 1000));\n    item.setMTime(new Date(mtime * 1000));\n  });\n};\n\n/**\n * Synchronize in-core state with storage device.\n * @param {number} fd File descriptor.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */\nBinding.prototype.fsync = function(fd, callback, ctx) {\n  markSyscall(ctx, 'fsync');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    this.getDescriptorById(fd);\n  });\n};\n\n/**\n * Synchronize in-core metadata state with storage device.\n * @param {number} fd File descriptor.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */\nBinding.prototype.fdatasync = function(fd, callback, ctx) {\n  markSyscall(ctx, 'fdatasync');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    this.getDescriptorById(fd);\n  });\n};\n\n/**\n * Create a hard link.\n * @param {string} srcPath The existing file.\n * @param {string} destPath The new link to create.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */\nBinding.prototype.link = function(srcPath, destPath, callback, ctx) {\n  markSyscall(ctx, 'link');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    srcPath = deBuffer(srcPath);\n    destPath = deBuffer(destPath);\n    const item = this._system.getItem(srcPath);\n    if (!item) {\n      throw new FSError('ENOENT', srcPath);\n    }\n    if (item instanceof Directory) {\n      throw new FSError('EPERM', srcPath);\n    }\n    if (this._system.getItem(destPath)) {\n      throw new FSError('EEXIST', destPath);\n    }\n    const parent = this._system.getItem(path.dirname(destPath));\n    if (!parent) {\n      throw new FSError('ENOENT', destPath);\n    }\n    if (!(parent instanceof Directory)) {\n      throw new FSError('ENOTDIR', destPath);\n    }\n    parent.addItem(path.basename(destPath), item);\n  });\n};\n\n/**\n * Create a symbolic link.\n * @param {string} srcPath Path from link to the source file.\n * @param {string} destPath Path for the generated link.\n * @param {string} type Ignored (used for Windows only).\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */\nBinding.prototype.symlink = function(srcPath, destPath, type, callback, ctx) {\n  markSyscall(ctx, 'symlink');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    srcPath = deBuffer(srcPath);\n    destPath = deBuffer(destPath);\n    if (this._system.getItem(destPath)) {\n      throw new FSError('EEXIST', destPath);\n    }\n    const parent = this._system.getItem(path.dirname(destPath));\n    if (!parent) {\n      throw new FSError('ENOENT', destPath);\n    }\n    if (!(parent instanceof Directory)) {\n      throw new FSError('ENOTDIR', destPath);\n    }\n    const link = new SymbolicLink();\n    link.setPath(srcPath);\n    parent.addItem(path.basename(destPath), link);\n  });\n};\n\n/**\n * Read the contents of a symbolic link.\n * @param {string} pathname Path to symbolic link.\n * @param {string} encoding The encoding ('utf-8' or 'buffer').\n * @param {function(Error, (string|Buffer))} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {string|Buffer} Symbolic link contents (path to source).\n */\nBinding.prototype.readlink = function(pathname, encoding, callback, ctx) {\n  if (encoding && typeof encoding !== 'string') {\n    // this would not happend in nodejs v10+\n    callback = encoding;\n    encoding = 'utf-8';\n  }\n\n  markSyscall(ctx, 'readlink');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    pathname = deBuffer(pathname);\n    const link = this._system.getItem(pathname);\n    if (!link) {\n      throw new FSError('ENOENT', pathname);\n    }\n    if (!(link instanceof SymbolicLink)) {\n      throw new FSError('EINVAL', pathname);\n    }\n    let linkPath = link.getPath();\n    if (encoding === 'buffer') {\n      linkPath = bufferFrom(linkPath);\n    }\n    return linkPath;\n  });\n};\n\n/**\n * Stat an item.\n * @param {string} filepath Path.\n * @param {function(Error, Stats)|Float64Array|BigUint64Array} callback Callback (optional). In Node 7.7.0+ this will be a Float64Array\n * that should be filled with stat values.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {Stats|undefined} Stats or undefined (if sync).\n */\nBinding.prototype.lstat = function(filepath, options, callback, ctx) {\n  if (arguments.length < 3) {\n    // this would not happend in nodejs v10+\n    callback = options;\n    options = {};\n  }\n\n  markSyscall(ctx, 'lstat');\n\n  return maybeCallback(wrapStatsCallback(callback), ctx, this, function() {\n    filepath = deBuffer(filepath);\n    const item = this._system.getItem(filepath);\n    if (!item) {\n      throw new FSError('ENOENT', filepath);\n    }\n    const stats = item.getStats();\n\n    // In Node 7.7.0+, binding.stat accepts a Float64Array as the second argument,\n    // which should be filled with stat values.\n    // In prior versions of Node, binding.stat simply returns a Stats instance.\n    if (\n      callback instanceof Float64Array ||\n      callback instanceof BigUint64Array\n    ) {\n      fillStatsArray(stats, callback);\n    } else {\n      fillStatsArray(stats, statValues);\n      return new Stats(item.getStats());\n    }\n  });\n};\n\n/**\n * Tests user permissions.\n * @param {string} filepath Path.\n * @param {number} mode Mode.\n * @param {function(Error)} callback Callback (optional).\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */\nBinding.prototype.access = function(filepath, mode, callback, ctx) {\n  markSyscall(ctx, 'access');\n\n  return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n    filepath = deBuffer(filepath);\n    let item = this._system.getItem(filepath);\n    let links = 0;\n    while (item instanceof SymbolicLink) {\n      if (links > MAX_LINKS) {\n        throw new FSError('ELOOP', filepath);\n      }\n      filepath = path.resolve(path.dirname(filepath), item.getPath());\n      item = this._system.getItem(filepath);\n      ++links;\n    }\n    if (!item) {\n      throw new FSError('ENOENT', filepath);\n    }\n    if (mode && process.getuid && process.getgid) {\n      const itemMode = item.getMode();\n      if (item.getUid() === process.getuid()) {\n        if ((itemMode & (mode * 64)) !== mode * 64) {\n          throw new FSError('EACCES', filepath);\n        }\n      } else if (item.getGid() === process.getgid()) {\n        if ((itemMode & (mode * 8)) !== mode * 8) {\n          throw new FSError('EACCES', filepath);\n        }\n      } else {\n        if ((itemMode & mode) !== mode) {\n          throw new FSError('EACCES', filepath);\n        }\n      }\n    }\n  });\n};\n\n/**\n * Not yet implemented.\n * @type {function()}\n */\nBinding.prototype.StatWatcher = notImplemented;\n\n/**\n * Export the binding constructor.\n * @type {function()}\n */\nexports = module.exports = Binding;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/binding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/buffer.js":
/*!********************************************!*\
  !*** ./node_modules/mock-fs/lib/buffer.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("exports.from =\n  Buffer.from ||\n  function(value, encoding) {\n    if (encoding) {\n      return new Buffer(value, encoding);\n    }\n    return new Buffer(value);\n  };\n\nexports.alloc =\n  Buffer.alloc ||\n  function(size) {\n    return new Buffer(size);\n  };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvYnVmZmVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcG9ydGtleS9uZXh0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvYnVmZmVyLmpzPzhlODEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5mcm9tID1cbiAgQnVmZmVyLmZyb20gfHxcbiAgZnVuY3Rpb24odmFsdWUsIGVuY29kaW5nKSB7XG4gICAgaWYgKGVuY29kaW5nKSB7XG4gICAgICByZXR1cm4gbmV3IEJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEJ1ZmZlcih2YWx1ZSk7XG4gIH07XG5cbmV4cG9ydHMuYWxsb2MgPVxuICBCdWZmZXIuYWxsb2MgfHxcbiAgZnVuY3Rpb24oc2l6ZSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKHNpemUpO1xuICB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/buffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/bypass.js":
/*!********************************************!*\
  !*** ./node_modules/mock-fs/lib/bypass.js ***!
  \********************************************/
/***/ ((module, exports) => {

eval("const realBinding = process.binding('fs');\nlet storedBinding;\n\n/**\n * Perform action, bypassing mock FS\n * @example\n * // This file exists on the real FS, not on the mocked FS\n * const filePath = '/path/file.json';\n * const data = mock.bypass(() => fs.readFileSync(filePath, 'utf-8'));\n */\nexports = module.exports = function bypass(fn) {\n  if (typeof fn !== 'function') {\n    throw new Error(`Must provide a function to perform for mock.bypass()`);\n  }\n\n  disable();\n\n  let result;\n  try {\n    result = fn();\n  } finally {\n    if (result && typeof result.then === 'function') {\n      result.then(\n        r => {\n          enable();\n          return r;\n        },\n        err => {\n          enable();\n          throw err;\n        }\n      );\n    } else {\n      enable();\n    }\n  }\n\n  return result;\n};\n\n/**\n * Temporarily disable Mocked FS\n */\nfunction disable() {\n  if (realBinding._mockedBinding) {\n    storedBinding = realBinding._mockedBinding;\n    delete realBinding._mockedBinding;\n  }\n}\n\n/**\n * Enables Mocked FS after being disabled by disable()\n */\nfunction enable() {\n  if (storedBinding) {\n    realBinding._mockedBinding = storedBinding;\n    storedBinding = undefined;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvYnlwYXNzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcG9ydGtleS9uZXh0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvYnlwYXNzLmpzPzc0MjQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcmVhbEJpbmRpbmcgPSBwcm9jZXNzLmJpbmRpbmcoJ2ZzJyk7XG5sZXQgc3RvcmVkQmluZGluZztcblxuLyoqXG4gKiBQZXJmb3JtIGFjdGlvbiwgYnlwYXNzaW5nIG1vY2sgRlNcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGlzIGZpbGUgZXhpc3RzIG9uIHRoZSByZWFsIEZTLCBub3Qgb24gdGhlIG1vY2tlZCBGU1xuICogY29uc3QgZmlsZVBhdGggPSAnL3BhdGgvZmlsZS5qc29uJztcbiAqIGNvbnN0IGRhdGEgPSBtb2NrLmJ5cGFzcygoKSA9PiBmcy5yZWFkRmlsZVN5bmMoZmlsZVBhdGgsICd1dGYtOCcpKTtcbiAqL1xuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnlwYXNzKGZuKSB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYE11c3QgcHJvdmlkZSBhIGZ1bmN0aW9uIHRvIHBlcmZvcm0gZm9yIG1vY2suYnlwYXNzKClgKTtcbiAgfVxuXG4gIGRpc2FibGUoKTtcblxuICBsZXQgcmVzdWx0O1xuICB0cnkge1xuICAgIHJlc3VsdCA9IGZuKCk7XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKHJlc3VsdCAmJiB0eXBlb2YgcmVzdWx0LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlc3VsdC50aGVuKFxuICAgICAgICByID0+IHtcbiAgICAgICAgICBlbmFibGUoKTtcbiAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyID0+IHtcbiAgICAgICAgICBlbmFibGUoKTtcbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVuYWJsZSgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIFRlbXBvcmFyaWx5IGRpc2FibGUgTW9ja2VkIEZTXG4gKi9cbmZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gIGlmIChyZWFsQmluZGluZy5fbW9ja2VkQmluZGluZykge1xuICAgIHN0b3JlZEJpbmRpbmcgPSByZWFsQmluZGluZy5fbW9ja2VkQmluZGluZztcbiAgICBkZWxldGUgcmVhbEJpbmRpbmcuX21vY2tlZEJpbmRpbmc7XG4gIH1cbn1cblxuLyoqXG4gKiBFbmFibGVzIE1vY2tlZCBGUyBhZnRlciBiZWluZyBkaXNhYmxlZCBieSBkaXNhYmxlKClcbiAqL1xuZnVuY3Rpb24gZW5hYmxlKCkge1xuICBpZiAoc3RvcmVkQmluZGluZykge1xuICAgIHJlYWxCaW5kaW5nLl9tb2NrZWRCaW5kaW5nID0gc3RvcmVkQmluZGluZztcbiAgICBzdG9yZWRCaW5kaW5nID0gdW5kZWZpbmVkO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/bypass.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/descriptor.js":
/*!************************************************!*\
  !*** ./node_modules/mock-fs/lib/descriptor.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nconst constants = __webpack_require__(/*! constants */ \"constants\");\n\n/**\n * Create a new file descriptor.\n * @param {number} flags Flags.\n * @constructor\n */\nfunction FileDescriptor(flags) {\n  /**\n   * Flags.\n   * @type {number}\n   */\n  this._flags = flags;\n\n  /**\n   * File system item.\n   * @type {Item}\n   */\n  this._item = null;\n\n  /**\n   * Current file position.\n   * @type {number}\n   */\n  this._position = 0;\n}\n\n/**\n * Set the item.\n * @param {Item} item File system item.\n */\nFileDescriptor.prototype.setItem = function(item) {\n  this._item = item;\n};\n\n/**\n * Get the item.\n * @return {Item} File system item.\n */\nFileDescriptor.prototype.getItem = function() {\n  return this._item;\n};\n\n/**\n * Get the current file position.\n * @return {number} File position.\n */\nFileDescriptor.prototype.getPosition = function() {\n  return this._position;\n};\n\n/**\n * Set the current file position.\n * @param {number} position File position.\n */\nFileDescriptor.prototype.setPosition = function(position) {\n  this._position = position;\n};\n\n/**\n * Check if file opened for appending.\n * @return {boolean} Opened for appending.\n */\nFileDescriptor.prototype.isAppend = function() {\n  return (this._flags & constants.O_APPEND) === constants.O_APPEND;\n};\n\n/**\n * Check if file opened for creation.\n * @return {boolean} Opened for creation.\n */\nFileDescriptor.prototype.isCreate = function() {\n  return (this._flags & constants.O_CREAT) === constants.O_CREAT;\n};\n\n/**\n * Check if file opened for reading.\n * @return {boolean} Opened for reading.\n */\nFileDescriptor.prototype.isRead = function() {\n  return (this._flags & constants.O_WRONLY) !== constants.O_WRONLY;\n};\n\n/**\n * Check if file opened for writing.\n * @return {boolean} Opened for writing.\n */\nFileDescriptor.prototype.isWrite = function() {\n  return (\n    (this._flags & constants.O_WRONLY) === constants.O_WRONLY ||\n    (this._flags & constants.O_RDWR) === constants.O_RDWR\n  );\n};\n\n/**\n * Check if file opened for truncating.\n * @return {boolean} Opened for truncating.\n */\nFileDescriptor.prototype.isTruncate = function() {\n  return (this._flags & constants.O_TRUNC) === constants.O_TRUNC;\n};\n\n/**\n * Check if file opened with exclusive flag.\n * @return {boolean} Opened with exclusive.\n */\nFileDescriptor.prototype.isExclusive = function() {\n  return (this._flags & constants.O_EXCL) === constants.O_EXCL;\n};\n\n/**\n * Export the constructor.\n * @type {function()}\n */\nexports = module.exports = FileDescriptor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvZGVzY3JpcHRvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixrQkFBa0IsbUJBQU8sQ0FBQyw0QkFBVzs7QUFFckM7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksTUFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLFNBQVM7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLFNBQVM7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHBvcnRrZXkvbmV4dC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL21vY2stZnMvbGliL2Rlc2NyaXB0b3IuanM/NDJmMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJ2NvbnN0YW50cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBmaWxlIGRlc2NyaXB0b3IuXG4gKiBAcGFyYW0ge251bWJlcn0gZmxhZ3MgRmxhZ3MuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gRmlsZURlc2NyaXB0b3IoZmxhZ3MpIHtcbiAgLyoqXG4gICAqIEZsYWdzLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5fZmxhZ3MgPSBmbGFncztcblxuICAvKipcbiAgICogRmlsZSBzeXN0ZW0gaXRlbS5cbiAgICogQHR5cGUge0l0ZW19XG4gICAqL1xuICB0aGlzLl9pdGVtID0gbnVsbDtcblxuICAvKipcbiAgICogQ3VycmVudCBmaWxlIHBvc2l0aW9uLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5fcG9zaXRpb24gPSAwO1xufVxuXG4vKipcbiAqIFNldCB0aGUgaXRlbS5cbiAqIEBwYXJhbSB7SXRlbX0gaXRlbSBGaWxlIHN5c3RlbSBpdGVtLlxuICovXG5GaWxlRGVzY3JpcHRvci5wcm90b3R5cGUuc2V0SXRlbSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgdGhpcy5faXRlbSA9IGl0ZW07XG59O1xuXG4vKipcbiAqIEdldCB0aGUgaXRlbS5cbiAqIEByZXR1cm4ge0l0ZW19IEZpbGUgc3lzdGVtIGl0ZW0uXG4gKi9cbkZpbGVEZXNjcmlwdG9yLnByb3RvdHlwZS5nZXRJdGVtID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9pdGVtO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnQgZmlsZSBwb3NpdGlvbi5cbiAqIEByZXR1cm4ge251bWJlcn0gRmlsZSBwb3NpdGlvbi5cbiAqL1xuRmlsZURlc2NyaXB0b3IucHJvdG90eXBlLmdldFBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9wb3NpdGlvbjtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBjdXJyZW50IGZpbGUgcG9zaXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zaXRpb24gRmlsZSBwb3NpdGlvbi5cbiAqL1xuRmlsZURlc2NyaXB0b3IucHJvdG90eXBlLnNldFBvc2l0aW9uID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcbiAgdGhpcy5fcG9zaXRpb24gPSBwb3NpdGlvbjtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgZmlsZSBvcGVuZWQgZm9yIGFwcGVuZGluZy5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IE9wZW5lZCBmb3IgYXBwZW5kaW5nLlxuICovXG5GaWxlRGVzY3JpcHRvci5wcm90b3R5cGUuaXNBcHBlbmQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICh0aGlzLl9mbGFncyAmIGNvbnN0YW50cy5PX0FQUEVORCkgPT09IGNvbnN0YW50cy5PX0FQUEVORDtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgZmlsZSBvcGVuZWQgZm9yIGNyZWF0aW9uLlxuICogQHJldHVybiB7Ym9vbGVhbn0gT3BlbmVkIGZvciBjcmVhdGlvbi5cbiAqL1xuRmlsZURlc2NyaXB0b3IucHJvdG90eXBlLmlzQ3JlYXRlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAodGhpcy5fZmxhZ3MgJiBjb25zdGFudHMuT19DUkVBVCkgPT09IGNvbnN0YW50cy5PX0NSRUFUO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBmaWxlIG9wZW5lZCBmb3IgcmVhZGluZy5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IE9wZW5lZCBmb3IgcmVhZGluZy5cbiAqL1xuRmlsZURlc2NyaXB0b3IucHJvdG90eXBlLmlzUmVhZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKHRoaXMuX2ZsYWdzICYgY29uc3RhbnRzLk9fV1JPTkxZKSAhPT0gY29uc3RhbnRzLk9fV1JPTkxZO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBmaWxlIG9wZW5lZCBmb3Igd3JpdGluZy5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IE9wZW5lZCBmb3Igd3JpdGluZy5cbiAqL1xuRmlsZURlc2NyaXB0b3IucHJvdG90eXBlLmlzV3JpdGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIChcbiAgICAodGhpcy5fZmxhZ3MgJiBjb25zdGFudHMuT19XUk9OTFkpID09PSBjb25zdGFudHMuT19XUk9OTFkgfHxcbiAgICAodGhpcy5fZmxhZ3MgJiBjb25zdGFudHMuT19SRFdSKSA9PT0gY29uc3RhbnRzLk9fUkRXUlxuICApO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBmaWxlIG9wZW5lZCBmb3IgdHJ1bmNhdGluZy5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IE9wZW5lZCBmb3IgdHJ1bmNhdGluZy5cbiAqL1xuRmlsZURlc2NyaXB0b3IucHJvdG90eXBlLmlzVHJ1bmNhdGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICh0aGlzLl9mbGFncyAmIGNvbnN0YW50cy5PX1RSVU5DKSA9PT0gY29uc3RhbnRzLk9fVFJVTkM7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGZpbGUgb3BlbmVkIHdpdGggZXhjbHVzaXZlIGZsYWcuXG4gKiBAcmV0dXJuIHtib29sZWFufSBPcGVuZWQgd2l0aCBleGNsdXNpdmUuXG4gKi9cbkZpbGVEZXNjcmlwdG9yLnByb3RvdHlwZS5pc0V4Y2x1c2l2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKHRoaXMuX2ZsYWdzICYgY29uc3RhbnRzLk9fRVhDTCkgPT09IGNvbnN0YW50cy5PX0VYQ0w7XG59O1xuXG4vKipcbiAqIEV4cG9ydCB0aGUgY29uc3RydWN0b3IuXG4gKiBAdHlwZSB7ZnVuY3Rpb24oKX1cbiAqL1xuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gRmlsZURlc2NyaXB0b3I7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/descriptor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/directory.js":
/*!***********************************************!*\
  !*** ./node_modules/mock-fs/lib/directory.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nconst util = __webpack_require__(/*! util */ \"util\");\n\nconst Item = __webpack_require__(/*! ./item */ \"(ssr)/./node_modules/mock-fs/lib/item.js\");\n\nconst constants = __webpack_require__(/*! constants */ \"constants\");\n\n/**\n * A directory.\n * @constructor\n */\nfunction Directory() {\n  Item.call(this);\n\n  /**\n   * Items in this directory.\n   * @type {Object.<string, Item>}\n   */\n  this._items = {};\n\n  /**\n   * Permissions.\n   */\n  this._mode = 511; // 0777\n}\nutil.inherits(Directory, Item);\n\n/**\n * Add an item to the directory.\n * @param {string} name The name to give the item.\n * @param {Item} item The item to add.\n * @return {Item} The added item.\n */\nDirectory.prototype.addItem = function(name, item) {\n  if (this._items.hasOwnProperty(name)) {\n    throw new Error('Item with the same name already exists: ' + name);\n  }\n  this._items[name] = item;\n  ++item.links;\n  if (item instanceof Directory) {\n    // for '.' entry\n    ++item.links;\n    // for subdirectory\n    ++this.links;\n  }\n  this.setMTime(new Date());\n  return item;\n};\n\n/**\n * Get a named item.\n * @param {string} name Item name.\n * @return {Item} The named item (or null if none).\n */\nDirectory.prototype.getItem = function(name) {\n  let item = null;\n  if (this._items.hasOwnProperty(name)) {\n    item = this._items[name];\n  }\n  return item;\n};\n\n/**\n * Remove an item.\n * @param {string} name Name of item to remove.\n * @return {Item} The orphan item.\n */\nDirectory.prototype.removeItem = function(name) {\n  if (!this._items.hasOwnProperty(name)) {\n    throw new Error('Item does not exist in directory: ' + name);\n  }\n  const item = this._items[name];\n  delete this._items[name];\n  --item.links;\n  if (item instanceof Directory) {\n    // for '.' entry\n    --item.links;\n    // for subdirectory\n    --this.links;\n  }\n  this.setMTime(new Date());\n  return item;\n};\n\n/**\n * Get list of item names in this directory.\n * @return {Array.<string>} Item names.\n */\nDirectory.prototype.list = function() {\n  return Object.keys(this._items).sort();\n};\n\n/**\n * Get directory stats.\n * @return {Object} Stats properties.\n */\nDirectory.prototype.getStats = function() {\n  const stats = Item.prototype.getStats.call(this);\n  stats.mode = this.getMode() | constants.S_IFDIR;\n  stats.size = 1;\n  stats.blocks = 1;\n  return stats;\n};\n\n/**\n * Export the constructor.\n * @type {function()}\n */\nexports = module.exports = Directory;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvZGlyZWN0b3J5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGFBQWEsbUJBQU8sQ0FBQyxrQkFBTTs7QUFFM0IsYUFBYSxtQkFBTyxDQUFDLHdEQUFROztBQUU3QixrQkFBa0IsbUJBQU8sQ0FBQyw0QkFBVzs7QUFFckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsTUFBTTtBQUNqQixZQUFZLE1BQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLE1BQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksTUFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLGdCQUFnQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHBvcnRrZXkvbmV4dC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL21vY2stZnMvbGliL2RpcmVjdG9yeS5qcz8zY2YyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuY29uc3QgSXRlbSA9IHJlcXVpcmUoJy4vaXRlbScpO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCdjb25zdGFudHMnKTtcblxuLyoqXG4gKiBBIGRpcmVjdG9yeS5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBEaXJlY3RvcnkoKSB7XG4gIEl0ZW0uY2FsbCh0aGlzKTtcblxuICAvKipcbiAgICogSXRlbXMgaW4gdGhpcyBkaXJlY3RvcnkuXG4gICAqIEB0eXBlIHtPYmplY3QuPHN0cmluZywgSXRlbT59XG4gICAqL1xuICB0aGlzLl9pdGVtcyA9IHt9O1xuXG4gIC8qKlxuICAgKiBQZXJtaXNzaW9ucy5cbiAgICovXG4gIHRoaXMuX21vZGUgPSA1MTE7IC8vIDA3Nzdcbn1cbnV0aWwuaW5oZXJpdHMoRGlyZWN0b3J5LCBJdGVtKTtcblxuLyoqXG4gKiBBZGQgYW4gaXRlbSB0byB0aGUgZGlyZWN0b3J5LlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgdG8gZ2l2ZSB0aGUgaXRlbS5cbiAqIEBwYXJhbSB7SXRlbX0gaXRlbSBUaGUgaXRlbSB0byBhZGQuXG4gKiBAcmV0dXJuIHtJdGVtfSBUaGUgYWRkZWQgaXRlbS5cbiAqL1xuRGlyZWN0b3J5LnByb3RvdHlwZS5hZGRJdGVtID0gZnVuY3Rpb24obmFtZSwgaXRlbSkge1xuICBpZiAodGhpcy5faXRlbXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0ZW0gd2l0aCB0aGUgc2FtZSBuYW1lIGFscmVhZHkgZXhpc3RzOiAnICsgbmFtZSk7XG4gIH1cbiAgdGhpcy5faXRlbXNbbmFtZV0gPSBpdGVtO1xuICArK2l0ZW0ubGlua3M7XG4gIGlmIChpdGVtIGluc3RhbmNlb2YgRGlyZWN0b3J5KSB7XG4gICAgLy8gZm9yICcuJyBlbnRyeVxuICAgICsraXRlbS5saW5rcztcbiAgICAvLyBmb3Igc3ViZGlyZWN0b3J5XG4gICAgKyt0aGlzLmxpbmtzO1xuICB9XG4gIHRoaXMuc2V0TVRpbWUobmV3IERhdGUoKSk7XG4gIHJldHVybiBpdGVtO1xufTtcblxuLyoqXG4gKiBHZXQgYSBuYW1lZCBpdGVtLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgSXRlbSBuYW1lLlxuICogQHJldHVybiB7SXRlbX0gVGhlIG5hbWVkIGl0ZW0gKG9yIG51bGwgaWYgbm9uZSkuXG4gKi9cbkRpcmVjdG9yeS5wcm90b3R5cGUuZ2V0SXRlbSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgbGV0IGl0ZW0gPSBudWxsO1xuICBpZiAodGhpcy5faXRlbXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICBpdGVtID0gdGhpcy5faXRlbXNbbmFtZV07XG4gIH1cbiAgcmV0dXJuIGl0ZW07XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpdGVtLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiBpdGVtIHRvIHJlbW92ZS5cbiAqIEByZXR1cm4ge0l0ZW19IFRoZSBvcnBoYW4gaXRlbS5cbiAqL1xuRGlyZWN0b3J5LnByb3RvdHlwZS5yZW1vdmVJdGVtID0gZnVuY3Rpb24obmFtZSkge1xuICBpZiAoIXRoaXMuX2l0ZW1zLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJdGVtIGRvZXMgbm90IGV4aXN0IGluIGRpcmVjdG9yeTogJyArIG5hbWUpO1xuICB9XG4gIGNvbnN0IGl0ZW0gPSB0aGlzLl9pdGVtc1tuYW1lXTtcbiAgZGVsZXRlIHRoaXMuX2l0ZW1zW25hbWVdO1xuICAtLWl0ZW0ubGlua3M7XG4gIGlmIChpdGVtIGluc3RhbmNlb2YgRGlyZWN0b3J5KSB7XG4gICAgLy8gZm9yICcuJyBlbnRyeVxuICAgIC0taXRlbS5saW5rcztcbiAgICAvLyBmb3Igc3ViZGlyZWN0b3J5XG4gICAgLS10aGlzLmxpbmtzO1xuICB9XG4gIHRoaXMuc2V0TVRpbWUobmV3IERhdGUoKSk7XG4gIHJldHVybiBpdGVtO1xufTtcblxuLyoqXG4gKiBHZXQgbGlzdCBvZiBpdGVtIG5hbWVzIGluIHRoaXMgZGlyZWN0b3J5LlxuICogQHJldHVybiB7QXJyYXkuPHN0cmluZz59IEl0ZW0gbmFtZXMuXG4gKi9cbkRpcmVjdG9yeS5wcm90b3R5cGUubGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5faXRlbXMpLnNvcnQoKTtcbn07XG5cbi8qKlxuICogR2V0IGRpcmVjdG9yeSBzdGF0cy5cbiAqIEByZXR1cm4ge09iamVjdH0gU3RhdHMgcHJvcGVydGllcy5cbiAqL1xuRGlyZWN0b3J5LnByb3RvdHlwZS5nZXRTdGF0cyA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCBzdGF0cyA9IEl0ZW0ucHJvdG90eXBlLmdldFN0YXRzLmNhbGwodGhpcyk7XG4gIHN0YXRzLm1vZGUgPSB0aGlzLmdldE1vZGUoKSB8IGNvbnN0YW50cy5TX0lGRElSO1xuICBzdGF0cy5zaXplID0gMTtcbiAgc3RhdHMuYmxvY2tzID0gMTtcbiAgcmV0dXJuIHN0YXRzO1xufTtcblxuLyoqXG4gKiBFeHBvcnQgdGhlIGNvbnN0cnVjdG9yLlxuICogQHR5cGUge2Z1bmN0aW9uKCl9XG4gKi9cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IERpcmVjdG9yeTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/directory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/error.js":
/*!*******************************************!*\
  !*** ./node_modules/mock-fs/lib/error.js ***!
  \*******************************************/
/***/ ((module, exports) => {

"use strict";
eval("\n\nconst uvBinding = process.binding('uv');\n/**\n * Error codes from libuv.\n * @enum {number}\n */\nconst codes = {};\n\nif (uvBinding.errmap) {\n  // nodejs v8+\n  uvBinding.errmap.forEach(function(value, errno) {\n    const code = value[0];\n    const message = value[1];\n    codes[code] = {errno: errno, message: message};\n  });\n} else {\n  // nodejs v4 and v6\n  Object.keys(uvBinding).forEach(function(key) {\n    if (key.startsWith('UV_')) {\n      const code = key.slice(3);\n      const errno = uvBinding[key];\n      codes[code] = {errno: errno, message: key};\n    }\n  });\n}\n\n/**\n * Create an error.\n * @param {string} code Error code.\n * @param {string} path Path (optional).\n * @constructor\n */\nfunction FSError(code, path) {\n  if (!codes.hasOwnProperty(code)) {\n    throw new Error('Programmer error, invalid error code: ' + code);\n  }\n  Error.call(this);\n  const details = codes[code];\n  let message = code + ', ' + details.message;\n  if (path) {\n    message += \" '\" + path + \"'\";\n  }\n  this.message = message;\n  this.code = code;\n  this.errno = details.errno;\n  if (path !== undefined) {\n    this.path = path;\n  }\n  Error.captureStackTrace(this, FSError);\n}\nFSError.prototype = new Error();\nFSError.codes = codes;\n\n/**\n * Error constructor.\n */\nexports = module.exports = FSError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixHQUFHO0FBQ0gsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcG9ydGtleS9uZXh0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvZXJyb3IuanM/ZGU5MiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHV2QmluZGluZyA9IHByb2Nlc3MuYmluZGluZygndXYnKTtcbi8qKlxuICogRXJyb3IgY29kZXMgZnJvbSBsaWJ1di5cbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbmNvbnN0IGNvZGVzID0ge307XG5cbmlmICh1dkJpbmRpbmcuZXJybWFwKSB7XG4gIC8vIG5vZGVqcyB2OCtcbiAgdXZCaW5kaW5nLmVycm1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBlcnJubykge1xuICAgIGNvbnN0IGNvZGUgPSB2YWx1ZVswXTtcbiAgICBjb25zdCBtZXNzYWdlID0gdmFsdWVbMV07XG4gICAgY29kZXNbY29kZV0gPSB7ZXJybm86IGVycm5vLCBtZXNzYWdlOiBtZXNzYWdlfTtcbiAgfSk7XG59IGVsc2Uge1xuICAvLyBub2RlanMgdjQgYW5kIHY2XG4gIE9iamVjdC5rZXlzKHV2QmluZGluZykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoJ1VWXycpKSB7XG4gICAgICBjb25zdCBjb2RlID0ga2V5LnNsaWNlKDMpO1xuICAgICAgY29uc3QgZXJybm8gPSB1dkJpbmRpbmdba2V5XTtcbiAgICAgIGNvZGVzW2NvZGVdID0ge2Vycm5vOiBlcnJubywgbWVzc2FnZToga2V5fTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBlcnJvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2RlIEVycm9yIGNvZGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIChvcHRpb25hbCkuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gRlNFcnJvcihjb2RlLCBwYXRoKSB7XG4gIGlmICghY29kZXMuaGFzT3duUHJvcGVydHkoY29kZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb2dyYW1tZXIgZXJyb3IsIGludmFsaWQgZXJyb3IgY29kZTogJyArIGNvZGUpO1xuICB9XG4gIEVycm9yLmNhbGwodGhpcyk7XG4gIGNvbnN0IGRldGFpbHMgPSBjb2Rlc1tjb2RlXTtcbiAgbGV0IG1lc3NhZ2UgPSBjb2RlICsgJywgJyArIGRldGFpbHMubWVzc2FnZTtcbiAgaWYgKHBhdGgpIHtcbiAgICBtZXNzYWdlICs9IFwiICdcIiArIHBhdGggKyBcIidcIjtcbiAgfVxuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLmNvZGUgPSBjb2RlO1xuICB0aGlzLmVycm5vID0gZGV0YWlscy5lcnJubztcbiAgaWYgKHBhdGggIT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMucGF0aCA9IHBhdGg7XG4gIH1cbiAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRlNFcnJvcik7XG59XG5GU0Vycm9yLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuRlNFcnJvci5jb2RlcyA9IGNvZGVzO1xuXG4vKipcbiAqIEVycm9yIGNvbnN0cnVjdG9yLlxuICovXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBGU0Vycm9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/file.js":
/*!******************************************!*\
  !*** ./node_modules/mock-fs/lib/file.js ***!
  \******************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nconst util = __webpack_require__(/*! util */ \"util\");\n\nconst Item = __webpack_require__(/*! ./item */ \"(ssr)/./node_modules/mock-fs/lib/item.js\");\nconst bufferFrom = (__webpack_require__(/*! ./buffer */ \"(ssr)/./node_modules/mock-fs/lib/buffer.js\").from);\nconst bufferAlloc = (__webpack_require__(/*! ./buffer */ \"(ssr)/./node_modules/mock-fs/lib/buffer.js\").alloc);\n\nconst EMPTY = bufferAlloc(0);\nconst constants = __webpack_require__(/*! constants */ \"constants\");\n\n/**\n * A file.\n * @constructor\n */\nfunction File() {\n  Item.call(this);\n\n  /**\n   * File content.\n   * @type {Buffer}\n   */\n  this._content = EMPTY;\n}\nutil.inherits(File, Item);\n\n/**\n * Get the file contents.\n * @return {Buffer} File contents.\n */\nFile.prototype.getContent = function() {\n  this.setATime(new Date());\n  return this._content;\n};\n\n/**\n * Set the file contents.\n * @param {string|Buffer} content File contents.\n */\nFile.prototype.setContent = function(content) {\n  if (typeof content === 'string') {\n    content = bufferFrom(content);\n  } else if (!Buffer.isBuffer(content)) {\n    throw new Error('File content must be a string or buffer');\n  }\n  this._content = content;\n  const now = Date.now();\n  this.setCTime(new Date(now));\n  this.setMTime(new Date(now));\n};\n\n/**\n * Get file stats.\n * @return {Object} Stats properties.\n */\nFile.prototype.getStats = function() {\n  const size = this._content.length;\n  const stats = Item.prototype.getStats.call(this);\n  stats.mode = this.getMode() | constants.S_IFREG;\n  stats.size = size;\n  stats.blocks = Math.ceil(size / 512);\n  return stats;\n};\n\n/**\n * Export the constructor.\n * @type {function()}\n */\nexports = module.exports = File;\n\n/**\n * Standard input.\n * @constructor\n */\nfunction StandardInput() {\n  File.call(this);\n  this.setMode(438); // 0666\n}\nutil.inherits(StandardInput, File);\n\nexports.StandardInput = StandardInput;\n\n/**\n * Standard output.\n * @constructor\n */\nfunction StandardOutput() {\n  File.call(this);\n  this.setMode(438); // 0666\n}\nutil.inherits(StandardOutput, File);\n\n/**\n * Write the contents to stdout.\n * @param {string|Buffer} content File contents.\n */\nStandardOutput.prototype.setContent = function(content) {\n  if (process.stdout.isTTY) {\n    process.stdout.write(content);\n  }\n};\n\nexports.StandardOutput = StandardOutput;\n\n/**\n * Standard error.\n * @constructor\n */\nfunction StandardError() {\n  File.call(this);\n  this.setMode(438); // 0666\n}\nutil.inherits(StandardError, File);\n\n/**\n * Write the contents to stderr.\n * @param {string|Buffer} content File contents.\n */\nStandardError.prototype.setContent = function(content) {\n  if (process.stderr.isTTY) {\n    process.stderr.write(content);\n  }\n};\n\nexports.StandardError = StandardError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvZmlsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixhQUFhLG1CQUFPLENBQUMsa0JBQU07O0FBRTNCLGFBQWEsbUJBQU8sQ0FBQyx3REFBUTtBQUM3QixtQkFBbUIsd0ZBQXdCO0FBQzNDLG9CQUFvQix5RkFBeUI7O0FBRTdDO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMsNEJBQVc7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQSxxQkFBcUI7O0FBRXJCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNCQUFzQjs7QUFFdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsZUFBZTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHBvcnRrZXkvbmV4dC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL21vY2stZnMvbGliL2ZpbGUuanM/YzRiOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbmNvbnN0IEl0ZW0gPSByZXF1aXJlKCcuL2l0ZW0nKTtcbmNvbnN0IGJ1ZmZlckZyb20gPSByZXF1aXJlKCcuL2J1ZmZlcicpLmZyb207XG5jb25zdCBidWZmZXJBbGxvYyA9IHJlcXVpcmUoJy4vYnVmZmVyJykuYWxsb2M7XG5cbmNvbnN0IEVNUFRZID0gYnVmZmVyQWxsb2MoMCk7XG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCdjb25zdGFudHMnKTtcblxuLyoqXG4gKiBBIGZpbGUuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gRmlsZSgpIHtcbiAgSXRlbS5jYWxsKHRoaXMpO1xuXG4gIC8qKlxuICAgKiBGaWxlIGNvbnRlbnQuXG4gICAqIEB0eXBlIHtCdWZmZXJ9XG4gICAqL1xuICB0aGlzLl9jb250ZW50ID0gRU1QVFk7XG59XG51dGlsLmluaGVyaXRzKEZpbGUsIEl0ZW0pO1xuXG4vKipcbiAqIEdldCB0aGUgZmlsZSBjb250ZW50cy5cbiAqIEByZXR1cm4ge0J1ZmZlcn0gRmlsZSBjb250ZW50cy5cbiAqL1xuRmlsZS5wcm90b3R5cGUuZ2V0Q29udGVudCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNldEFUaW1lKG5ldyBEYXRlKCkpO1xuICByZXR1cm4gdGhpcy5fY29udGVudDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBmaWxlIGNvbnRlbnRzLlxuICogQHBhcmFtIHtzdHJpbmd8QnVmZmVyfSBjb250ZW50IEZpbGUgY29udGVudHMuXG4gKi9cbkZpbGUucHJvdG90eXBlLnNldENvbnRlbnQgPSBmdW5jdGlvbihjb250ZW50KSB7XG4gIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBjb250ZW50ID0gYnVmZmVyRnJvbShjb250ZW50KTtcbiAgfSBlbHNlIGlmICghQnVmZmVyLmlzQnVmZmVyKGNvbnRlbnQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGaWxlIGNvbnRlbnQgbXVzdCBiZSBhIHN0cmluZyBvciBidWZmZXInKTtcbiAgfVxuICB0aGlzLl9jb250ZW50ID0gY29udGVudDtcbiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgdGhpcy5zZXRDVGltZShuZXcgRGF0ZShub3cpKTtcbiAgdGhpcy5zZXRNVGltZShuZXcgRGF0ZShub3cpKTtcbn07XG5cbi8qKlxuICogR2V0IGZpbGUgc3RhdHMuXG4gKiBAcmV0dXJuIHtPYmplY3R9IFN0YXRzIHByb3BlcnRpZXMuXG4gKi9cbkZpbGUucHJvdG90eXBlLmdldFN0YXRzID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHNpemUgPSB0aGlzLl9jb250ZW50Lmxlbmd0aDtcbiAgY29uc3Qgc3RhdHMgPSBJdGVtLnByb3RvdHlwZS5nZXRTdGF0cy5jYWxsKHRoaXMpO1xuICBzdGF0cy5tb2RlID0gdGhpcy5nZXRNb2RlKCkgfCBjb25zdGFudHMuU19JRlJFRztcbiAgc3RhdHMuc2l6ZSA9IHNpemU7XG4gIHN0YXRzLmJsb2NrcyA9IE1hdGguY2VpbChzaXplIC8gNTEyKTtcbiAgcmV0dXJuIHN0YXRzO1xufTtcblxuLyoqXG4gKiBFeHBvcnQgdGhlIGNvbnN0cnVjdG9yLlxuICogQHR5cGUge2Z1bmN0aW9uKCl9XG4gKi9cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IEZpbGU7XG5cbi8qKlxuICogU3RhbmRhcmQgaW5wdXQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gU3RhbmRhcmRJbnB1dCgpIHtcbiAgRmlsZS5jYWxsKHRoaXMpO1xuICB0aGlzLnNldE1vZGUoNDM4KTsgLy8gMDY2NlxufVxudXRpbC5pbmhlcml0cyhTdGFuZGFyZElucHV0LCBGaWxlKTtcblxuZXhwb3J0cy5TdGFuZGFyZElucHV0ID0gU3RhbmRhcmRJbnB1dDtcblxuLyoqXG4gKiBTdGFuZGFyZCBvdXRwdXQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gU3RhbmRhcmRPdXRwdXQoKSB7XG4gIEZpbGUuY2FsbCh0aGlzKTtcbiAgdGhpcy5zZXRNb2RlKDQzOCk7IC8vIDA2NjZcbn1cbnV0aWwuaW5oZXJpdHMoU3RhbmRhcmRPdXRwdXQsIEZpbGUpO1xuXG4vKipcbiAqIFdyaXRlIHRoZSBjb250ZW50cyB0byBzdGRvdXQuXG4gKiBAcGFyYW0ge3N0cmluZ3xCdWZmZXJ9IGNvbnRlbnQgRmlsZSBjb250ZW50cy5cbiAqL1xuU3RhbmRhcmRPdXRwdXQucHJvdG90eXBlLnNldENvbnRlbnQgPSBmdW5jdGlvbihjb250ZW50KSB7XG4gIGlmIChwcm9jZXNzLnN0ZG91dC5pc1RUWSkge1xuICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKGNvbnRlbnQpO1xuICB9XG59O1xuXG5leHBvcnRzLlN0YW5kYXJkT3V0cHV0ID0gU3RhbmRhcmRPdXRwdXQ7XG5cbi8qKlxuICogU3RhbmRhcmQgZXJyb3IuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gU3RhbmRhcmRFcnJvcigpIHtcbiAgRmlsZS5jYWxsKHRoaXMpO1xuICB0aGlzLnNldE1vZGUoNDM4KTsgLy8gMDY2NlxufVxudXRpbC5pbmhlcml0cyhTdGFuZGFyZEVycm9yLCBGaWxlKTtcblxuLyoqXG4gKiBXcml0ZSB0aGUgY29udGVudHMgdG8gc3RkZXJyLlxuICogQHBhcmFtIHtzdHJpbmd8QnVmZmVyfSBjb250ZW50IEZpbGUgY29udGVudHMuXG4gKi9cblN0YW5kYXJkRXJyb3IucHJvdG90eXBlLnNldENvbnRlbnQgPSBmdW5jdGlvbihjb250ZW50KSB7XG4gIGlmIChwcm9jZXNzLnN0ZGVyci5pc1RUWSkge1xuICAgIHByb2Nlc3Muc3RkZXJyLndyaXRlKGNvbnRlbnQpO1xuICB9XG59O1xuXG5leHBvcnRzLlN0YW5kYXJkRXJyb3IgPSBTdGFuZGFyZEVycm9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/file.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/filesystem.js":
/*!************************************************!*\
  !*** ./node_modules/mock-fs/lib/filesystem.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nconst os = __webpack_require__(/*! os */ \"os\");\nconst path = __webpack_require__(/*! path */ \"path\");\n\nconst Directory = __webpack_require__(/*! ./directory */ \"(ssr)/./node_modules/mock-fs/lib/directory.js\");\nconst File = __webpack_require__(/*! ./file */ \"(ssr)/./node_modules/mock-fs/lib/file.js\");\nconst FSError = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mock-fs/lib/error.js\");\nconst SymbolicLink = __webpack_require__(/*! ./symlink */ \"(ssr)/./node_modules/mock-fs/lib/symlink.js\");\n\nconst isWindows = process.platform === 'win32';\n\nfunction toNamespacedPath(filePath) {\n  return path.toNamespacedPath\n    ? path.toNamespacedPath(filePath)\n    : path._makeLong(filePath);\n}\n\nfunction getPathParts(filepath) {\n  const parts = toNamespacedPath(path.resolve(filepath)).split(path.sep);\n  parts.shift();\n  if (isWindows) {\n    // parts currently looks like ['', '?', 'c:', ...]\n    parts.shift();\n    const q = parts.shift(); // should be '?'\n    const base = '\\\\\\\\' + q + '\\\\' + parts.shift().toLowerCase();\n    parts.unshift(base);\n  }\n  if (parts[parts.length - 1] === '') {\n    parts.pop();\n  }\n  return parts;\n}\n\n/**\n * Create a new file system.\n * @param {Object} options Any filesystem options.\n * @param {boolean} options.createCwd Create a directory for `process.cwd()`\n *     (defaults to `true`).\n * @param {boolean} options.createTmp Create a directory for `os.tmpdir()`\n *     (defaults to `true`).\n * @constructor\n */\nfunction FileSystem(options) {\n  options = options || {};\n\n  const createCwd = 'createCwd' in options ? options.createCwd : true;\n  const createTmp = 'createTmp' in options ? options.createTmp : true;\n\n  const root = new Directory();\n\n  // populate with default directories\n  const defaults = [];\n  if (createCwd) {\n    defaults.push(process.cwd());\n  }\n\n  if (createTmp) {\n    defaults.push((os.tmpdir && os.tmpdir()) || os.tmpDir());\n  }\n\n  defaults.forEach(function(dir) {\n    const parts = getPathParts(dir);\n    let directory = root;\n    for (let i = 0, ii = parts.length; i < ii; ++i) {\n      const name = parts[i];\n      const candidate = directory.getItem(name);\n      if (!candidate) {\n        directory = directory.addItem(name, new Directory());\n      } else if (candidate instanceof Directory) {\n        directory = candidate;\n      } else {\n        throw new Error('Failed to create directory: ' + dir);\n      }\n    }\n  });\n\n  /**\n   * Root directory.\n   * @type {Directory}\n   */\n  this._root = root;\n}\n\n/**\n * Get the root directory.\n * @return {Directory} The root directory.\n */\nFileSystem.prototype.getRoot = function() {\n  return this._root;\n};\n\n/**\n * Get a file system item.\n * @param {string} filepath Path to item.\n * @return {Item} The item (or null if not found).\n */\nFileSystem.prototype.getItem = function(filepath) {\n  const parts = getPathParts(filepath);\n  const currentParts = getPathParts(process.cwd());\n  let item = this._root;\n  let itemPath = '/';\n  for (let i = 0, ii = parts.length; i < ii; ++i) {\n    const name = parts[i];\n    while (item instanceof SymbolicLink) {\n      // Symbolic link being traversed as a directory --- If link targets\n      // another symbolic link, resolve target's path relative to the original\n      // link's target, otherwise relative to the current item.\n      itemPath = path.resolve(path.dirname(itemPath), item.getPath());\n      item = this.getItem(itemPath);\n    }\n    if (item) {\n      if (item instanceof Directory && name !== currentParts[i]) {\n        // make sure traversal is allowed\n        // This fails for Windows directories which do not have execute permission, by default. It may be a good idea\n        // to change this logic to windows-friendly. See notes in mock.createDirectoryInfoFromPaths()\n        if (!item.canExecute()) {\n          throw new FSError('EACCES', filepath);\n        }\n      }\n      if (item instanceof File) {\n        throw new FSError('ENOTDIR', filepath);\n      }\n      item = item.getItem(name);\n    }\n    if (!item) {\n      break;\n    }\n    itemPath = path.resolve(itemPath, name);\n  }\n  return item;\n};\n\n/**\n * Populate a directory with an item.\n * @param {Directory} directory The directory to populate.\n * @param {string} name The name of the item.\n * @param {string|Buffer|function|Object} obj Instructions for creating the\n *     item.\n */\nfunction populate(directory, name, obj) {\n  let item;\n  if (typeof obj === 'string' || Buffer.isBuffer(obj)) {\n    // contents for a file\n    item = new File();\n    item.setContent(obj);\n  } else if (typeof obj === 'function') {\n    // item factory\n    item = obj();\n  } else if (typeof obj === 'object') {\n    // directory with more to populate\n    item = new Directory();\n    for (const key in obj) {\n      populate(item, key, obj[key]);\n    }\n  } else {\n    throw new Error('Unsupported type: ' + typeof obj + ' of item ' + name);\n  }\n\n  /**\n   * Special exception for redundant adding of empty directories.\n   */\n  if (\n    item instanceof Directory &&\n    item.list().length === 0 &&\n    directory.getItem(name) instanceof Directory\n  ) {\n    // pass\n  } else {\n    directory.addItem(name, item);\n  }\n}\n\n/**\n * Configure a mock file system.\n * @param {Object} paths Config object.\n * @param {Object} options Any filesystem options.\n * @param {boolean} options.createCwd Create a directory for `process.cwd()`\n *     (defaults to `true`).\n * @param {boolean} options.createTmp Create a directory for `os.tmpdir()`\n *     (defaults to `true`).\n * @return {FileSystem} Mock file system.\n */\nFileSystem.create = function(paths, options) {\n  const system = new FileSystem(options);\n\n  for (const filepath in paths) {\n    const parts = getPathParts(filepath);\n    let directory = system._root;\n    for (let i = 0, ii = parts.length - 1; i < ii; ++i) {\n      const name = parts[i];\n      const candidate = directory.getItem(name);\n      if (!candidate) {\n        directory = directory.addItem(name, new Directory());\n      } else if (candidate instanceof Directory) {\n        directory = candidate;\n      } else {\n        throw new Error('Failed to create directory: ' + filepath);\n      }\n    }\n    populate(directory, parts[parts.length - 1], paths[filepath]);\n  }\n\n  return system;\n};\n\n/**\n * Generate a factory for new files.\n * @param {Object} config File config.\n * @return {function():File} Factory that creates a new file.\n */\nFileSystem.file = function(config) {\n  config = config || {};\n  return function() {\n    const file = new File();\n    if (config.hasOwnProperty('content')) {\n      file.setContent(config.content);\n    }\n    if (config.hasOwnProperty('mode')) {\n      file.setMode(config.mode);\n    } else {\n      file.setMode(438); // 0666\n    }\n    if (config.hasOwnProperty('uid')) {\n      file.setUid(config.uid);\n    }\n    if (config.hasOwnProperty('gid')) {\n      file.setGid(config.gid);\n    }\n    if (config.hasOwnProperty('atime')) {\n      file.setATime(config.atime);\n    }\n    if (config.hasOwnProperty('ctime')) {\n      file.setCTime(config.ctime);\n    }\n    if (config.hasOwnProperty('mtime')) {\n      file.setMTime(config.mtime);\n    }\n    if (config.hasOwnProperty('birthtime')) {\n      file.setBirthtime(config.birthtime);\n    }\n    return file;\n  };\n};\n\n/**\n * Generate a factory for new symbolic links.\n * @param {Object} config File config.\n * @return {function():File} Factory that creates a new symbolic link.\n */\nFileSystem.symlink = function(config) {\n  config = config || {};\n  return function() {\n    const link = new SymbolicLink();\n    if (config.hasOwnProperty('mode')) {\n      link.setMode(config.mode);\n    } else {\n      link.setMode(438); // 0666\n    }\n    if (config.hasOwnProperty('uid')) {\n      link.setUid(config.uid);\n    }\n    if (config.hasOwnProperty('gid')) {\n      link.setGid(config.gid);\n    }\n    if (config.hasOwnProperty('path')) {\n      link.setPath(config.path);\n    } else {\n      throw new Error('Missing \"path\" property');\n    }\n    if (config.hasOwnProperty('atime')) {\n      link.setATime(config.atime);\n    }\n    if (config.hasOwnProperty('ctime')) {\n      link.setCTime(config.ctime);\n    }\n    if (config.hasOwnProperty('mtime')) {\n      link.setMTime(config.mtime);\n    }\n    if (config.hasOwnProperty('birthtime')) {\n      link.setBirthtime(config.birthtime);\n    }\n    return link;\n  };\n};\n\n/**\n * Generate a factory for new directories.\n * @param {Object} config File config.\n * @return {function():Directory} Factory that creates a new directory.\n */\nFileSystem.directory = function(config) {\n  config = config || {};\n  return function() {\n    const dir = new Directory();\n    if (config.hasOwnProperty('mode')) {\n      dir.setMode(config.mode);\n    }\n    if (config.hasOwnProperty('uid')) {\n      dir.setUid(config.uid);\n    }\n    if (config.hasOwnProperty('gid')) {\n      dir.setGid(config.gid);\n    }\n    if (config.hasOwnProperty('items')) {\n      for (const name in config.items) {\n        populate(dir, name, config.items[name]);\n      }\n    }\n    if (config.hasOwnProperty('atime')) {\n      dir.setATime(config.atime);\n    }\n    if (config.hasOwnProperty('ctime')) {\n      dir.setCTime(config.ctime);\n    }\n    if (config.hasOwnProperty('mtime')) {\n      dir.setMTime(config.mtime);\n    }\n    if (config.hasOwnProperty('birthtime')) {\n      dir.setBirthtime(config.birthtime);\n    }\n    return dir;\n  };\n};\n\n/**\n * Module exports.\n * @type {function}\n */\nexports = module.exports = FileSystem;\nexports.getPathParts = getPathParts;\nexports.toNamespacedPath = toNamespacedPath;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/filesystem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/index.js":
/*!*******************************************!*\
  !*** ./node_modules/mock-fs/lib/index.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nconst Binding = __webpack_require__(/*! ./binding */ \"(ssr)/./node_modules/mock-fs/lib/binding.js\");\nconst FSError = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mock-fs/lib/error.js\");\nconst FileSystem = __webpack_require__(/*! ./filesystem */ \"(ssr)/./node_modules/mock-fs/lib/filesystem.js\");\nconst realBinding = process.binding('fs');\nconst path = __webpack_require__(/*! path */ \"path\");\nconst loader = __webpack_require__(/*! ./loader */ \"(ssr)/./node_modules/mock-fs/lib/loader.js\");\nconst bypass = __webpack_require__(/*! ./bypass */ \"(ssr)/./node_modules/mock-fs/lib/bypass.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\n\nconst toNamespacedPath = FileSystem.toNamespacedPath;\n\nconst realProcessProps = {\n  cwd: process.cwd,\n  chdir: process.chdir\n};\nconst realCreateWriteStream = fs.createWriteStream;\nconst realStats = realBinding.Stats;\nconst realStatWatcher = realBinding.StatWatcher;\n\n/**\n * Pre-patch fs binding.\n * This allows mock-fs to work properly under nodejs v10+ readFile\n * As ReadFileContext nodejs v10+ implementation traps original binding methods:\n * const { FSReqWrap, close, read } = process.binding('fs');\n * Note this patch only solves issue for readFile, as the require of\n * ReadFileContext is delayed by readFile implementation.\n * if (!ReadFileContext) ReadFileContext = require('internal/fs/read_file_context')\n *\n * @param {string} key Property name.\n */\nfunction patch(key) {\n  const existingMethod = realBinding[key];\n  realBinding[key] = function() {\n    if (this._mockedBinding) {\n      return this._mockedBinding[key].apply(this._mockedBinding, arguments);\n    } else {\n      return existingMethod.apply(this, arguments);\n    }\n  }.bind(realBinding);\n}\n\nfor (const key in Binding.prototype) {\n  if (typeof realBinding[key] === 'function') {\n    // Stats and StatWatcher are constructors\n    if (key !== 'Stats' && key !== 'StatWatcher') {\n      patch(key);\n    }\n  }\n}\n\nfunction overrideBinding(binding) {\n  realBinding._mockedBinding = binding;\n}\n\nfunction overrideProcess(cwd, chdir) {\n  process.cwd = cwd;\n  process.chdir = chdir;\n}\n\n/**\n * Have to disable write stream _writev on nodejs v10+.\n *\n * nodejs v8 lib/fs.js\n * note binding.writeBuffers will use mock-fs patched writeBuffers.\n *\n *   const binding = process.binding('fs');\n *   function writev(fd, chunks, position, callback) {\n *     // ...\n *     binding.writeBuffers(fd, chunks, position, req);\n *   }\n *\n * nodejs v10+ lib/internal/fs/streams.js\n * note it uses original writeBuffers, bypassed mock-fs patched writeBuffers.\n *\n *  const {writeBuffers} = internalBinding('fs');\n *  function writev(fd, chunks, position, callback) {\n *    // ...\n *    writeBuffers(fd, chunks, position, req);\n *  }\n *\n * Luckily _writev is an optional method on Writeable stream implementation.\n * When _writev is missing, it will fall back to make multiple _write calls.\n */\nfunction overrideCreateWriteStream() {\n  fs.createWriteStream = function(path, options) {\n    const output = realCreateWriteStream(path, options);\n    // disable _writev, this will over shadow WriteStream.prototype._writev\n    if (realBinding._mockedBinding) {\n      output._writev = undefined;\n    }\n    return output;\n  };\n}\n\nfunction restoreBinding() {\n  delete realBinding._mockedBinding;\n  realBinding.Stats = realStats;\n  realBinding.StatWatcher = realStatWatcher;\n}\n\nfunction restoreProcess() {\n  for (const key in realProcessProps) {\n    process[key] = realProcessProps[key];\n  }\n}\n\nfunction restoreCreateWriteStream() {\n  fs.createWriteStream = realCreateWriteStream;\n}\n\n/**\n * Swap out the fs bindings for a mock file system.\n * @param {Object} config Mock file system configuration.\n * @param {Object} options Any filesystem options.\n * @param {boolean} options.createCwd Create a directory for `process.cwd()`\n *     (defaults to `true`).\n * @param {boolean} options.createTmp Create a directory for `os.tmpdir()`\n *     (defaults to `true`).\n */\nexports = module.exports = function mock(config, options) {\n  const system = FileSystem.create(config, options);\n  const binding = new Binding(system);\n\n  overrideBinding(binding);\n\n  let currentPath = process.cwd();\n  overrideProcess(\n    function cwd() {\n      if (realBinding._mockedBinding) {\n        return currentPath;\n      }\n      return realProcessProps.cwd();\n    },\n    function chdir(directory) {\n      if (realBinding._mockedBinding) {\n        if (!binding.stat(toNamespacedPath(directory)).isDirectory()) {\n          throw new FSError('ENOTDIR');\n        }\n        currentPath = path.resolve(currentPath, directory);\n      } else {\n        return realProcessProps.chdir(directory);\n      }\n    }\n  );\n\n  overrideCreateWriteStream();\n};\n\n/**\n * Get hold of the mocked filesystem's 'root'\n * If fs hasn't currently been replaced, this will return an empty object\n */\nexports.getMockRoot = function() {\n  if (realBinding._mockedBinding) {\n    return realBinding._mockedBinding.getSystem().getRoot();\n  } else {\n    return {};\n  }\n};\n\n/**\n * Restore the fs bindings for the real file system.\n */\nexports.restore = function() {\n  restoreBinding();\n  restoreProcess();\n  restoreCreateWriteStream();\n};\n\n/**\n * Create a file factory.\n */\nexports.file = FileSystem.file;\n\n/**\n * Create a directory factory.\n */\nexports.directory = FileSystem.directory;\n\n/**\n * Create a symbolic link factory.\n */\nexports.symlink = FileSystem.symlink;\n\n/**\n * Automatically maps specified paths (for use with `mock()`)\n */\nexports.load = loader.load;\n\n/**\n * Perform action, bypassing mock FS\n * @example\n * // This file exists on the real FS, not on the mocked FS\n * const filePath = '/path/file.json';\n * const data = mock.bypass(() => fs.readFileSync(filePath, 'utf-8'));\n */\nexports.bypass = bypass;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/item.js":
/*!******************************************!*\
  !*** ./node_modules/mock-fs/lib/item.js ***!
  \******************************************/
/***/ ((module, exports) => {

"use strict";
eval("\n\nlet counter = 0;\n\n/**\n * Permissions.\n * @enum {number}\n */\nconst permissions = {\n  USER_READ: 256, // 0400\n  USER_WRITE: 128, // 0200\n  USER_EXEC: 64, // 0100\n  GROUP_READ: 32, // 0040\n  GROUP_WRITE: 16, // 0020\n  GROUP_EXEC: 8, // 0010\n  OTHER_READ: 4, // 0004\n  OTHER_WRITE: 2, // 0002\n  OTHER_EXEC: 1 // 0001\n};\n\nfunction getUid() {\n  // force NaN on windows.\n  return process.getuid ? process.getuid() : NaN;\n}\n\nfunction getGid() {\n  // force NaN on windows.\n  return process.getgid ? process.getgid() : NaN;\n}\n\n/**\n * A filesystem item.\n * @constructor\n */\nfunction Item() {\n  const now = Date.now();\n\n  /**\n   * Access time.\n   * @type {Date}\n   */\n  this._atime = new Date(now);\n\n  /**\n   * Change time.\n   * @type {Date}\n   */\n  this._ctime = new Date(now);\n\n  /**\n   * Birth time.\n   * @type {Date}\n   */\n  this._birthtime = new Date(now);\n\n  /**\n   * Modification time.\n   * @type {Date}\n   */\n  this._mtime = new Date(now);\n\n  /**\n   * Permissions.\n   */\n  this._mode = 438; // 0666\n\n  /**\n   * User id.\n   * @type {number}\n   */\n  this._uid = getUid();\n\n  /**\n   * Group id.\n   * @type {number}\n   */\n  this._gid = getGid();\n\n  /**\n   * Item number.\n   * @type {number}\n   */\n  this._id = ++counter;\n\n  /**\n   * Number of links to this item.\n   */\n  this.links = 0;\n}\n\n/**\n * Add execute if read allowed\n * See notes in index.js -> mapping#addDir\n */\nItem.fixWin32Permissions = mode =>\n  process.platform !== 'win32'\n    ? mode\n    : mode |\n      (mode & permissions.USER_READ && permissions.USER_EXEC) |\n      (mode & permissions.GROUP_READ && permissions.GROUP_EXEC) |\n      (mode & permissions.OTHER_READ && permissions.OTHER_EXEC);\n\n/**\n * Determine if the current user has read permission.\n * @return {boolean} The current user can read.\n */\nItem.prototype.canRead = function() {\n  const uid = getUid();\n  const gid = getGid();\n  let can = false;\n  if (uid === 0) {\n    can = true;\n  } else if (uid === this._uid || uid !== uid) {\n    // (uid !== uid) means uid is NaN, only for windows\n    can = (permissions.USER_READ & this._mode) === permissions.USER_READ;\n  } else if (gid === this._gid) {\n    can = (permissions.GROUP_READ & this._mode) === permissions.GROUP_READ;\n  } else {\n    can = (permissions.OTHER_READ & this._mode) === permissions.OTHER_READ;\n  }\n  return can;\n};\n\n/**\n * Determine if the current user has write permission.\n * @return {boolean} The current user can write.\n */\nItem.prototype.canWrite = function() {\n  const uid = getUid();\n  const gid = getGid();\n  let can = false;\n  if (uid === 0) {\n    can = true;\n  } else if (uid === this._uid || uid !== uid) {\n    // (uid !== uid) means uid is NaN, only for windows\n    can = (permissions.USER_WRITE & this._mode) === permissions.USER_WRITE;\n  } else if (gid === this._gid) {\n    can = (permissions.GROUP_WRITE & this._mode) === permissions.GROUP_WRITE;\n  } else {\n    can = (permissions.OTHER_WRITE & this._mode) === permissions.OTHER_WRITE;\n  }\n  return can;\n};\n\n/**\n * Determine if the current user has execute permission.\n * @return {boolean} The current user can execute.\n */\nItem.prototype.canExecute = function() {\n  const uid = getUid();\n  const gid = getGid();\n  let can = false;\n  if (uid === 0) {\n    can = true;\n  } else if (uid === this._uid || isNaN(uid)) {\n    // NaN occurs on windows\n    can = (permissions.USER_EXEC & this._mode) === permissions.USER_EXEC;\n  } else if (gid === this._gid) {\n    can = (permissions.GROUP_EXEC & this._mode) === permissions.GROUP_EXEC;\n  } else {\n    can = (permissions.OTHER_EXEC & this._mode) === permissions.OTHER_EXEC;\n  }\n  return can;\n};\n\n/**\n * Get access time.\n * @return {Date} Access time.\n */\nItem.prototype.getATime = function() {\n  return this._atime;\n};\n\n/**\n * Set access time.\n * @param {Date} atime Access time.\n */\nItem.prototype.setATime = function(atime) {\n  this._atime = atime;\n};\n\n/**\n * Get change time.\n * @return {Date} Change time.\n */\nItem.prototype.getCTime = function() {\n  return this._ctime;\n};\n\n/**\n * Set change time.\n * @param {Date} ctime Change time.\n */\nItem.prototype.setCTime = function(ctime) {\n  this._ctime = ctime;\n};\n\n/**\n * Get birth time.\n * @return {Date} Birth time.\n */\nItem.prototype.getBirthtime = function() {\n  return this._birthtime;\n};\n\n/**\n * Set change time.\n * @param {Date} birthtime Birth time.\n */\nItem.prototype.setBirthtime = function(birthtime) {\n  this._birthtime = birthtime;\n};\n\n/**\n * Get modification time.\n * @return {Date} Modification time.\n */\nItem.prototype.getMTime = function() {\n  return this._mtime;\n};\n\n/**\n * Set modification time.\n * @param {Date} mtime Modification time.\n */\nItem.prototype.setMTime = function(mtime) {\n  this._mtime = mtime;\n};\n\n/**\n * Get mode (permission only, e.g 0666).\n * @return {number} Mode.\n */\nItem.prototype.getMode = function() {\n  return this._mode;\n};\n\n/**\n * Set mode (permission only, e.g 0666).\n * @param {Date} mode Mode.\n */\nItem.prototype.setMode = function(mode) {\n  this.setCTime(new Date());\n  this._mode = mode;\n};\n\n/**\n * Get user id.\n * @return {number} User id.\n */\nItem.prototype.getUid = function() {\n  return this._uid;\n};\n\n/**\n * Set user id.\n * @param {number} uid User id.\n */\nItem.prototype.setUid = function(uid) {\n  this.setCTime(new Date());\n  this._uid = uid;\n};\n\n/**\n * Get group id.\n * @return {number} Group id.\n */\nItem.prototype.getGid = function() {\n  return this._gid;\n};\n\n/**\n * Set group id.\n * @param {number} gid Group id.\n */\nItem.prototype.setGid = function(gid) {\n  this.setCTime(new Date());\n  this._gid = gid;\n};\n\n/**\n * Get item stats.\n * @return {Object} Stats properties.\n */\nItem.prototype.getStats = function() {\n  return {\n    dev: 8675309,\n    nlink: this.links,\n    uid: this.getUid(),\n    gid: this.getGid(),\n    rdev: 0,\n    blksize: 4096,\n    ino: this._id,\n    atime: this.getATime(),\n    mtime: this.getMTime(),\n    ctime: this.getCTime(),\n    birthtime: this.getBirthtime(),\n    atimeMs: +this.getATime(),\n    mtimeMs: +this.getMTime(),\n    ctimeMs: +this.getCTime(),\n    birthtimeMs: +this.getBirthtime()\n  };\n};\n\n/**\n * Get the item's string representation.\n * @return {string} String representation.\n */\nItem.prototype.toString = function() {\n  return '[' + this.constructor.name + ']';\n};\n\n/**\n * Export the constructor.\n * @type {function()}\n */\nexports = module.exports = Item;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvaXRlbS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjs7QUFFcEI7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLFNBQVM7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLE1BQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxNQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksTUFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLE1BQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcG9ydGtleS9uZXh0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvaXRlbS5qcz8yYTJjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubGV0IGNvdW50ZXIgPSAwO1xuXG4vKipcbiAqIFBlcm1pc3Npb25zLlxuICogQGVudW0ge251bWJlcn1cbiAqL1xuY29uc3QgcGVybWlzc2lvbnMgPSB7XG4gIFVTRVJfUkVBRDogMjU2LCAvLyAwNDAwXG4gIFVTRVJfV1JJVEU6IDEyOCwgLy8gMDIwMFxuICBVU0VSX0VYRUM6IDY0LCAvLyAwMTAwXG4gIEdST1VQX1JFQUQ6IDMyLCAvLyAwMDQwXG4gIEdST1VQX1dSSVRFOiAxNiwgLy8gMDAyMFxuICBHUk9VUF9FWEVDOiA4LCAvLyAwMDEwXG4gIE9USEVSX1JFQUQ6IDQsIC8vIDAwMDRcbiAgT1RIRVJfV1JJVEU6IDIsIC8vIDAwMDJcbiAgT1RIRVJfRVhFQzogMSAvLyAwMDAxXG59O1xuXG5mdW5jdGlvbiBnZXRVaWQoKSB7XG4gIC8vIGZvcmNlIE5hTiBvbiB3aW5kb3dzLlxuICByZXR1cm4gcHJvY2Vzcy5nZXR1aWQgPyBwcm9jZXNzLmdldHVpZCgpIDogTmFOO1xufVxuXG5mdW5jdGlvbiBnZXRHaWQoKSB7XG4gIC8vIGZvcmNlIE5hTiBvbiB3aW5kb3dzLlxuICByZXR1cm4gcHJvY2Vzcy5nZXRnaWQgPyBwcm9jZXNzLmdldGdpZCgpIDogTmFOO1xufVxuXG4vKipcbiAqIEEgZmlsZXN5c3RlbSBpdGVtLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEl0ZW0oKSB7XG4gIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cbiAgLyoqXG4gICAqIEFjY2VzcyB0aW1lLlxuICAgKiBAdHlwZSB7RGF0ZX1cbiAgICovXG4gIHRoaXMuX2F0aW1lID0gbmV3IERhdGUobm93KTtcblxuICAvKipcbiAgICogQ2hhbmdlIHRpbWUuXG4gICAqIEB0eXBlIHtEYXRlfVxuICAgKi9cbiAgdGhpcy5fY3RpbWUgPSBuZXcgRGF0ZShub3cpO1xuXG4gIC8qKlxuICAgKiBCaXJ0aCB0aW1lLlxuICAgKiBAdHlwZSB7RGF0ZX1cbiAgICovXG4gIHRoaXMuX2JpcnRodGltZSA9IG5ldyBEYXRlKG5vdyk7XG5cbiAgLyoqXG4gICAqIE1vZGlmaWNhdGlvbiB0aW1lLlxuICAgKiBAdHlwZSB7RGF0ZX1cbiAgICovXG4gIHRoaXMuX210aW1lID0gbmV3IERhdGUobm93KTtcblxuICAvKipcbiAgICogUGVybWlzc2lvbnMuXG4gICAqL1xuICB0aGlzLl9tb2RlID0gNDM4OyAvLyAwNjY2XG5cbiAgLyoqXG4gICAqIFVzZXIgaWQuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLl91aWQgPSBnZXRVaWQoKTtcblxuICAvKipcbiAgICogR3JvdXAgaWQuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLl9naWQgPSBnZXRHaWQoKTtcblxuICAvKipcbiAgICogSXRlbSBudW1iZXIuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLl9pZCA9ICsrY291bnRlcjtcblxuICAvKipcbiAgICogTnVtYmVyIG9mIGxpbmtzIHRvIHRoaXMgaXRlbS5cbiAgICovXG4gIHRoaXMubGlua3MgPSAwO1xufVxuXG4vKipcbiAqIEFkZCBleGVjdXRlIGlmIHJlYWQgYWxsb3dlZFxuICogU2VlIG5vdGVzIGluIGluZGV4LmpzIC0+IG1hcHBpbmcjYWRkRGlyXG4gKi9cbkl0ZW0uZml4V2luMzJQZXJtaXNzaW9ucyA9IG1vZGUgPT5cbiAgcHJvY2Vzcy5wbGF0Zm9ybSAhPT0gJ3dpbjMyJ1xuICAgID8gbW9kZVxuICAgIDogbW9kZSB8XG4gICAgICAobW9kZSAmIHBlcm1pc3Npb25zLlVTRVJfUkVBRCAmJiBwZXJtaXNzaW9ucy5VU0VSX0VYRUMpIHxcbiAgICAgIChtb2RlICYgcGVybWlzc2lvbnMuR1JPVVBfUkVBRCAmJiBwZXJtaXNzaW9ucy5HUk9VUF9FWEVDKSB8XG4gICAgICAobW9kZSAmIHBlcm1pc3Npb25zLk9USEVSX1JFQUQgJiYgcGVybWlzc2lvbnMuT1RIRVJfRVhFQyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHRoZSBjdXJyZW50IHVzZXIgaGFzIHJlYWQgcGVybWlzc2lvbi5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRoZSBjdXJyZW50IHVzZXIgY2FuIHJlYWQuXG4gKi9cbkl0ZW0ucHJvdG90eXBlLmNhblJlYWQgPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgdWlkID0gZ2V0VWlkKCk7XG4gIGNvbnN0IGdpZCA9IGdldEdpZCgpO1xuICBsZXQgY2FuID0gZmFsc2U7XG4gIGlmICh1aWQgPT09IDApIHtcbiAgICBjYW4gPSB0cnVlO1xuICB9IGVsc2UgaWYgKHVpZCA9PT0gdGhpcy5fdWlkIHx8IHVpZCAhPT0gdWlkKSB7XG4gICAgLy8gKHVpZCAhPT0gdWlkKSBtZWFucyB1aWQgaXMgTmFOLCBvbmx5IGZvciB3aW5kb3dzXG4gICAgY2FuID0gKHBlcm1pc3Npb25zLlVTRVJfUkVBRCAmIHRoaXMuX21vZGUpID09PSBwZXJtaXNzaW9ucy5VU0VSX1JFQUQ7XG4gIH0gZWxzZSBpZiAoZ2lkID09PSB0aGlzLl9naWQpIHtcbiAgICBjYW4gPSAocGVybWlzc2lvbnMuR1JPVVBfUkVBRCAmIHRoaXMuX21vZGUpID09PSBwZXJtaXNzaW9ucy5HUk9VUF9SRUFEO1xuICB9IGVsc2Uge1xuICAgIGNhbiA9IChwZXJtaXNzaW9ucy5PVEhFUl9SRUFEICYgdGhpcy5fbW9kZSkgPT09IHBlcm1pc3Npb25zLk9USEVSX1JFQUQ7XG4gIH1cbiAgcmV0dXJuIGNhbjtcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHRoZSBjdXJyZW50IHVzZXIgaGFzIHdyaXRlIHBlcm1pc3Npb24uXG4gKiBAcmV0dXJuIHtib29sZWFufSBUaGUgY3VycmVudCB1c2VyIGNhbiB3cml0ZS5cbiAqL1xuSXRlbS5wcm90b3R5cGUuY2FuV3JpdGUgPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgdWlkID0gZ2V0VWlkKCk7XG4gIGNvbnN0IGdpZCA9IGdldEdpZCgpO1xuICBsZXQgY2FuID0gZmFsc2U7XG4gIGlmICh1aWQgPT09IDApIHtcbiAgICBjYW4gPSB0cnVlO1xuICB9IGVsc2UgaWYgKHVpZCA9PT0gdGhpcy5fdWlkIHx8IHVpZCAhPT0gdWlkKSB7XG4gICAgLy8gKHVpZCAhPT0gdWlkKSBtZWFucyB1aWQgaXMgTmFOLCBvbmx5IGZvciB3aW5kb3dzXG4gICAgY2FuID0gKHBlcm1pc3Npb25zLlVTRVJfV1JJVEUgJiB0aGlzLl9tb2RlKSA9PT0gcGVybWlzc2lvbnMuVVNFUl9XUklURTtcbiAgfSBlbHNlIGlmIChnaWQgPT09IHRoaXMuX2dpZCkge1xuICAgIGNhbiA9IChwZXJtaXNzaW9ucy5HUk9VUF9XUklURSAmIHRoaXMuX21vZGUpID09PSBwZXJtaXNzaW9ucy5HUk9VUF9XUklURTtcbiAgfSBlbHNlIHtcbiAgICBjYW4gPSAocGVybWlzc2lvbnMuT1RIRVJfV1JJVEUgJiB0aGlzLl9tb2RlKSA9PT0gcGVybWlzc2lvbnMuT1RIRVJfV1JJVEU7XG4gIH1cbiAgcmV0dXJuIGNhbjtcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHRoZSBjdXJyZW50IHVzZXIgaGFzIGV4ZWN1dGUgcGVybWlzc2lvbi5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRoZSBjdXJyZW50IHVzZXIgY2FuIGV4ZWN1dGUuXG4gKi9cbkl0ZW0ucHJvdG90eXBlLmNhbkV4ZWN1dGUgPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgdWlkID0gZ2V0VWlkKCk7XG4gIGNvbnN0IGdpZCA9IGdldEdpZCgpO1xuICBsZXQgY2FuID0gZmFsc2U7XG4gIGlmICh1aWQgPT09IDApIHtcbiAgICBjYW4gPSB0cnVlO1xuICB9IGVsc2UgaWYgKHVpZCA9PT0gdGhpcy5fdWlkIHx8IGlzTmFOKHVpZCkpIHtcbiAgICAvLyBOYU4gb2NjdXJzIG9uIHdpbmRvd3NcbiAgICBjYW4gPSAocGVybWlzc2lvbnMuVVNFUl9FWEVDICYgdGhpcy5fbW9kZSkgPT09IHBlcm1pc3Npb25zLlVTRVJfRVhFQztcbiAgfSBlbHNlIGlmIChnaWQgPT09IHRoaXMuX2dpZCkge1xuICAgIGNhbiA9IChwZXJtaXNzaW9ucy5HUk9VUF9FWEVDICYgdGhpcy5fbW9kZSkgPT09IHBlcm1pc3Npb25zLkdST1VQX0VYRUM7XG4gIH0gZWxzZSB7XG4gICAgY2FuID0gKHBlcm1pc3Npb25zLk9USEVSX0VYRUMgJiB0aGlzLl9tb2RlKSA9PT0gcGVybWlzc2lvbnMuT1RIRVJfRVhFQztcbiAgfVxuICByZXR1cm4gY2FuO1xufTtcblxuLyoqXG4gKiBHZXQgYWNjZXNzIHRpbWUuXG4gKiBAcmV0dXJuIHtEYXRlfSBBY2Nlc3MgdGltZS5cbiAqL1xuSXRlbS5wcm90b3R5cGUuZ2V0QVRpbWUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2F0aW1lO1xufTtcblxuLyoqXG4gKiBTZXQgYWNjZXNzIHRpbWUuXG4gKiBAcGFyYW0ge0RhdGV9IGF0aW1lIEFjY2VzcyB0aW1lLlxuICovXG5JdGVtLnByb3RvdHlwZS5zZXRBVGltZSA9IGZ1bmN0aW9uKGF0aW1lKSB7XG4gIHRoaXMuX2F0aW1lID0gYXRpbWU7XG59O1xuXG4vKipcbiAqIEdldCBjaGFuZ2UgdGltZS5cbiAqIEByZXR1cm4ge0RhdGV9IENoYW5nZSB0aW1lLlxuICovXG5JdGVtLnByb3RvdHlwZS5nZXRDVGltZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fY3RpbWU7XG59O1xuXG4vKipcbiAqIFNldCBjaGFuZ2UgdGltZS5cbiAqIEBwYXJhbSB7RGF0ZX0gY3RpbWUgQ2hhbmdlIHRpbWUuXG4gKi9cbkl0ZW0ucHJvdG90eXBlLnNldENUaW1lID0gZnVuY3Rpb24oY3RpbWUpIHtcbiAgdGhpcy5fY3RpbWUgPSBjdGltZTtcbn07XG5cbi8qKlxuICogR2V0IGJpcnRoIHRpbWUuXG4gKiBAcmV0dXJuIHtEYXRlfSBCaXJ0aCB0aW1lLlxuICovXG5JdGVtLnByb3RvdHlwZS5nZXRCaXJ0aHRpbWUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2JpcnRodGltZTtcbn07XG5cbi8qKlxuICogU2V0IGNoYW5nZSB0aW1lLlxuICogQHBhcmFtIHtEYXRlfSBiaXJ0aHRpbWUgQmlydGggdGltZS5cbiAqL1xuSXRlbS5wcm90b3R5cGUuc2V0QmlydGh0aW1lID0gZnVuY3Rpb24oYmlydGh0aW1lKSB7XG4gIHRoaXMuX2JpcnRodGltZSA9IGJpcnRodGltZTtcbn07XG5cbi8qKlxuICogR2V0IG1vZGlmaWNhdGlvbiB0aW1lLlxuICogQHJldHVybiB7RGF0ZX0gTW9kaWZpY2F0aW9uIHRpbWUuXG4gKi9cbkl0ZW0ucHJvdG90eXBlLmdldE1UaW1lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9tdGltZTtcbn07XG5cbi8qKlxuICogU2V0IG1vZGlmaWNhdGlvbiB0aW1lLlxuICogQHBhcmFtIHtEYXRlfSBtdGltZSBNb2RpZmljYXRpb24gdGltZS5cbiAqL1xuSXRlbS5wcm90b3R5cGUuc2V0TVRpbWUgPSBmdW5jdGlvbihtdGltZSkge1xuICB0aGlzLl9tdGltZSA9IG10aW1lO1xufTtcblxuLyoqXG4gKiBHZXQgbW9kZSAocGVybWlzc2lvbiBvbmx5LCBlLmcgMDY2NikuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IE1vZGUuXG4gKi9cbkl0ZW0ucHJvdG90eXBlLmdldE1vZGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX21vZGU7XG59O1xuXG4vKipcbiAqIFNldCBtb2RlIChwZXJtaXNzaW9uIG9ubHksIGUuZyAwNjY2KS5cbiAqIEBwYXJhbSB7RGF0ZX0gbW9kZSBNb2RlLlxuICovXG5JdGVtLnByb3RvdHlwZS5zZXRNb2RlID0gZnVuY3Rpb24obW9kZSkge1xuICB0aGlzLnNldENUaW1lKG5ldyBEYXRlKCkpO1xuICB0aGlzLl9tb2RlID0gbW9kZTtcbn07XG5cbi8qKlxuICogR2V0IHVzZXIgaWQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFVzZXIgaWQuXG4gKi9cbkl0ZW0ucHJvdG90eXBlLmdldFVpZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fdWlkO1xufTtcblxuLyoqXG4gKiBTZXQgdXNlciBpZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB1aWQgVXNlciBpZC5cbiAqL1xuSXRlbS5wcm90b3R5cGUuc2V0VWlkID0gZnVuY3Rpb24odWlkKSB7XG4gIHRoaXMuc2V0Q1RpbWUobmV3IERhdGUoKSk7XG4gIHRoaXMuX3VpZCA9IHVpZDtcbn07XG5cbi8qKlxuICogR2V0IGdyb3VwIGlkLlxuICogQHJldHVybiB7bnVtYmVyfSBHcm91cCBpZC5cbiAqL1xuSXRlbS5wcm90b3R5cGUuZ2V0R2lkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9naWQ7XG59O1xuXG4vKipcbiAqIFNldCBncm91cCBpZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBnaWQgR3JvdXAgaWQuXG4gKi9cbkl0ZW0ucHJvdG90eXBlLnNldEdpZCA9IGZ1bmN0aW9uKGdpZCkge1xuICB0aGlzLnNldENUaW1lKG5ldyBEYXRlKCkpO1xuICB0aGlzLl9naWQgPSBnaWQ7XG59O1xuXG4vKipcbiAqIEdldCBpdGVtIHN0YXRzLlxuICogQHJldHVybiB7T2JqZWN0fSBTdGF0cyBwcm9wZXJ0aWVzLlxuICovXG5JdGVtLnByb3RvdHlwZS5nZXRTdGF0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIGRldjogODY3NTMwOSxcbiAgICBubGluazogdGhpcy5saW5rcyxcbiAgICB1aWQ6IHRoaXMuZ2V0VWlkKCksXG4gICAgZ2lkOiB0aGlzLmdldEdpZCgpLFxuICAgIHJkZXY6IDAsXG4gICAgYmxrc2l6ZTogNDA5NixcbiAgICBpbm86IHRoaXMuX2lkLFxuICAgIGF0aW1lOiB0aGlzLmdldEFUaW1lKCksXG4gICAgbXRpbWU6IHRoaXMuZ2V0TVRpbWUoKSxcbiAgICBjdGltZTogdGhpcy5nZXRDVGltZSgpLFxuICAgIGJpcnRodGltZTogdGhpcy5nZXRCaXJ0aHRpbWUoKSxcbiAgICBhdGltZU1zOiArdGhpcy5nZXRBVGltZSgpLFxuICAgIG10aW1lTXM6ICt0aGlzLmdldE1UaW1lKCksXG4gICAgY3RpbWVNczogK3RoaXMuZ2V0Q1RpbWUoKSxcbiAgICBiaXJ0aHRpbWVNczogK3RoaXMuZ2V0QmlydGh0aW1lKClcbiAgfTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBpdGVtJ3Mgc3RyaW5nIHJlcHJlc2VudGF0aW9uLlxuICogQHJldHVybiB7c3RyaW5nfSBTdHJpbmcgcmVwcmVzZW50YXRpb24uXG4gKi9cbkl0ZW0ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnWycgKyB0aGlzLmNvbnN0cnVjdG9yLm5hbWUgKyAnXSc7XG59O1xuXG4vKipcbiAqIEV4cG9ydCB0aGUgY29uc3RydWN0b3IuXG4gKiBAdHlwZSB7ZnVuY3Rpb24oKX1cbiAqL1xuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gSXRlbTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/item.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/loader.js":
/*!********************************************!*\
  !*** ./node_modules/mock-fs/lib/loader.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const {fixWin32Permissions} = __webpack_require__(/*! ./item */ \"(ssr)/./node_modules/mock-fs/lib/item.js\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst FileSystem = __webpack_require__(/*! ./filesystem */ \"(ssr)/./node_modules/mock-fs/lib/filesystem.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst bypass = __webpack_require__(/*! ./bypass */ \"(ssr)/./node_modules/mock-fs/lib/bypass.js\");\n\nconst createContext = ({output, options = {}, target}, newContext) =>\n  Object.assign(\n    {\n      // Assign options and set defaults if needed\n      options: {\n        recursive: options.recursive !== false,\n        lazy: options.lazy !== false\n      },\n      output,\n      target\n    },\n    newContext\n  );\n\nfunction addFile(context, stats, isRoot) {\n  const {output, target} = context;\n  const {lazy} = context.options;\n\n  if (!stats.isFile()) {\n    throw new Error(`${target} is not a valid file!`);\n  }\n\n  const outputPropKey = isRoot ? target : path.basename(target);\n\n  output[outputPropKey] = () => {\n    const content = !lazy ? fs.readFileSync(target) : '';\n    const file = FileSystem.file(Object.assign({}, stats, {content}))();\n\n    if (lazy) {\n      Object.defineProperty(file, '_content', {\n        get() {\n          const res = bypass(() => fs.readFileSync(target));\n          Object.defineProperty(file, '_content', {\n            value: res,\n            writable: true\n          });\n          return res;\n        },\n        set(data) {\n          Object.defineProperty(file, '_content', {\n            value: data,\n            writable: true\n          });\n        },\n        configurable: true\n      });\n    }\n\n    return file;\n  };\n\n  return output[outputPropKey];\n}\n\nfunction addDir(context, stats, isRoot) {\n  const {target, output} = context;\n  const {recursive} = context.options;\n\n  if (!stats.isDirectory()) {\n    throw new Error(`${target} is not a valid directory!`);\n  }\n\n  stats = Object.assign({}, stats);\n  const outputPropKey = isRoot ? target : path.basename(target);\n\n  // On windows platforms, directories do not have the executable flag, which causes FileSystem.prototype.getItem\n  // to think that the directory cannot be traversed. This is a workaround, however, a better solution may be to\n  // re-think the logic in FileSystem.prototype.getItem\n  // This workaround adds executable privileges if read privileges are found\n  stats.mode = fixWin32Permissions(stats.mode);\n\n  // Create directory factory\n  const directoryItems = {};\n  output[outputPropKey] = FileSystem.directory(\n    Object.assign(stats, {items: directoryItems})\n  );\n\n  fs.readdirSync(target).forEach(p => {\n    const absPath = path.join(target, p);\n    const stats = fs.statSync(absPath);\n    const newContext = createContext(context, {\n      target: absPath,\n      output: directoryItems\n    });\n\n    if (recursive && stats.isDirectory()) {\n      addDir(newContext, stats);\n    } else if (stats.isFile()) {\n      addFile(newContext, stats);\n    }\n  });\n\n  return output[outputPropKey];\n}\n\n/**\n * Load directory or file from real FS\n */\nexports.load = function(p, options) {\n  return bypass(() => {\n    p = path.resolve(p);\n\n    const stats = fs.statSync(p);\n    const context = createContext({output: {}, options, target: p});\n\n    if (stats.isDirectory()) {\n      return addDir(context, stats, true);\n    } else if (stats.isFile()) {\n      return addFile(context, stats, true);\n    }\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvbG9hZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLE9BQU8scUJBQXFCLEVBQUUsbUJBQU8sQ0FBQyx3REFBUTtBQUM5QyxhQUFhLG1CQUFPLENBQUMsa0JBQU07QUFDM0IsbUJBQW1CLG1CQUFPLENBQUMsb0VBQWM7QUFDekMsV0FBVyxtQkFBTyxDQUFDLGNBQUk7QUFDdkIsZUFBZSxtQkFBTyxDQUFDLDREQUFVOztBQUVqQyx3QkFBd0Isb0JBQW9CLFNBQVM7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLFNBQVMsZ0JBQWdCO0FBQ3pCLFNBQVMsTUFBTTs7QUFFZjtBQUNBLHVCQUF1QixRQUFRO0FBQy9COztBQUVBOztBQUVBO0FBQ0E7QUFDQSxpREFBaUQsVUFBVSxRQUFROztBQUVuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsU0FBUyxnQkFBZ0I7QUFDekIsU0FBUyxXQUFXOztBQUVwQjtBQUNBLHVCQUF1QixRQUFRO0FBQy9COztBQUVBLDBCQUEwQjtBQUMxQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixzQkFBc0I7QUFDaEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQSxtQ0FBbUMsVUFBVSxxQkFBcUI7O0FBRWxFO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL0Bwb3J0a2V5L25leHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9tb2NrLWZzL2xpYi9sb2FkZXIuanM/NzZjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7Zml4V2luMzJQZXJtaXNzaW9uc30gPSByZXF1aXJlKCcuL2l0ZW0nKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBGaWxlU3lzdGVtID0gcmVxdWlyZSgnLi9maWxlc3lzdGVtJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBieXBhc3MgPSByZXF1aXJlKCcuL2J5cGFzcycpO1xuXG5jb25zdCBjcmVhdGVDb250ZXh0ID0gKHtvdXRwdXQsIG9wdGlvbnMgPSB7fSwgdGFyZ2V0fSwgbmV3Q29udGV4dCkgPT5cbiAgT2JqZWN0LmFzc2lnbihcbiAgICB7XG4gICAgICAvLyBBc3NpZ24gb3B0aW9ucyBhbmQgc2V0IGRlZmF1bHRzIGlmIG5lZWRlZFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICByZWN1cnNpdmU6IG9wdGlvbnMucmVjdXJzaXZlICE9PSBmYWxzZSxcbiAgICAgICAgbGF6eTogb3B0aW9ucy5sYXp5ICE9PSBmYWxzZVxuICAgICAgfSxcbiAgICAgIG91dHB1dCxcbiAgICAgIHRhcmdldFxuICAgIH0sXG4gICAgbmV3Q29udGV4dFxuICApO1xuXG5mdW5jdGlvbiBhZGRGaWxlKGNvbnRleHQsIHN0YXRzLCBpc1Jvb3QpIHtcbiAgY29uc3Qge291dHB1dCwgdGFyZ2V0fSA9IGNvbnRleHQ7XG4gIGNvbnN0IHtsYXp5fSA9IGNvbnRleHQub3B0aW9ucztcblxuICBpZiAoIXN0YXRzLmlzRmlsZSgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGAke3RhcmdldH0gaXMgbm90IGEgdmFsaWQgZmlsZSFgKTtcbiAgfVxuXG4gIGNvbnN0IG91dHB1dFByb3BLZXkgPSBpc1Jvb3QgPyB0YXJnZXQgOiBwYXRoLmJhc2VuYW1lKHRhcmdldCk7XG5cbiAgb3V0cHV0W291dHB1dFByb3BLZXldID0gKCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnQgPSAhbGF6eSA/IGZzLnJlYWRGaWxlU3luYyh0YXJnZXQpIDogJyc7XG4gICAgY29uc3QgZmlsZSA9IEZpbGVTeXN0ZW0uZmlsZShPYmplY3QuYXNzaWduKHt9LCBzdGF0cywge2NvbnRlbnR9KSkoKTtcblxuICAgIGlmIChsYXp5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZmlsZSwgJ19jb250ZW50Jywge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgY29uc3QgcmVzID0gYnlwYXNzKCgpID0+IGZzLnJlYWRGaWxlU3luYyh0YXJnZXQpKTtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZmlsZSwgJ19jb250ZW50Jywge1xuICAgICAgICAgICAgdmFsdWU6IHJlcyxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KGRhdGEpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZmlsZSwgJ19jb250ZW50Jywge1xuICAgICAgICAgICAgdmFsdWU6IGRhdGEsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBmaWxlO1xuICB9O1xuXG4gIHJldHVybiBvdXRwdXRbb3V0cHV0UHJvcEtleV07XG59XG5cbmZ1bmN0aW9uIGFkZERpcihjb250ZXh0LCBzdGF0cywgaXNSb290KSB7XG4gIGNvbnN0IHt0YXJnZXQsIG91dHB1dH0gPSBjb250ZXh0O1xuICBjb25zdCB7cmVjdXJzaXZlfSA9IGNvbnRleHQub3B0aW9ucztcblxuICBpZiAoIXN0YXRzLmlzRGlyZWN0b3J5KCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGFyZ2V0fSBpcyBub3QgYSB2YWxpZCBkaXJlY3RvcnkhYCk7XG4gIH1cblxuICBzdGF0cyA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRzKTtcbiAgY29uc3Qgb3V0cHV0UHJvcEtleSA9IGlzUm9vdCA/IHRhcmdldCA6IHBhdGguYmFzZW5hbWUodGFyZ2V0KTtcblxuICAvLyBPbiB3aW5kb3dzIHBsYXRmb3JtcywgZGlyZWN0b3JpZXMgZG8gbm90IGhhdmUgdGhlIGV4ZWN1dGFibGUgZmxhZywgd2hpY2ggY2F1c2VzIEZpbGVTeXN0ZW0ucHJvdG90eXBlLmdldEl0ZW1cbiAgLy8gdG8gdGhpbmsgdGhhdCB0aGUgZGlyZWN0b3J5IGNhbm5vdCBiZSB0cmF2ZXJzZWQuIFRoaXMgaXMgYSB3b3JrYXJvdW5kLCBob3dldmVyLCBhIGJldHRlciBzb2x1dGlvbiBtYXkgYmUgdG9cbiAgLy8gcmUtdGhpbmsgdGhlIGxvZ2ljIGluIEZpbGVTeXN0ZW0ucHJvdG90eXBlLmdldEl0ZW1cbiAgLy8gVGhpcyB3b3JrYXJvdW5kIGFkZHMgZXhlY3V0YWJsZSBwcml2aWxlZ2VzIGlmIHJlYWQgcHJpdmlsZWdlcyBhcmUgZm91bmRcbiAgc3RhdHMubW9kZSA9IGZpeFdpbjMyUGVybWlzc2lvbnMoc3RhdHMubW9kZSk7XG5cbiAgLy8gQ3JlYXRlIGRpcmVjdG9yeSBmYWN0b3J5XG4gIGNvbnN0IGRpcmVjdG9yeUl0ZW1zID0ge307XG4gIG91dHB1dFtvdXRwdXRQcm9wS2V5XSA9IEZpbGVTeXN0ZW0uZGlyZWN0b3J5KFxuICAgIE9iamVjdC5hc3NpZ24oc3RhdHMsIHtpdGVtczogZGlyZWN0b3J5SXRlbXN9KVxuICApO1xuXG4gIGZzLnJlYWRkaXJTeW5jKHRhcmdldCkuZm9yRWFjaChwID0+IHtcbiAgICBjb25zdCBhYnNQYXRoID0gcGF0aC5qb2luKHRhcmdldCwgcCk7XG4gICAgY29uc3Qgc3RhdHMgPSBmcy5zdGF0U3luYyhhYnNQYXRoKTtcbiAgICBjb25zdCBuZXdDb250ZXh0ID0gY3JlYXRlQ29udGV4dChjb250ZXh0LCB7XG4gICAgICB0YXJnZXQ6IGFic1BhdGgsXG4gICAgICBvdXRwdXQ6IGRpcmVjdG9yeUl0ZW1zXG4gICAgfSk7XG5cbiAgICBpZiAocmVjdXJzaXZlICYmIHN0YXRzLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgIGFkZERpcihuZXdDb250ZXh0LCBzdGF0cyk7XG4gICAgfSBlbHNlIGlmIChzdGF0cy5pc0ZpbGUoKSkge1xuICAgICAgYWRkRmlsZShuZXdDb250ZXh0LCBzdGF0cyk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gb3V0cHV0W291dHB1dFByb3BLZXldO1xufVxuXG4vKipcbiAqIExvYWQgZGlyZWN0b3J5IG9yIGZpbGUgZnJvbSByZWFsIEZTXG4gKi9cbmV4cG9ydHMubG9hZCA9IGZ1bmN0aW9uKHAsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGJ5cGFzcygoKSA9PiB7XG4gICAgcCA9IHBhdGgucmVzb2x2ZShwKTtcblxuICAgIGNvbnN0IHN0YXRzID0gZnMuc3RhdFN5bmMocCk7XG4gICAgY29uc3QgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoe291dHB1dDoge30sIG9wdGlvbnMsIHRhcmdldDogcH0pO1xuXG4gICAgaWYgKHN0YXRzLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgIHJldHVybiBhZGREaXIoY29udGV4dCwgc3RhdHMsIHRydWUpO1xuICAgIH0gZWxzZSBpZiAoc3RhdHMuaXNGaWxlKCkpIHtcbiAgICAgIHJldHVybiBhZGRGaWxlKGNvbnRleHQsIHN0YXRzLCB0cnVlKTtcbiAgICB9XG4gIH0pO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/loader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/symlink.js":
/*!*********************************************!*\
  !*** ./node_modules/mock-fs/lib/symlink.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nconst util = __webpack_require__(/*! util */ \"util\");\n\nconst Item = __webpack_require__(/*! ./item */ \"(ssr)/./node_modules/mock-fs/lib/item.js\");\n\nconst constants = __webpack_require__(/*! constants */ \"constants\");\n\n/**\n * A directory.\n * @constructor\n */\nfunction SymbolicLink() {\n  Item.call(this);\n\n  /**\n   * Relative path to source.\n   * @type {string}\n   */\n  this._path = undefined;\n}\nutil.inherits(SymbolicLink, Item);\n\n/**\n * Set the path to the source.\n * @param {string} pathname Path to source.\n */\nSymbolicLink.prototype.setPath = function(pathname) {\n  this._path = pathname;\n};\n\n/**\n * Get the path to the source.\n * @return {string} Path to source.\n */\nSymbolicLink.prototype.getPath = function() {\n  return this._path;\n};\n\n/**\n * Get symbolic link stats.\n * @return {Object} Stats properties.\n */\nSymbolicLink.prototype.getStats = function() {\n  const size = this._path.length;\n  const stats = Item.prototype.getStats.call(this);\n  stats.mode = this.getMode() | constants.S_IFLNK;\n  stats.size = size;\n  stats.blocks = Math.ceil(size / 512);\n  return stats;\n};\n\n/**\n * Export the constructor.\n * @type {function()}\n */\nexports = module.exports = SymbolicLink;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvc3ltbGluay5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixhQUFhLG1CQUFPLENBQUMsa0JBQU07O0FBRTNCLGFBQWEsbUJBQU8sQ0FBQyx3REFBUTs7QUFFN0Isa0JBQWtCLG1CQUFPLENBQUMsNEJBQVc7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcG9ydGtleS9uZXh0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvc3ltbGluay5qcz9lNWIzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuY29uc3QgSXRlbSA9IHJlcXVpcmUoJy4vaXRlbScpO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCdjb25zdGFudHMnKTtcblxuLyoqXG4gKiBBIGRpcmVjdG9yeS5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTeW1ib2xpY0xpbmsoKSB7XG4gIEl0ZW0uY2FsbCh0aGlzKTtcblxuICAvKipcbiAgICogUmVsYXRpdmUgcGF0aCB0byBzb3VyY2UuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLl9wYXRoID0gdW5kZWZpbmVkO1xufVxudXRpbC5pbmhlcml0cyhTeW1ib2xpY0xpbmssIEl0ZW0pO1xuXG4vKipcbiAqIFNldCB0aGUgcGF0aCB0byB0aGUgc291cmNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhuYW1lIFBhdGggdG8gc291cmNlLlxuICovXG5TeW1ib2xpY0xpbmsucHJvdG90eXBlLnNldFBhdGggPSBmdW5jdGlvbihwYXRobmFtZSkge1xuICB0aGlzLl9wYXRoID0gcGF0aG5hbWU7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgcGF0aCB0byB0aGUgc291cmNlLlxuICogQHJldHVybiB7c3RyaW5nfSBQYXRoIHRvIHNvdXJjZS5cbiAqL1xuU3ltYm9saWNMaW5rLnByb3RvdHlwZS5nZXRQYXRoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9wYXRoO1xufTtcblxuLyoqXG4gKiBHZXQgc3ltYm9saWMgbGluayBzdGF0cy5cbiAqIEByZXR1cm4ge09iamVjdH0gU3RhdHMgcHJvcGVydGllcy5cbiAqL1xuU3ltYm9saWNMaW5rLnByb3RvdHlwZS5nZXRTdGF0cyA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCBzaXplID0gdGhpcy5fcGF0aC5sZW5ndGg7XG4gIGNvbnN0IHN0YXRzID0gSXRlbS5wcm90b3R5cGUuZ2V0U3RhdHMuY2FsbCh0aGlzKTtcbiAgc3RhdHMubW9kZSA9IHRoaXMuZ2V0TW9kZSgpIHwgY29uc3RhbnRzLlNfSUZMTks7XG4gIHN0YXRzLnNpemUgPSBzaXplO1xuICBzdGF0cy5ibG9ja3MgPSBNYXRoLmNlaWwoc2l6ZSAvIDUxMik7XG4gIHJldHVybiBzdGF0cztcbn07XG5cbi8qKlxuICogRXhwb3J0IHRoZSBjb25zdHJ1Y3Rvci5cbiAqIEB0eXBlIHtmdW5jdGlvbigpfVxuICovXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBTeW1ib2xpY0xpbms7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/symlink.js\n");

/***/ })

};
;