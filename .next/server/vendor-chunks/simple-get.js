/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/simple-get";
exports.ids = ["vendor-chunks/simple-get"];
exports.modules = {

/***/ "(ssr)/./node_modules/simple-get/index.js":
/*!******************************************!*\
  !*** ./node_modules/simple-get/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = simpleGet\n\nvar concat = __webpack_require__(/*! simple-concat */ \"(ssr)/./node_modules/simple-concat/index.js\")\nvar http = __webpack_require__(/*! http */ \"http\")\nvar https = __webpack_require__(/*! https */ \"https\")\nvar once = __webpack_require__(/*! once */ \"(ssr)/./node_modules/once/once.js\")\nvar querystring = __webpack_require__(/*! querystring */ \"querystring\")\nvar decompressResponse = __webpack_require__(/*! decompress-response */ \"(ssr)/./node_modules/simple-get/node_modules/decompress-response/index.js\") // excluded from browser build\nvar url = __webpack_require__(/*! url */ \"url\")\n\nfunction simpleGet (opts, cb) {\n  opts = typeof opts === 'string' ? {url: opts} : Object.assign({}, opts)\n  cb = once(cb)\n\n  opts.headers = Object.assign({}, opts.headers)\n\n  Object.keys(opts.headers).forEach(function (h) {\n    if (h.toLowerCase() !== h) {\n      opts.headers[h.toLowerCase()] = opts.headers[h]\n      delete opts.headers[h]\n    }\n  })\n\n  if (opts.url) {\n    var loc = url.parse(opts.url)\n    if (loc.hostname) opts.hostname = loc.hostname\n    if (loc.port) opts.port = loc.port\n    if (loc.protocol) opts.protocol = loc.protocol\n    if (loc.auth) opts.auth = loc.auth\n    opts.path = loc.path\n    delete opts.url\n  }\n\n  if (opts.maxRedirects == null) opts.maxRedirects = 10\n  if (opts.method) opts.method = opts.method.toUpperCase()\n\n  var body\n  if (opts.body) {\n    body = opts.json && !isStream(opts.body) ? JSON.stringify(opts.body) : opts.body\n  } else if (opts.form) {\n    body = typeof opts.form === 'string' ? opts.form : querystring.stringify(opts.form)\n    opts.headers['content-type'] = 'application/x-www-form-urlencoded'\n  }\n  delete opts.body; delete opts.form\n\n  if (body) {\n    if (!opts.method) opts.method = 'POST'\n    if (!isStream(body)) opts.headers['content-length'] = Buffer.byteLength(body)\n    if (opts.json) opts.headers['content-type'] = 'application/json'\n  }\n\n  if (opts.json) opts.headers.accept = 'application/json'\n  if (!opts.headers['accept-encoding']) opts.headers['accept-encoding'] = 'gzip, deflate' // Prefer gzip\n\n  var originalHost = opts.hostname // hostname before potential redirect\n  var protocol = opts.protocol === 'https:' ? https : http // Support http/https urls\n  var req = protocol.request(opts, function (res) {\n    if (res.statusCode >= 300 && res.statusCode < 400 && 'location' in res.headers) {\n      opts.url = res.headers.location // Follow 3xx redirects\n      delete opts.headers.host // Discard `host` header on redirect (see #32)\n      res.resume() // Discard response\n\n      var redirectHost = url.parse(opts.url).hostname // eslint-disable-line node/no-deprecated-api\n      // If redirected host is different than original host, drop headers to prevent cookie leak (#73)\n      if (redirectHost !== null && redirectHost !== originalHost) {\n        delete opts.headers.cookie\n        delete opts.headers.authorization\n      }\n\n      if ((res.statusCode === 301 || res.statusCode === 302) && opts.method === 'POST') {\n        opts.method = 'GET' // On 301/302 redirect, change POST to GET (see #35)\n        delete opts.headers['content-length']\n        delete opts.headers['content-type']\n      }\n\n      if (opts.maxRedirects === 0) return cb(new Error('too many redirects'))\n      opts.maxRedirects -= 1\n      return simpleGet(opts, cb)\n    }\n\n    var tryUnzip = typeof decompressResponse === 'function' && opts.method !== 'HEAD'\n    cb(null, tryUnzip ? decompressResponse(res) : res)\n  })\n  req.on('timeout', function () {\n    req.abort()\n    cb(new Error('Request timed out'))\n  })\n  req.on('error', cb)\n\n  if (body && isStream(body)) body.on('error', cb).pipe(req)\n  else req.end(body)\n\n  return req\n}\n\nsimpleGet.concat = function (opts, cb) {\n  return simpleGet(opts, function (err, res) {\n    if (err) return cb(err)\n    concat(res, function (err, data) {\n      if (err) return cb(err)\n      if (opts.json) {\n        try {\n          data = JSON.parse(data.toString())\n        } catch (err) {\n          return cb(err, res, data)\n        }\n      }\n      cb(null, res, data)\n    })\n  })\n}\n\n;['get', 'post', 'put', 'patch', 'head', 'delete'].forEach(function (method) {\n  simpleGet[method] = function (opts, cb) {\n    if (typeof opts === 'string') opts = {url: opts}\n    opts.method = method.toUpperCase()\n    return simpleGet(opts, cb)\n  }\n})\n\nfunction isStream (obj) { return typeof obj.pipe === 'function' }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdldC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsa0VBQWU7QUFDcEMsV0FBVyxtQkFBTyxDQUFDLGtCQUFNO0FBQ3pCLFlBQVksbUJBQU8sQ0FBQyxvQkFBTztBQUMzQixXQUFXLG1CQUFPLENBQUMsK0NBQU07QUFDekIsa0JBQWtCLG1CQUFPLENBQUMsZ0NBQWE7QUFDdkMseUJBQXlCLG1CQUFPLENBQUMsc0dBQXFCO0FBQ3RELFVBQVUsbUJBQU8sQ0FBQyxnQkFBSzs7QUFFdkI7QUFDQSxxQ0FBcUMsV0FBVyxrQkFBa0I7QUFDbEU7O0FBRUEsaUNBQWlDOztBQUVqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0Esb0JBQW9COztBQUVwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLENBQUM7QUFDRDtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELDBCQUEwQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bwb3J0a2V5L25leHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2V0L2luZGV4LmpzPzkxZDMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBzaW1wbGVHZXRcblxudmFyIGNvbmNhdCA9IHJlcXVpcmUoJ3NpbXBsZS1jb25jYXQnKVxudmFyIGh0dHAgPSByZXF1aXJlKCdodHRwJylcbnZhciBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJylcbnZhciBvbmNlID0gcmVxdWlyZSgnb25jZScpXG52YXIgcXVlcnlzdHJpbmcgPSByZXF1aXJlKCdxdWVyeXN0cmluZycpXG52YXIgZGVjb21wcmVzc1Jlc3BvbnNlID0gcmVxdWlyZSgnZGVjb21wcmVzcy1yZXNwb25zZScpIC8vIGV4Y2x1ZGVkIGZyb20gYnJvd3NlciBidWlsZFxudmFyIHVybCA9IHJlcXVpcmUoJ3VybCcpXG5cbmZ1bmN0aW9uIHNpbXBsZUdldCAob3B0cywgY2IpIHtcbiAgb3B0cyA9IHR5cGVvZiBvcHRzID09PSAnc3RyaW5nJyA/IHt1cmw6IG9wdHN9IDogT2JqZWN0LmFzc2lnbih7fSwgb3B0cylcbiAgY2IgPSBvbmNlKGNiKVxuXG4gIG9wdHMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdHMuaGVhZGVycylcblxuICBPYmplY3Qua2V5cyhvcHRzLmhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24gKGgpIHtcbiAgICBpZiAoaC50b0xvd2VyQ2FzZSgpICE9PSBoKSB7XG4gICAgICBvcHRzLmhlYWRlcnNbaC50b0xvd2VyQ2FzZSgpXSA9IG9wdHMuaGVhZGVyc1toXVxuICAgICAgZGVsZXRlIG9wdHMuaGVhZGVyc1toXVxuICAgIH1cbiAgfSlcblxuICBpZiAob3B0cy51cmwpIHtcbiAgICB2YXIgbG9jID0gdXJsLnBhcnNlKG9wdHMudXJsKVxuICAgIGlmIChsb2MuaG9zdG5hbWUpIG9wdHMuaG9zdG5hbWUgPSBsb2MuaG9zdG5hbWVcbiAgICBpZiAobG9jLnBvcnQpIG9wdHMucG9ydCA9IGxvYy5wb3J0XG4gICAgaWYgKGxvYy5wcm90b2NvbCkgb3B0cy5wcm90b2NvbCA9IGxvYy5wcm90b2NvbFxuICAgIGlmIChsb2MuYXV0aCkgb3B0cy5hdXRoID0gbG9jLmF1dGhcbiAgICBvcHRzLnBhdGggPSBsb2MucGF0aFxuICAgIGRlbGV0ZSBvcHRzLnVybFxuICB9XG5cbiAgaWYgKG9wdHMubWF4UmVkaXJlY3RzID09IG51bGwpIG9wdHMubWF4UmVkaXJlY3RzID0gMTBcbiAgaWYgKG9wdHMubWV0aG9kKSBvcHRzLm1ldGhvZCA9IG9wdHMubWV0aG9kLnRvVXBwZXJDYXNlKClcblxuICB2YXIgYm9keVxuICBpZiAob3B0cy5ib2R5KSB7XG4gICAgYm9keSA9IG9wdHMuanNvbiAmJiAhaXNTdHJlYW0ob3B0cy5ib2R5KSA/IEpTT04uc3RyaW5naWZ5KG9wdHMuYm9keSkgOiBvcHRzLmJvZHlcbiAgfSBlbHNlIGlmIChvcHRzLmZvcm0pIHtcbiAgICBib2R5ID0gdHlwZW9mIG9wdHMuZm9ybSA9PT0gJ3N0cmluZycgPyBvcHRzLmZvcm0gOiBxdWVyeXN0cmluZy5zdHJpbmdpZnkob3B0cy5mb3JtKVxuICAgIG9wdHMuaGVhZGVyc1snY29udGVudC10eXBlJ10gPSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xuICB9XG4gIGRlbGV0ZSBvcHRzLmJvZHk7IGRlbGV0ZSBvcHRzLmZvcm1cblxuICBpZiAoYm9keSkge1xuICAgIGlmICghb3B0cy5tZXRob2QpIG9wdHMubWV0aG9kID0gJ1BPU1QnXG4gICAgaWYgKCFpc1N0cmVhbShib2R5KSkgb3B0cy5oZWFkZXJzWydjb250ZW50LWxlbmd0aCddID0gQnVmZmVyLmJ5dGVMZW5ndGgoYm9keSlcbiAgICBpZiAob3B0cy5qc29uKSBvcHRzLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nXG4gIH1cblxuICBpZiAob3B0cy5qc29uKSBvcHRzLmhlYWRlcnMuYWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nXG4gIGlmICghb3B0cy5oZWFkZXJzWydhY2NlcHQtZW5jb2RpbmcnXSkgb3B0cy5oZWFkZXJzWydhY2NlcHQtZW5jb2RpbmcnXSA9ICdnemlwLCBkZWZsYXRlJyAvLyBQcmVmZXIgZ3ppcFxuXG4gIHZhciBvcmlnaW5hbEhvc3QgPSBvcHRzLmhvc3RuYW1lIC8vIGhvc3RuYW1lIGJlZm9yZSBwb3RlbnRpYWwgcmVkaXJlY3RcbiAgdmFyIHByb3RvY29sID0gb3B0cy5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyBodHRwcyA6IGh0dHAgLy8gU3VwcG9ydCBodHRwL2h0dHBzIHVybHNcbiAgdmFyIHJlcSA9IHByb3RvY29sLnJlcXVlc3Qob3B0cywgZnVuY3Rpb24gKHJlcykge1xuICAgIGlmIChyZXMuc3RhdHVzQ29kZSA+PSAzMDAgJiYgcmVzLnN0YXR1c0NvZGUgPCA0MDAgJiYgJ2xvY2F0aW9uJyBpbiByZXMuaGVhZGVycykge1xuICAgICAgb3B0cy51cmwgPSByZXMuaGVhZGVycy5sb2NhdGlvbiAvLyBGb2xsb3cgM3h4IHJlZGlyZWN0c1xuICAgICAgZGVsZXRlIG9wdHMuaGVhZGVycy5ob3N0IC8vIERpc2NhcmQgYGhvc3RgIGhlYWRlciBvbiByZWRpcmVjdCAoc2VlICMzMilcbiAgICAgIHJlcy5yZXN1bWUoKSAvLyBEaXNjYXJkIHJlc3BvbnNlXG5cbiAgICAgIHZhciByZWRpcmVjdEhvc3QgPSB1cmwucGFyc2Uob3B0cy51cmwpLmhvc3RuYW1lIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm9kZS9uby1kZXByZWNhdGVkLWFwaVxuICAgICAgLy8gSWYgcmVkaXJlY3RlZCBob3N0IGlzIGRpZmZlcmVudCB0aGFuIG9yaWdpbmFsIGhvc3QsIGRyb3AgaGVhZGVycyB0byBwcmV2ZW50IGNvb2tpZSBsZWFrICgjNzMpXG4gICAgICBpZiAocmVkaXJlY3RIb3N0ICE9PSBudWxsICYmIHJlZGlyZWN0SG9zdCAhPT0gb3JpZ2luYWxIb3N0KSB7XG4gICAgICAgIGRlbGV0ZSBvcHRzLmhlYWRlcnMuY29va2llXG4gICAgICAgIGRlbGV0ZSBvcHRzLmhlYWRlcnMuYXV0aG9yaXphdGlvblxuICAgICAgfVxuXG4gICAgICBpZiAoKHJlcy5zdGF0dXNDb2RlID09PSAzMDEgfHwgcmVzLnN0YXR1c0NvZGUgPT09IDMwMikgJiYgb3B0cy5tZXRob2QgPT09ICdQT1NUJykge1xuICAgICAgICBvcHRzLm1ldGhvZCA9ICdHRVQnIC8vIE9uIDMwMS8zMDIgcmVkaXJlY3QsIGNoYW5nZSBQT1NUIHRvIEdFVCAoc2VlICMzNSlcbiAgICAgICAgZGVsZXRlIG9wdHMuaGVhZGVyc1snY29udGVudC1sZW5ndGgnXVxuICAgICAgICBkZWxldGUgb3B0cy5oZWFkZXJzWydjb250ZW50LXR5cGUnXVxuICAgICAgfVxuXG4gICAgICBpZiAob3B0cy5tYXhSZWRpcmVjdHMgPT09IDApIHJldHVybiBjYihuZXcgRXJyb3IoJ3RvbyBtYW55IHJlZGlyZWN0cycpKVxuICAgICAgb3B0cy5tYXhSZWRpcmVjdHMgLT0gMVxuICAgICAgcmV0dXJuIHNpbXBsZUdldChvcHRzLCBjYilcbiAgICB9XG5cbiAgICB2YXIgdHJ5VW56aXAgPSB0eXBlb2YgZGVjb21wcmVzc1Jlc3BvbnNlID09PSAnZnVuY3Rpb24nICYmIG9wdHMubWV0aG9kICE9PSAnSEVBRCdcbiAgICBjYihudWxsLCB0cnlVbnppcCA/IGRlY29tcHJlc3NSZXNwb25zZShyZXMpIDogcmVzKVxuICB9KVxuICByZXEub24oJ3RpbWVvdXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgcmVxLmFib3J0KClcbiAgICBjYihuZXcgRXJyb3IoJ1JlcXVlc3QgdGltZWQgb3V0JykpXG4gIH0pXG4gIHJlcS5vbignZXJyb3InLCBjYilcblxuICBpZiAoYm9keSAmJiBpc1N0cmVhbShib2R5KSkgYm9keS5vbignZXJyb3InLCBjYikucGlwZShyZXEpXG4gIGVsc2UgcmVxLmVuZChib2R5KVxuXG4gIHJldHVybiByZXFcbn1cblxuc2ltcGxlR2V0LmNvbmNhdCA9IGZ1bmN0aW9uIChvcHRzLCBjYikge1xuICByZXR1cm4gc2ltcGxlR2V0KG9wdHMsIGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpXG4gICAgY29uY2F0KHJlcywgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgICAgaWYgKGVycikgcmV0dXJuIGNiKGVycilcbiAgICAgIGlmIChvcHRzLmpzb24pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhLnRvU3RyaW5nKCkpXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHJldHVybiBjYihlcnIsIHJlcywgZGF0YSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2IobnVsbCwgcmVzLCBkYXRhKVxuICAgIH0pXG4gIH0pXG59XG5cbjtbJ2dldCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdoZWFkJywgJ2RlbGV0ZSddLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICBzaW1wbGVHZXRbbWV0aG9kXSA9IGZ1bmN0aW9uIChvcHRzLCBjYikge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ3N0cmluZycpIG9wdHMgPSB7dXJsOiBvcHRzfVxuICAgIG9wdHMubWV0aG9kID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgICByZXR1cm4gc2ltcGxlR2V0KG9wdHMsIGNiKVxuICB9XG59KVxuXG5mdW5jdGlvbiBpc1N0cmVhbSAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqLnBpcGUgPT09ICdmdW5jdGlvbicgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/simple-get/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/simple-get/node_modules/decompress-response/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/simple-get/node_modules/decompress-response/index.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst mimicResponse = __webpack_require__(/*! mimic-response */ \"(ssr)/./node_modules/mimic-response/index.js\");\n\nmodule.exports = response => {\n\t// TODO: Use Array#includes when targeting Node.js 6\n\tif (['gzip', 'deflate'].indexOf(response.headers['content-encoding']) === -1) {\n\t\treturn response;\n\t}\n\n\tconst unzip = zlib.createUnzip();\n\tconst stream = new PassThrough();\n\n\tmimicResponse(response, stream);\n\n\tunzip.on('error', err => {\n\t\tif (err.code === 'Z_BUF_ERROR') {\n\t\t\tstream.end();\n\t\t\treturn;\n\t\t}\n\n\t\tstream.emit('error', err);\n\t});\n\n\tresponse.pipe(unzip).pipe(stream);\n\n\treturn stream;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdldC9ub2RlX21vZHVsZXMvZGVjb21wcmVzcy1yZXNwb25zZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLG9CQUFvQix5REFBNkI7QUFDakQsYUFBYSxtQkFBTyxDQUFDLGtCQUFNO0FBQzNCLHNCQUFzQixtQkFBTyxDQUFDLG9FQUFnQjs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcG9ydGtleS9uZXh0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdldC9ub2RlX21vZHVsZXMvZGVjb21wcmVzcy1yZXNwb25zZS9pbmRleC5qcz9iNzM5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFBhc3NUaHJvdWdoID0gcmVxdWlyZSgnc3RyZWFtJykuUGFzc1Rocm91Z2g7XG5jb25zdCB6bGliID0gcmVxdWlyZSgnemxpYicpO1xuY29uc3QgbWltaWNSZXNwb25zZSA9IHJlcXVpcmUoJ21pbWljLXJlc3BvbnNlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVzcG9uc2UgPT4ge1xuXHQvLyBUT0RPOiBVc2UgQXJyYXkjaW5jbHVkZXMgd2hlbiB0YXJnZXRpbmcgTm9kZS5qcyA2XG5cdGlmIChbJ2d6aXAnLCAnZGVmbGF0ZSddLmluZGV4T2YocmVzcG9uc2UuaGVhZGVyc1snY29udGVudC1lbmNvZGluZyddKSA9PT0gLTEpIHtcblx0XHRyZXR1cm4gcmVzcG9uc2U7XG5cdH1cblxuXHRjb25zdCB1bnppcCA9IHpsaWIuY3JlYXRlVW56aXAoKTtcblx0Y29uc3Qgc3RyZWFtID0gbmV3IFBhc3NUaHJvdWdoKCk7XG5cblx0bWltaWNSZXNwb25zZShyZXNwb25zZSwgc3RyZWFtKTtcblxuXHR1bnppcC5vbignZXJyb3InLCBlcnIgPT4ge1xuXHRcdGlmIChlcnIuY29kZSA9PT0gJ1pfQlVGX0VSUk9SJykge1xuXHRcdFx0c3RyZWFtLmVuZCgpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG5cdH0pO1xuXG5cdHJlc3BvbnNlLnBpcGUodW56aXApLnBpcGUoc3RyZWFtKTtcblxuXHRyZXR1cm4gc3RyZWFtO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/simple-get/node_modules/decompress-response/index.js\n");

/***/ })

};
;