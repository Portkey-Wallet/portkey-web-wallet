/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/web3-providers-http";
exports.ids = ["vendor-chunks/web3-providers-http"];
exports.modules = {

/***/ "(ssr)/./node_modules/web3-providers-http/lib/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/web3-providers-http/lib/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file httpprovider.js\n * @authors:\n *   Marek Kotewicz <marek@parity.io>\n *   Marian Oancea\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   AyanamiTech <ayanami0330@protonmail.com>\n * @date 2015\n */\nvar errors = (__webpack_require__(/*! web3-core-helpers */ \"(ssr)/./node_modules/web3-core-helpers/lib/index.js\").errors);\nvar fetch = __webpack_require__(/*! cross-fetch */ \"(ssr)/./node_modules/cross-fetch/dist/node-ponyfill.js\");\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\n// Apply missing polyfill for IE\n(__webpack_require__(/*! es6-promise */ \"(ssr)/./node_modules/es6-promise/dist/es6-promise.js\").polyfill)();\n// import abortController if abortController is not included in node\nif (typeof global !== \"undefined\" && !global.AbortController) {\n    __webpack_require__(/*! abortcontroller-polyfill/dist/polyfill-patch-fetch */ \"(ssr)/./node_modules/abortcontroller-polyfill/dist/polyfill-patch-fetch.js\");\n}\n/**\n * HttpProvider should be used to send rpc calls over http\n */\nvar HttpProvider = function HttpProvider(host, options) {\n    options = options || {};\n    this.withCredentials = options.withCredentials;\n    this.timeout = options.timeout || 0;\n    this.headers = options.headers;\n    this.agent = options.agent;\n    this.forceGlobalFetch = options.forceGlobalFetch || false;\n    this.connected = false;\n    // keepAlive is true unless explicitly set to false\n    const keepAlive = options.keepAlive !== false;\n    this.host = host || 'http://localhost:8545';\n    if (!this.agent) {\n        if (this.host.substring(0, 5) === \"https\") {\n            this.httpsAgent = new https.Agent({ keepAlive });\n        }\n        else {\n            this.httpAgent = new http.Agent({ keepAlive });\n        }\n    }\n};\n/**\n * Should be used to make async request\n *\n * @method send\n * @param {Object} payload\n * @param {Function} callback triggered on end with (err, result)\n */\nHttpProvider.prototype.send = function (payload, callback) {\n    var options = {\n        method: 'POST',\n        body: JSON.stringify(payload)\n    };\n    var headers = {};\n    var controller;\n    var fetchFunc = this.forceGlobalFetch ? globalThis.fetch : fetch;\n    if (typeof AbortController !== 'undefined') {\n        controller = new AbortController();\n    }\n    else if (typeof window !== 'undefined' && typeof window.AbortController !== 'undefined') {\n        // Some chrome version doesn't recognize new AbortController(); so we are using it from window instead\n        // https://stackoverflow.com/questions/55718778/why-abortcontroller-is-not-defined\n        controller = new window.AbortController();\n    }\n    if (typeof controller !== 'undefined') {\n        options.signal = controller.signal;\n    }\n    // the current runtime is node\n    if (typeof XMLHttpRequest === 'undefined') {\n        // https://github.com/node-fetch/node-fetch#custom-agent\n        var agents = { httpsAgent: this.httpsAgent, httpAgent: this.httpAgent };\n        if (this.agent) {\n            agents.httpsAgent = this.agent.https;\n            agents.httpAgent = this.agent.http;\n        }\n        if (this.host.substring(0, 5) === \"https\") {\n            options.agent = agents.httpsAgent;\n        }\n        else {\n            options.agent = agents.httpAgent;\n        }\n    }\n    if (this.headers) {\n        this.headers.forEach(function (header) {\n            headers[header.name] = header.value;\n        });\n    }\n    // Default headers\n    if (!headers['Content-Type']) {\n        headers['Content-Type'] = 'application/json';\n    }\n    // As the Fetch API supports the credentials as following options 'include', 'omit', 'same-origin'\n    // https://developer.mozilla.org/en-US/docs/Web/API/fetch#credentials\n    // To avoid breaking change in 1.x we override this value based on boolean option.\n    if (this.withCredentials) {\n        options.credentials = 'include';\n    }\n    else {\n        options.credentials = 'omit';\n    }\n    options.headers = headers;\n    if (this.timeout > 0 && typeof controller !== 'undefined') {\n        this.timeoutId = setTimeout(function () {\n            controller.abort();\n        }, this.timeout);\n    }\n    var success = function (response) {\n        if (this.timeoutId !== undefined) {\n            clearTimeout(this.timeoutId);\n        }\n        // Response is a stream data so should be awaited for json response\n        response\n            .json()\n            .then(function (data) {\n            callback(null, data);\n        }, function () {\n            response\n                .text()\n                .then(function (text) {\n                callback(errors.InvalidResponse(text));\n            }, function () {\n                callback(errors.InvalidResponse(\"\"));\n            });\n        });\n    };\n    var failed = function (error) {\n        if (this.timeoutId !== undefined) {\n            clearTimeout(this.timeoutId);\n        }\n        if (error.name === 'AbortError') {\n            callback(errors.ConnectionTimeout(this.timeout));\n            return;\n        }\n        callback(errors.InvalidConnection(this.host, error));\n    };\n    fetchFunc(this.host, options)\n        .then(success.bind(this), failed.bind(this));\n};\nHttpProvider.prototype.disconnect = function () {\n    //NO OP\n};\n/**\n * Returns the desired boolean.\n *\n * @method supportsSubscriptions\n * @returns {boolean}\n */\nHttpProvider.prototype.supportsSubscriptions = function () {\n    return false;\n};\nmodule.exports = HttpProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-providers-http/lib/index.js\n");

/***/ })

};
;