/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/abortcontroller-polyfill";
exports.ids = ["vendor-chunks/abortcontroller-polyfill"];
exports.modules = {

/***/ "(ssr)/./node_modules/abortcontroller-polyfill/dist/polyfill-patch-fetch.js":
/*!****************************************************************************!*\
  !*** ./node_modules/abortcontroller-polyfill/dist/polyfill-patch-fetch.js ***!
  \****************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {\n   true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) :\n  0;\n})((function () { 'use strict';\n\n  function _arrayLikeToArray(r, a) {\n    (null == a || a > r.length) && (a = r.length);\n    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n    return n;\n  }\n  function _assertThisInitialized(e) {\n    if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return e;\n  }\n  function _callSuper(t, o, e) {\n    return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n  }\n  function _classCallCheck(a, n) {\n    if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n  function _defineProperties(e, r) {\n    for (var t = 0; t < r.length; t++) {\n      var o = r[t];\n      o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n    }\n  }\n  function _createClass(e, r, t) {\n    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n      writable: !1\n    }), e;\n  }\n  function _createForOfIteratorHelper(r, e) {\n    var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (!t) {\n      if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) {\n        t && (r = t);\n        var n = 0,\n          F = function () {};\n        return {\n          s: F,\n          n: function () {\n            return n >= r.length ? {\n              done: !0\n            } : {\n              done: !1,\n              value: r[n++]\n            };\n          },\n          e: function (r) {\n            throw r;\n          },\n          f: F\n        };\n      }\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var o,\n      a = !0,\n      u = !1;\n    return {\n      s: function () {\n        t = t.call(r);\n      },\n      n: function () {\n        var r = t.next();\n        return a = r.done, r;\n      },\n      e: function (r) {\n        u = !0, o = r;\n      },\n      f: function () {\n        try {\n          a || null == t.return || t.return();\n        } finally {\n          if (u) throw o;\n        }\n      }\n    };\n  }\n  function _get() {\n    return _get = \"undefined\" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) {\n      var p = _superPropBase(e, t);\n      if (p) {\n        var n = Object.getOwnPropertyDescriptor(p, t);\n        return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;\n      }\n    }, _get.apply(null, arguments);\n  }\n  function _getPrototypeOf(t) {\n    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n      return t.__proto__ || Object.getPrototypeOf(t);\n    }, _getPrototypeOf(t);\n  }\n  function _inherits(t, e) {\n    if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n    t.prototype = Object.create(e && e.prototype, {\n      constructor: {\n        value: t,\n        writable: !0,\n        configurable: !0\n      }\n    }), Object.defineProperty(t, \"prototype\", {\n      writable: !1\n    }), e && _setPrototypeOf(t, e);\n  }\n  function _isNativeReflectConstruct() {\n    try {\n      var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (t) {}\n    return (_isNativeReflectConstruct = function () {\n      return !!t;\n    })();\n  }\n  function _possibleConstructorReturn(t, e) {\n    if (e && (\"object\" == typeof e || \"function\" == typeof e)) return e;\n    if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n    return _assertThisInitialized(t);\n  }\n  function _setPrototypeOf(t, e) {\n    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n      return t.__proto__ = e, t;\n    }, _setPrototypeOf(t, e);\n  }\n  function _superPropBase(t, o) {\n    for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t)););\n    return t;\n  }\n  function _superPropGet(t, o, e, r) {\n    var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), o, e);\n    return 2 & r && \"function\" == typeof p ? function (t) {\n      return p.apply(e, t);\n    } : p;\n  }\n  function _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n      var i = e.call(t, r || \"default\");\n      if (\"object\" != typeof i) return i;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n  }\n  function _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : i + \"\";\n  }\n  function _unsupportedIterableToArray(r, a) {\n    if (r) {\n      if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n      var t = {}.toString.call(r).slice(8, -1);\n      return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n    }\n  }\n\n  (function (self) {\n      return {\n        NativeAbortSignal: self.AbortSignal,\n        NativeAbortController: self.AbortController\n      };\n    })(typeof self !== 'undefined' ? self : global);\n\n  /**\n   * @param {any} reason abort reason\n   */\n  function createAbortEvent(reason) {\n    var event;\n    try {\n      event = new Event('abort');\n    } catch (e) {\n      if (typeof document !== 'undefined') {\n        if (!document.createEvent) {\n          // For Internet Explorer 8:\n          event = document.createEventObject();\n          event.type = 'abort';\n        } else {\n          // For Internet Explorer 11:\n          event = document.createEvent('Event');\n          event.initEvent('abort', false, false);\n        }\n      } else {\n        // Fallback where document isn't available:\n        event = {\n          type: 'abort',\n          bubbles: false,\n          cancelable: false\n        };\n      }\n    }\n    event.reason = reason;\n    return event;\n  }\n\n  /**\n   * @param {any} reason abort reason\n   */\n  function normalizeAbortReason(reason) {\n    if (reason === undefined) {\n      if (typeof document === 'undefined') {\n        reason = new Error('This operation was aborted');\n        reason.name = 'AbortError';\n      } else {\n        try {\n          reason = new DOMException('signal is aborted without reason');\n          // The DOMException does not support setting the name property directly.\n          Object.defineProperty(reason, 'name', {\n            value: 'AbortError'\n          });\n        } catch (err) {\n          // IE 11 does not support calling the DOMException constructor, use a\n          // regular error object on it instead.\n          reason = new Error('This operation was aborted');\n          reason.name = 'AbortError';\n        }\n      }\n    }\n    return reason;\n  }\n\n  var Emitter = /*#__PURE__*/function () {\n    function Emitter() {\n      _classCallCheck(this, Emitter);\n      Object.defineProperty(this, 'listeners', {\n        value: {},\n        writable: true,\n        configurable: true\n      });\n    }\n    return _createClass(Emitter, [{\n      key: \"addEventListener\",\n      value: function addEventListener(type, callback, options) {\n        if (!(type in this.listeners)) {\n          this.listeners[type] = [];\n        }\n        this.listeners[type].push({\n          callback: callback,\n          options: options\n        });\n      }\n    }, {\n      key: \"removeEventListener\",\n      value: function removeEventListener(type, callback) {\n        if (!(type in this.listeners)) {\n          return;\n        }\n        var stack = this.listeners[type];\n        for (var i = 0, l = stack.length; i < l; i++) {\n          if (stack[i].callback === callback) {\n            stack.splice(i, 1);\n            return;\n          }\n        }\n      }\n    }, {\n      key: \"dispatchEvent\",\n      value: function dispatchEvent(event) {\n        var _this = this;\n        if (!(event.type in this.listeners)) {\n          return;\n        }\n        var stack = this.listeners[event.type];\n        var stackToCall = stack.slice();\n        var _loop = function _loop() {\n          var listener = stackToCall[i];\n          try {\n            listener.callback.call(_this, event);\n          } catch (e) {\n            Promise.resolve().then(function () {\n              throw e;\n            });\n          }\n          if (listener.options && listener.options.once) {\n            _this.removeEventListener(event.type, listener.callback);\n          }\n        };\n        for (var i = 0, l = stackToCall.length; i < l; i++) {\n          _loop();\n        }\n        return !event.defaultPrevented;\n      }\n    }]);\n  }();\n  var AbortSignal = /*#__PURE__*/function (_Emitter) {\n    function AbortSignal() {\n      var _this2;\n      _classCallCheck(this, AbortSignal);\n      _this2 = _callSuper(this, AbortSignal);\n      // Some versions of babel does not transpile super() correctly for IE <= 10, if the parent\n      // constructor has failed to run, then \"this.listeners\" will still be undefined and then we call\n      // the parent constructor directly instead as a workaround. For general details, see babel bug:\n      // https://github.com/babel/babel/issues/3041\n      // This hack was added as a fix for the issue described here:\n      // https://github.com/Financial-Times/polyfill-library/pull/59#issuecomment-477558042\n      if (!_this2.listeners) {\n        Emitter.call(_this2);\n      }\n\n      // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and\n      // we want Object.keys(new AbortController().signal) to be [] for compat with the native impl\n      Object.defineProperty(_this2, 'aborted', {\n        value: false,\n        writable: true,\n        configurable: true\n      });\n      Object.defineProperty(_this2, 'onabort', {\n        value: null,\n        writable: true,\n        configurable: true\n      });\n      Object.defineProperty(_this2, 'reason', {\n        value: undefined,\n        writable: true,\n        configurable: true\n      });\n      return _this2;\n    }\n    _inherits(AbortSignal, _Emitter);\n    return _createClass(AbortSignal, [{\n      key: \"toString\",\n      value: function toString() {\n        return '[object AbortSignal]';\n      }\n    }, {\n      key: \"dispatchEvent\",\n      value: function dispatchEvent(event) {\n        if (event.type === 'abort') {\n          this.aborted = true;\n          if (typeof this.onabort === 'function') {\n            this.onabort.call(this, event);\n          }\n        }\n        _superPropGet(AbortSignal, \"dispatchEvent\", this, 3)([event]);\n      }\n\n      /**\n       * @see {@link https://developer.mozilla.org/zh-CN/docs/Web/API/AbortSignal/throwIfAborted}\n       */\n    }, {\n      key: \"throwIfAborted\",\n      value: function throwIfAborted() {\n        var aborted = this.aborted,\n          _this$reason = this.reason,\n          reason = _this$reason === void 0 ? 'Aborted' : _this$reason;\n        if (!aborted) return;\n        throw reason;\n      }\n\n      /**\n       * @see {@link https://developer.mozilla.org/zh-CN/docs/Web/API/AbortSignal/timeout_static}\n       * @param {number} time The \"active\" time in milliseconds before the returned {@link AbortSignal} will abort.\n       *                      The value must be within range of 0 and {@link Number.MAX_SAFE_INTEGER}.\n       * @returns {AbortSignal} The signal will abort with its {@link AbortSignal.reason} property set to a `TimeoutError` {@link DOMException} on timeout,\n       *                        or an `AbortError` {@link DOMException} if the operation was user-triggered.\n       */\n    }], [{\n      key: \"timeout\",\n      value: function timeout(time) {\n        var controller = new AbortController();\n        setTimeout(function () {\n          return controller.abort(new DOMException(\"This signal is timeout in \".concat(time, \"ms\"), 'TimeoutError'));\n        }, time);\n        return controller.signal;\n      }\n\n      /**\n       * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/any_static}\n       * @param {Iterable<AbortSignal>} iterable An {@link Iterable} (such as an {@link Array}) of abort signals.\n       * @returns {AbortSignal} - **Already aborted**, if any of the abort signals given is already aborted.\n       *                          The returned {@link AbortSignal}'s reason will be already set to the `reason` of the first abort signal that was already aborted.\n       *                        - **Asynchronously aborted**, when any abort signal in `iterable` aborts.\n       *                          The `reason` will be set to the reason of the first abort signal that is aborted.\n       */\n    }, {\n      key: \"any\",\n      value: function any(iterable) {\n        var controller = new AbortController();\n        /**\n         * @this AbortSignal\n         */\n        function abort() {\n          controller.abort(this.reason);\n          clean();\n        }\n        function clean() {\n          var _iterator = _createForOfIteratorHelper(iterable),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var signal = _step.value;\n              signal.removeEventListener('abort', abort);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n        var _iterator2 = _createForOfIteratorHelper(iterable),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var signal = _step2.value;\n            if (signal.aborted) {\n              controller.abort(signal.reason);\n              break;\n            } else signal.addEventListener('abort', abort);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n        return controller.signal;\n      }\n    }]);\n  }(Emitter);\n  var AbortController = /*#__PURE__*/function () {\n    function AbortController() {\n      _classCallCheck(this, AbortController);\n      // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and\n      // we want Object.keys(new AbortController()) to be [] for compat with the native impl\n      Object.defineProperty(this, 'signal', {\n        value: new AbortSignal(),\n        writable: true,\n        configurable: true\n      });\n    }\n    return _createClass(AbortController, [{\n      key: \"abort\",\n      value: function abort(reason) {\n        var signalReason = normalizeAbortReason(reason);\n        var event = createAbortEvent(signalReason);\n        this.signal.reason = signalReason;\n        this.signal.dispatchEvent(event);\n      }\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return '[object AbortController]';\n      }\n    }]);\n  }();\n  if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n    // These are necessary to make sure that we get correct output for:\n    // Object.prototype.toString.call(new AbortController())\n    AbortController.prototype[Symbol.toStringTag] = 'AbortController';\n    AbortSignal.prototype[Symbol.toStringTag] = 'AbortSignal';\n  }\n\n  function polyfillNeeded(self) {\n    if (self.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {\n      console.log('__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill');\n      return true;\n    }\n\n    // Note that the \"unfetch\" minimal fetch polyfill defines fetch() without\n    // defining window.Request, and this polyfill need to work on top of unfetch\n    // so the below feature detection needs the !self.AbortController part.\n    // The Request.prototype check is also needed because Safari versions 11.1.2\n    // up to and including 12.1.x has a window.AbortController present but still\n    // does NOT correctly implement abortable fetch:\n    // https://bugs.webkit.org/show_bug.cgi?id=174980#c2\n    return typeof self.Request === 'function' && !self.Request.prototype.hasOwnProperty('signal') || !self.AbortController;\n  }\n\n  /**\n   * Note: the \"fetch.Request\" default value is available for fetch imported from\n   * the \"node-fetch\" package and not in browsers. This is OK since browsers\n   * will be importing umd-polyfill.js from that path \"self\" is passed the\n   * decorator so the default value will not be used (because browsers that define\n   * fetch also has Request). One quirky setup where self.fetch exists but\n   * self.Request does not is when the \"unfetch\" minimal fetch polyfill is used\n   * on top of IE11; for this case the browser will try to use the fetch.Request\n   * default value which in turn will be undefined but then then \"if (Request)\"\n   * will ensure that you get a patched fetch but still no Request (as expected).\n   * @param {fetch, Request = fetch.Request}\n   * @returns {fetch: abortableFetch, Request: AbortableRequest}\n   */\n  function abortableFetchDecorator(patchTargets) {\n    if ('function' === typeof patchTargets) {\n      patchTargets = {\n        fetch: patchTargets\n      };\n    }\n    var _patchTargets = patchTargets,\n      fetch = _patchTargets.fetch,\n      _patchTargets$Request = _patchTargets.Request,\n      NativeRequest = _patchTargets$Request === void 0 ? fetch.Request : _patchTargets$Request,\n      NativeAbortController = _patchTargets.AbortController,\n      _patchTargets$__FORCE = _patchTargets.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL,\n      __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL = _patchTargets$__FORCE === void 0 ? false : _patchTargets$__FORCE;\n    if (!polyfillNeeded({\n      fetch: fetch,\n      Request: NativeRequest,\n      AbortController: NativeAbortController,\n      __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL: __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL\n    })) {\n      return {\n        fetch: fetch,\n        Request: Request\n      };\n    }\n    var Request = NativeRequest;\n    // Note that the \"unfetch\" minimal fetch polyfill defines fetch() without\n    // defining window.Request, and this polyfill need to work on top of unfetch\n    // hence we only patch it if it's available. Also we don't patch it if signal\n    // is already available on the Request prototype because in this case support\n    // is present and the patching below can cause a crash since it assigns to\n    // request.signal which is technically a read-only property. This latter error\n    // happens when you run the main5.js node-fetch example in the repo\n    // \"abortcontroller-polyfill-examples\". The exact error is:\n    //   request.signal = init.signal;\n    //   ^\n    // TypeError: Cannot set property signal of #<Request> which has only a getter\n    if (Request && !Request.prototype.hasOwnProperty('signal') || __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {\n      Request = function Request(input, init) {\n        var signal;\n        if (init && init.signal) {\n          signal = init.signal;\n          // Never pass init.signal to the native Request implementation when the polyfill has\n          // been installed because if we're running on top of a browser with a\n          // working native AbortController (i.e. the polyfill was installed due to\n          // __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL being set), then passing our\n          // fake AbortSignal to the native fetch will trigger:\n          // TypeError: Failed to construct 'Request': member signal is not of type AbortSignal.\n          delete init.signal;\n        }\n        var request = new NativeRequest(input, init);\n        if (signal) {\n          Object.defineProperty(request, 'signal', {\n            writable: false,\n            enumerable: false,\n            configurable: true,\n            value: signal\n          });\n        }\n        return request;\n      };\n      Request.prototype = NativeRequest.prototype;\n    }\n    var realFetch = fetch;\n    var abortableFetch = function abortableFetch(input, init) {\n      var signal = Request && Request.prototype.isPrototypeOf(input) ? input.signal : init ? init.signal : undefined;\n      if (signal) {\n        var abortError;\n        try {\n          abortError = new DOMException('Aborted', 'AbortError');\n        } catch (err) {\n          // IE 11 does not support calling the DOMException constructor, use a\n          // regular error object on it instead.\n          abortError = new Error('Aborted');\n          abortError.name = 'AbortError';\n        }\n\n        // Return early if already aborted, thus avoiding making an HTTP request\n        if (signal.aborted) {\n          return Promise.reject(abortError);\n        }\n\n        // Turn an event into a promise, reject it once `abort` is dispatched\n        var cancellation = new Promise(function (_, reject) {\n          signal.addEventListener('abort', function () {\n            return reject(abortError);\n          }, {\n            once: true\n          });\n        });\n        if (init && init.signal) {\n          // Never pass .signal to the native implementation when the polyfill has\n          // been installed because if we're running on top of a browser with a\n          // working native AbortController (i.e. the polyfill was installed due to\n          // __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL being set), then passing our\n          // fake AbortSignal to the native fetch will trigger:\n          // TypeError: Failed to execute 'fetch' on 'Window': member signal is not of type AbortSignal.\n          delete init.signal;\n        }\n        // Return the fastest promise (don't need to wait for request to finish)\n        return Promise.race([cancellation, realFetch(input, init)]);\n      }\n      return realFetch(input, init);\n    };\n    return {\n      fetch: abortableFetch,\n      Request: Request\n    };\n  }\n\n  (function (self) {\n\n    if (!polyfillNeeded(self)) {\n      return;\n    }\n    if (!self.fetch) {\n      console.warn('fetch() is not available, cannot install abortcontroller-polyfill');\n      return;\n    }\n    var _abortableFetch = abortableFetchDecorator(self),\n      fetch = _abortableFetch.fetch,\n      Request = _abortableFetch.Request;\n    self.fetch = fetch;\n    self.Request = Request;\n    Object.defineProperty(self, 'AbortController', {\n      writable: true,\n      enumerable: false,\n      configurable: true,\n      value: AbortController\n    });\n    Object.defineProperty(self, 'AbortSignal', {\n      writable: true,\n      enumerable: false,\n      configurable: true,\n      value: AbortSignal\n    });\n  })(typeof self !== 'undefined' ? self : global);\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/abortcontroller-polyfill/dist/polyfill-patch-fetch.js\n");

/***/ })

};
;