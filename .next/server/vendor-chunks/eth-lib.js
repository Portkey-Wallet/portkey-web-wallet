/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/eth-lib";
exports.ids = ["vendor-chunks/eth-lib"];
exports.modules = {

/***/ "(ssr)/./node_modules/eth-lib/lib/account.js":
/*!*********************************************!*\
  !*** ./node_modules/eth-lib/lib/account.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Bytes = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/eth-lib/lib/bytes.js\");\nconst Nat = __webpack_require__(/*! ./nat */ \"(ssr)/./node_modules/eth-lib/lib/nat.js\");\nconst elliptic = __webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\");\nconst rlp = __webpack_require__(/*! ./rlp */ \"(ssr)/./node_modules/eth-lib/lib/rlp.js\");\nconst secp256k1 = new elliptic.ec(\"secp256k1\"); // eslint-disable-line\nconst { keccak256, keccak256s } = __webpack_require__(/*! ./hash */ \"(ssr)/./node_modules/eth-lib/lib/hash.js\");\n\nconst create = entropy => {\n  const innerHex = keccak256(Bytes.concat(Bytes.random(32), entropy || Bytes.random(32)));\n  const middleHex = Bytes.concat(Bytes.concat(Bytes.random(32), innerHex), Bytes.random(32));\n  const outerHex = keccak256(middleHex);\n  return fromPrivate(outerHex);\n};\n\nconst toChecksum = address => {\n  const addressHash = keccak256s(address.slice(2));\n  let checksumAddress = \"0x\";\n  for (let i = 0; i < 40; i++) checksumAddress += parseInt(addressHash[i + 2], 16) > 7 ? address[i + 2].toUpperCase() : address[i + 2];\n  return checksumAddress;\n};\n\nconst fromPrivate = privateKey => {\n  const buffer = new Buffer(privateKey.slice(2), \"hex\");\n  const ecKey = secp256k1.keyFromPrivate(buffer);\n  const publicKey = \"0x\" + ecKey.getPublic(false, 'hex').slice(2);\n  const publicHash = keccak256(publicKey);\n  const address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return {\n    address: address,\n    privateKey: privateKey\n  };\n};\n\nconst encodeSignature = ([v, r, s]) => Bytes.flatten([r, s, v]);\n\nconst decodeSignature = hex => [Bytes.slice(64, Bytes.length(hex), hex), Bytes.slice(0, 32, hex), Bytes.slice(32, 64, hex)];\n\nconst makeSigner = addToV => (hash, privateKey) => {\n  const signature = secp256k1.keyFromPrivate(new Buffer(privateKey.slice(2), \"hex\")).sign(new Buffer(hash.slice(2), \"hex\"), { canonical: true });\n  return encodeSignature([Nat.fromString(Bytes.fromNumber(addToV + signature.recoveryParam)), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.r.toString(16))), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.s.toString(16)))]);\n};\n\nconst sign = makeSigner(27); // v=27|28 instead of 0|1...\n\nconst recover = (hash, signature) => {\n  const vals = decodeSignature(signature);\n  const vrs = { v: Bytes.toNumber(vals[0]), r: vals[1].slice(2), s: vals[2].slice(2) };\n  const ecPublicKey = secp256k1.recoverPubKey(new Buffer(hash.slice(2), \"hex\"), vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2); // because odd vals mean v=0... sadly that means v=0 means v=1... I hate that\n  const publicKey = \"0x\" + ecPublicKey.encode(\"hex\", false).slice(2);\n  const publicHash = keccak256(publicKey);\n  const address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return address;\n};\n\nmodule.exports = {\n  create,\n  toChecksum,\n  fromPrivate,\n  sign,\n  makeSigner,\n  recover,\n  encodeSignature,\n  decodeSignature\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWxpYi9saWIvYWNjb3VudC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxjQUFjLG1CQUFPLENBQUMsMERBQVM7QUFDL0IsWUFBWSxtQkFBTyxDQUFDLHNEQUFPO0FBQzNCLGlCQUFpQixtQkFBTyxDQUFDLCtEQUFVO0FBQ25DLFlBQVksbUJBQU8sQ0FBQyxzREFBTztBQUMzQixnREFBZ0Q7QUFDaEQsUUFBUSx3QkFBd0IsRUFBRSxtQkFBTyxDQUFDLHdEQUFROztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFFBQVE7QUFDMUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0EsOEhBQThILGlCQUFpQjtBQUMvSTtBQUNBOztBQUVBLDZCQUE2Qjs7QUFFN0I7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQix5SEFBeUg7QUFDekg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0Bwb3J0a2V5L25leHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9ldGgtbGliL2xpYi9hY2NvdW50LmpzPzU4MDUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQnl0ZXMgPSByZXF1aXJlKFwiLi9ieXRlc1wiKTtcbmNvbnN0IE5hdCA9IHJlcXVpcmUoXCIuL25hdFwiKTtcbmNvbnN0IGVsbGlwdGljID0gcmVxdWlyZShcImVsbGlwdGljXCIpO1xuY29uc3QgcmxwID0gcmVxdWlyZShcIi4vcmxwXCIpO1xuY29uc3Qgc2VjcDI1NmsxID0gbmV3IGVsbGlwdGljLmVjKFwic2VjcDI1NmsxXCIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5jb25zdCB7IGtlY2NhazI1Niwga2VjY2FrMjU2cyB9ID0gcmVxdWlyZShcIi4vaGFzaFwiKTtcblxuY29uc3QgY3JlYXRlID0gZW50cm9weSA9PiB7XG4gIGNvbnN0IGlubmVySGV4ID0ga2VjY2FrMjU2KEJ5dGVzLmNvbmNhdChCeXRlcy5yYW5kb20oMzIpLCBlbnRyb3B5IHx8IEJ5dGVzLnJhbmRvbSgzMikpKTtcbiAgY29uc3QgbWlkZGxlSGV4ID0gQnl0ZXMuY29uY2F0KEJ5dGVzLmNvbmNhdChCeXRlcy5yYW5kb20oMzIpLCBpbm5lckhleCksIEJ5dGVzLnJhbmRvbSgzMikpO1xuICBjb25zdCBvdXRlckhleCA9IGtlY2NhazI1NihtaWRkbGVIZXgpO1xuICByZXR1cm4gZnJvbVByaXZhdGUob3V0ZXJIZXgpO1xufTtcblxuY29uc3QgdG9DaGVja3N1bSA9IGFkZHJlc3MgPT4ge1xuICBjb25zdCBhZGRyZXNzSGFzaCA9IGtlY2NhazI1NnMoYWRkcmVzcy5zbGljZSgyKSk7XG4gIGxldCBjaGVja3N1bUFkZHJlc3MgPSBcIjB4XCI7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNDA7IGkrKykgY2hlY2tzdW1BZGRyZXNzICs9IHBhcnNlSW50KGFkZHJlc3NIYXNoW2kgKyAyXSwgMTYpID4gNyA/IGFkZHJlc3NbaSArIDJdLnRvVXBwZXJDYXNlKCkgOiBhZGRyZXNzW2kgKyAyXTtcbiAgcmV0dXJuIGNoZWNrc3VtQWRkcmVzcztcbn07XG5cbmNvbnN0IGZyb21Qcml2YXRlID0gcHJpdmF0ZUtleSA9PiB7XG4gIGNvbnN0IGJ1ZmZlciA9IG5ldyBCdWZmZXIocHJpdmF0ZUtleS5zbGljZSgyKSwgXCJoZXhcIik7XG4gIGNvbnN0IGVjS2V5ID0gc2VjcDI1NmsxLmtleUZyb21Qcml2YXRlKGJ1ZmZlcik7XG4gIGNvbnN0IHB1YmxpY0tleSA9IFwiMHhcIiArIGVjS2V5LmdldFB1YmxpYyhmYWxzZSwgJ2hleCcpLnNsaWNlKDIpO1xuICBjb25zdCBwdWJsaWNIYXNoID0ga2VjY2FrMjU2KHB1YmxpY0tleSk7XG4gIGNvbnN0IGFkZHJlc3MgPSB0b0NoZWNrc3VtKFwiMHhcIiArIHB1YmxpY0hhc2guc2xpY2UoLTQwKSk7XG4gIHJldHVybiB7XG4gICAgYWRkcmVzczogYWRkcmVzcyxcbiAgICBwcml2YXRlS2V5OiBwcml2YXRlS2V5XG4gIH07XG59O1xuXG5jb25zdCBlbmNvZGVTaWduYXR1cmUgPSAoW3YsIHIsIHNdKSA9PiBCeXRlcy5mbGF0dGVuKFtyLCBzLCB2XSk7XG5cbmNvbnN0IGRlY29kZVNpZ25hdHVyZSA9IGhleCA9PiBbQnl0ZXMuc2xpY2UoNjQsIEJ5dGVzLmxlbmd0aChoZXgpLCBoZXgpLCBCeXRlcy5zbGljZSgwLCAzMiwgaGV4KSwgQnl0ZXMuc2xpY2UoMzIsIDY0LCBoZXgpXTtcblxuY29uc3QgbWFrZVNpZ25lciA9IGFkZFRvViA9PiAoaGFzaCwgcHJpdmF0ZUtleSkgPT4ge1xuICBjb25zdCBzaWduYXR1cmUgPSBzZWNwMjU2azEua2V5RnJvbVByaXZhdGUobmV3IEJ1ZmZlcihwcml2YXRlS2V5LnNsaWNlKDIpLCBcImhleFwiKSkuc2lnbihuZXcgQnVmZmVyKGhhc2guc2xpY2UoMiksIFwiaGV4XCIpLCB7IGNhbm9uaWNhbDogdHJ1ZSB9KTtcbiAgcmV0dXJuIGVuY29kZVNpZ25hdHVyZShbTmF0LmZyb21TdHJpbmcoQnl0ZXMuZnJvbU51bWJlcihhZGRUb1YgKyBzaWduYXR1cmUucmVjb3ZlcnlQYXJhbSkpLCBCeXRlcy5wYWQoMzIsIEJ5dGVzLmZyb21OYXQoXCIweFwiICsgc2lnbmF0dXJlLnIudG9TdHJpbmcoMTYpKSksIEJ5dGVzLnBhZCgzMiwgQnl0ZXMuZnJvbU5hdChcIjB4XCIgKyBzaWduYXR1cmUucy50b1N0cmluZygxNikpKV0pO1xufTtcblxuY29uc3Qgc2lnbiA9IG1ha2VTaWduZXIoMjcpOyAvLyB2PTI3fDI4IGluc3RlYWQgb2YgMHwxLi4uXG5cbmNvbnN0IHJlY292ZXIgPSAoaGFzaCwgc2lnbmF0dXJlKSA9PiB7XG4gIGNvbnN0IHZhbHMgPSBkZWNvZGVTaWduYXR1cmUoc2lnbmF0dXJlKTtcbiAgY29uc3QgdnJzID0geyB2OiBCeXRlcy50b051bWJlcih2YWxzWzBdKSwgcjogdmFsc1sxXS5zbGljZSgyKSwgczogdmFsc1syXS5zbGljZSgyKSB9O1xuICBjb25zdCBlY1B1YmxpY0tleSA9IHNlY3AyNTZrMS5yZWNvdmVyUHViS2V5KG5ldyBCdWZmZXIoaGFzaC5zbGljZSgyKSwgXCJoZXhcIiksIHZycywgdnJzLnYgPCAyID8gdnJzLnYgOiAxIC0gdnJzLnYgJSAyKTsgLy8gYmVjYXVzZSBvZGQgdmFscyBtZWFuIHY9MC4uLiBzYWRseSB0aGF0IG1lYW5zIHY9MCBtZWFucyB2PTEuLi4gSSBoYXRlIHRoYXRcbiAgY29uc3QgcHVibGljS2V5ID0gXCIweFwiICsgZWNQdWJsaWNLZXkuZW5jb2RlKFwiaGV4XCIsIGZhbHNlKS5zbGljZSgyKTtcbiAgY29uc3QgcHVibGljSGFzaCA9IGtlY2NhazI1NihwdWJsaWNLZXkpO1xuICBjb25zdCBhZGRyZXNzID0gdG9DaGVja3N1bShcIjB4XCIgKyBwdWJsaWNIYXNoLnNsaWNlKC00MCkpO1xuICByZXR1cm4gYWRkcmVzcztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGUsXG4gIHRvQ2hlY2tzdW0sXG4gIGZyb21Qcml2YXRlLFxuICBzaWduLFxuICBtYWtlU2lnbmVyLFxuICByZWNvdmVyLFxuICBlbmNvZGVTaWduYXR1cmUsXG4gIGRlY29kZVNpZ25hdHVyZVxufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-lib/lib/account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-lib/lib/array.js":
/*!*******************************************!*\
  !*** ./node_modules/eth-lib/lib/array.js ***!
  \*******************************************/
/***/ ((module) => {

eval("const generate = (num, fn) => {\n  let a = [];\n  for (var i = 0; i < num; ++i) a.push(fn(i));\n  return a;\n};\n\nconst replicate = (num, val) => generate(num, () => val);\n\nconst concat = (a, b) => a.concat(b);\n\nconst flatten = a => {\n  let r = [];\n  for (let j = 0, J = a.length; j < J; ++j) for (let i = 0, I = a[j].length; i < I; ++i) r.push(a[j][i]);\n  return r;\n};\n\nconst chunksOf = (n, a) => {\n  let b = [];\n  for (let i = 0, l = a.length; i < l; i += n) b.push(a.slice(i, i + n));\n  return b;\n};\n\nmodule.exports = {\n  generate,\n  replicate,\n  concat,\n  flatten,\n  chunksOf\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWxpYi9saWIvYXJyYXkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLGtCQUFrQixTQUFTO0FBQzNCO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLGdDQUFnQyxPQUFPLHNDQUFzQyxPQUFPO0FBQ3BGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdDQUFnQyxPQUFPO0FBQ3ZDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcG9ydGtleS9uZXh0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvZXRoLWxpYi9saWIvYXJyYXkuanM/NjI4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBnZW5lcmF0ZSA9IChudW0sIGZuKSA9PiB7XG4gIGxldCBhID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtOyArK2kpIGEucHVzaChmbihpKSk7XG4gIHJldHVybiBhO1xufTtcblxuY29uc3QgcmVwbGljYXRlID0gKG51bSwgdmFsKSA9PiBnZW5lcmF0ZShudW0sICgpID0+IHZhbCk7XG5cbmNvbnN0IGNvbmNhdCA9IChhLCBiKSA9PiBhLmNvbmNhdChiKTtcblxuY29uc3QgZmxhdHRlbiA9IGEgPT4ge1xuICBsZXQgciA9IFtdO1xuICBmb3IgKGxldCBqID0gMCwgSiA9IGEubGVuZ3RoOyBqIDwgSjsgKytqKSBmb3IgKGxldCBpID0gMCwgSSA9IGFbal0ubGVuZ3RoOyBpIDwgSTsgKytpKSByLnB1c2goYVtqXVtpXSk7XG4gIHJldHVybiByO1xufTtcblxuY29uc3QgY2h1bmtzT2YgPSAobiwgYSkgPT4ge1xuICBsZXQgYiA9IFtdO1xuICBmb3IgKGxldCBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgaSArPSBuKSBiLnB1c2goYS5zbGljZShpLCBpICsgbikpO1xuICByZXR1cm4gYjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZW5lcmF0ZSxcbiAgcmVwbGljYXRlLFxuICBjb25jYXQsXG4gIGZsYXR0ZW4sXG4gIGNodW5rc09mXG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-lib/lib/array.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-lib/lib/bytes.js":
/*!*******************************************!*\
  !*** ./node_modules/eth-lib/lib/bytes.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const A = __webpack_require__(/*! ./array.js */ \"(ssr)/./node_modules/eth-lib/lib/array.js\");\n\nconst at = (bytes, index) => parseInt(bytes.slice(index * 2 + 2, index * 2 + 4), 16);\n\nconst random = bytes => {\n  let rnd;\n  if (typeof window !== \"undefined\" && window.crypto && window.crypto.getRandomValues) rnd = window.crypto.getRandomValues(new Uint8Array(bytes));else if (true) rnd = (__webpack_require__(/*! crypto */ \"crypto\").randomBytes)(bytes);else {}\n  let hex = \"0x\";\n  for (let i = 0; i < bytes; ++i) hex += (\"00\" + rnd[i].toString(16)).slice(-2);\n  return hex;\n};\n\nconst length = a => (a.length - 2) / 2;\n\nconst flatten = a => \"0x\" + a.reduce((r, s) => r + s.slice(2), \"\");\n\nconst slice = (i, j, bs) => \"0x\" + bs.slice(i * 2 + 2, j * 2 + 2);\n\nconst reverse = hex => {\n  let rev = \"0x\";\n  for (let i = 0, l = length(hex); i < l; ++i) {\n    rev += hex.slice((l - i) * 2, (l - i + 1) * 2);\n  }\n  return rev;\n};\n\nconst pad = (l, hex) => hex.length === l * 2 + 2 ? hex : pad(l, \"0x\" + \"0\" + hex.slice(2));\n\nconst padRight = (l, hex) => hex.length === l * 2 + 2 ? hex : padRight(l, hex + \"0\");\n\nconst toArray = hex => {\n  let arr = [];\n  for (let i = 2, l = hex.length; i < l; i += 2) arr.push(parseInt(hex.slice(i, i + 2), 16));\n  return arr;\n};\n\nconst fromArray = arr => {\n  let hex = \"0x\";\n  for (let i = 0, l = arr.length; i < l; ++i) {\n    let b = arr[i];\n    hex += (b < 16 ? \"0\" : \"\") + b.toString(16);\n  }\n  return hex;\n};\n\nconst toUint8Array = hex => new Uint8Array(toArray(hex));\n\nconst fromUint8Array = arr => fromArray([].slice.call(arr, 0));\n\nconst fromNumber = num => {\n  let hex = num.toString(16);\n  return hex.length % 2 === 0 ? \"0x\" + hex : \"0x0\" + hex;\n};\n\nconst toNumber = hex => parseInt(hex.slice(2), 16);\n\nconst concat = (a, b) => a.concat(b.slice(2));\n\nconst fromNat = bn => bn === \"0x0\" ? \"0x\" : bn.length % 2 === 0 ? bn : \"0x0\" + bn.slice(2);\n\nconst toNat = bn => bn[2] === \"0\" ? \"0x\" + bn.slice(3) : bn;\n\nconst fromAscii = ascii => {\n  let hex = \"0x\";\n  for (let i = 0; i < ascii.length; ++i) hex += (\"00\" + ascii.charCodeAt(i).toString(16)).slice(-2);\n  return hex;\n};\n\nconst toAscii = hex => {\n  let ascii = \"\";\n  for (let i = 2; i < hex.length; i += 2) ascii += String.fromCharCode(parseInt(hex.slice(i, i + 2), 16));\n  return ascii;\n};\n\n// From https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330\nconst fromString = s => {\n  const makeByte = uint8 => {\n    const b = uint8.toString(16);\n    return b.length < 2 ? \"0\" + b : b;\n  };\n  let bytes = \"0x\";\n  for (let ci = 0; ci != s.length; ci++) {\n    let c = s.charCodeAt(ci);\n    if (c < 128) {\n      bytes += makeByte(c);\n      continue;\n    }\n    if (c < 2048) {\n      bytes += makeByte(c >> 6 | 192);\n    } else {\n      if (c > 0xd7ff && c < 0xdc00) {\n        if (++ci == s.length) return null;\n        let c2 = s.charCodeAt(ci);\n        if (c2 < 0xdc00 || c2 > 0xdfff) return null;\n        c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n        bytes += makeByte(c >> 18 | 240);\n        bytes += makeByte(c >> 12 & 63 | 128);\n      } else {\n        // c <= 0xffff\n        bytes += makeByte(c >> 12 | 224);\n      }\n      bytes += makeByte(c >> 6 & 63 | 128);\n    }\n    bytes += makeByte(c & 63 | 128);\n  }\n  return bytes;\n};\n\nconst toString = bytes => {\n  let s = '';\n  let i = 0;\n  let l = length(bytes);\n  while (i < l) {\n    let c = at(bytes, i++);\n    if (c > 127) {\n      if (c > 191 && c < 224) {\n        if (i >= l) return null;\n        c = (c & 31) << 6 | at(bytes, i) & 63;\n      } else if (c > 223 && c < 240) {\n        if (i + 1 >= l) return null;\n        c = (c & 15) << 12 | (at(bytes, i) & 63) << 6 | at(bytes, ++i) & 63;\n      } else if (c > 239 && c < 248) {\n        if (i + 2 >= l) return null;\n        c = (c & 7) << 18 | (at(bytes, i) & 63) << 12 | (at(bytes, ++i) & 63) << 6 | at(bytes, ++i) & 63;\n      } else return null;\n      ++i;\n    }\n    if (c <= 0xffff) s += String.fromCharCode(c);else if (c <= 0x10ffff) {\n      c -= 0x10000;\n      s += String.fromCharCode(c >> 10 | 0xd800);\n      s += String.fromCharCode(c & 0x3FF | 0xdc00);\n    } else return null;\n  }\n  return s;\n};\n\nmodule.exports = {\n  random,\n  length,\n  concat,\n  flatten,\n  slice,\n  reverse,\n  pad,\n  padRight,\n  fromAscii,\n  toAscii,\n  fromString,\n  toString,\n  fromNumber,\n  toNumber,\n  fromNat,\n  toNat,\n  fromArray,\n  toArray,\n  fromUint8Array,\n  toUint8Array\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWxpYi9saWIvYnl0ZXMuanMiLCJtYXBwaW5ncyI6IkFBQUEsVUFBVSxtQkFBTyxDQUFDLDZEQUFZOztBQUU5Qjs7QUFFQTtBQUNBO0FBQ0Esa0pBQWtKLFNBQVMsSUFBOEIsUUFBUSx5REFBa0MsUUFBUSxLQUFLLEVBQTJDO0FBQzNSO0FBQ0Esa0JBQWtCLFdBQVc7QUFDN0I7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsbUNBQW1DLE9BQU87QUFDMUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLGtDQUFrQyxPQUFPO0FBQ3pDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtDQUFrQyxPQUFPO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLGdCQUFnQjtBQUNsQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGdCQUFnQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0Bwb3J0a2V5L25leHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9ldGgtbGliL2xpYi9ieXRlcy5qcz84MjM2Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEEgPSByZXF1aXJlKFwiLi9hcnJheS5qc1wiKTtcblxuY29uc3QgYXQgPSAoYnl0ZXMsIGluZGV4KSA9PiBwYXJzZUludChieXRlcy5zbGljZShpbmRleCAqIDIgKyAyLCBpbmRleCAqIDIgKyA0KSwgMTYpO1xuXG5jb25zdCByYW5kb20gPSBieXRlcyA9PiB7XG4gIGxldCBybmQ7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5jcnlwdG8gJiYgd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHJuZCA9IHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KGJ5dGVzKSk7ZWxzZSBpZiAodHlwZW9mIHJlcXVpcmUgIT09IFwidW5kZWZpbmVkXCIpIHJuZCA9IHJlcXVpcmUoXCJjXCIgKyBcInJ5cHRvXCIpLnJhbmRvbUJ5dGVzKGJ5dGVzKTtlbHNlIHRocm93IFwiU2FmZSByYW5kb20gbnVtYmVycyBub3QgYXZhaWxhYmxlLlwiO1xuICBsZXQgaGV4ID0gXCIweFwiO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzOyArK2kpIGhleCArPSAoXCIwMFwiICsgcm5kW2ldLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpO1xuICByZXR1cm4gaGV4O1xufTtcblxuY29uc3QgbGVuZ3RoID0gYSA9PiAoYS5sZW5ndGggLSAyKSAvIDI7XG5cbmNvbnN0IGZsYXR0ZW4gPSBhID0+IFwiMHhcIiArIGEucmVkdWNlKChyLCBzKSA9PiByICsgcy5zbGljZSgyKSwgXCJcIik7XG5cbmNvbnN0IHNsaWNlID0gKGksIGosIGJzKSA9PiBcIjB4XCIgKyBicy5zbGljZShpICogMiArIDIsIGogKiAyICsgMik7XG5cbmNvbnN0IHJldmVyc2UgPSBoZXggPT4ge1xuICBsZXQgcmV2ID0gXCIweFwiO1xuICBmb3IgKGxldCBpID0gMCwgbCA9IGxlbmd0aChoZXgpOyBpIDwgbDsgKytpKSB7XG4gICAgcmV2ICs9IGhleC5zbGljZSgobCAtIGkpICogMiwgKGwgLSBpICsgMSkgKiAyKTtcbiAgfVxuICByZXR1cm4gcmV2O1xufTtcblxuY29uc3QgcGFkID0gKGwsIGhleCkgPT4gaGV4Lmxlbmd0aCA9PT0gbCAqIDIgKyAyID8gaGV4IDogcGFkKGwsIFwiMHhcIiArIFwiMFwiICsgaGV4LnNsaWNlKDIpKTtcblxuY29uc3QgcGFkUmlnaHQgPSAobCwgaGV4KSA9PiBoZXgubGVuZ3RoID09PSBsICogMiArIDIgPyBoZXggOiBwYWRSaWdodChsLCBoZXggKyBcIjBcIik7XG5cbmNvbnN0IHRvQXJyYXkgPSBoZXggPT4ge1xuICBsZXQgYXJyID0gW107XG4gIGZvciAobGV0IGkgPSAyLCBsID0gaGV4Lmxlbmd0aDsgaSA8IGw7IGkgKz0gMikgYXJyLnB1c2gocGFyc2VJbnQoaGV4LnNsaWNlKGksIGkgKyAyKSwgMTYpKTtcbiAgcmV0dXJuIGFycjtcbn07XG5cbmNvbnN0IGZyb21BcnJheSA9IGFyciA9PiB7XG4gIGxldCBoZXggPSBcIjB4XCI7XG4gIGZvciAobGV0IGkgPSAwLCBsID0gYXJyLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGxldCBiID0gYXJyW2ldO1xuICAgIGhleCArPSAoYiA8IDE2ID8gXCIwXCIgOiBcIlwiKSArIGIudG9TdHJpbmcoMTYpO1xuICB9XG4gIHJldHVybiBoZXg7XG59O1xuXG5jb25zdCB0b1VpbnQ4QXJyYXkgPSBoZXggPT4gbmV3IFVpbnQ4QXJyYXkodG9BcnJheShoZXgpKTtcblxuY29uc3QgZnJvbVVpbnQ4QXJyYXkgPSBhcnIgPT4gZnJvbUFycmF5KFtdLnNsaWNlLmNhbGwoYXJyLCAwKSk7XG5cbmNvbnN0IGZyb21OdW1iZXIgPSBudW0gPT4ge1xuICBsZXQgaGV4ID0gbnVtLnRvU3RyaW5nKDE2KTtcbiAgcmV0dXJuIGhleC5sZW5ndGggJSAyID09PSAwID8gXCIweFwiICsgaGV4IDogXCIweDBcIiArIGhleDtcbn07XG5cbmNvbnN0IHRvTnVtYmVyID0gaGV4ID0+IHBhcnNlSW50KGhleC5zbGljZSgyKSwgMTYpO1xuXG5jb25zdCBjb25jYXQgPSAoYSwgYikgPT4gYS5jb25jYXQoYi5zbGljZSgyKSk7XG5cbmNvbnN0IGZyb21OYXQgPSBibiA9PiBibiA9PT0gXCIweDBcIiA/IFwiMHhcIiA6IGJuLmxlbmd0aCAlIDIgPT09IDAgPyBibiA6IFwiMHgwXCIgKyBibi5zbGljZSgyKTtcblxuY29uc3QgdG9OYXQgPSBibiA9PiBiblsyXSA9PT0gXCIwXCIgPyBcIjB4XCIgKyBibi5zbGljZSgzKSA6IGJuO1xuXG5jb25zdCBmcm9tQXNjaWkgPSBhc2NpaSA9PiB7XG4gIGxldCBoZXggPSBcIjB4XCI7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXNjaWkubGVuZ3RoOyArK2kpIGhleCArPSAoXCIwMFwiICsgYXNjaWkuY2hhckNvZGVBdChpKS50b1N0cmluZygxNikpLnNsaWNlKC0yKTtcbiAgcmV0dXJuIGhleDtcbn07XG5cbmNvbnN0IHRvQXNjaWkgPSBoZXggPT4ge1xuICBsZXQgYXNjaWkgPSBcIlwiO1xuICBmb3IgKGxldCBpID0gMjsgaSA8IGhleC5sZW5ndGg7IGkgKz0gMikgYXNjaWkgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChoZXguc2xpY2UoaSwgaSArIDIpLCAxNikpO1xuICByZXR1cm4gYXNjaWk7XG59O1xuXG4vLyBGcm9tIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3Bhc2NhbGRla2xvZS82MjU0NjEwM2ExNTc2ODAzZGFkZTkyNjljY2Y3NjMzMFxuY29uc3QgZnJvbVN0cmluZyA9IHMgPT4ge1xuICBjb25zdCBtYWtlQnl0ZSA9IHVpbnQ4ID0+IHtcbiAgICBjb25zdCBiID0gdWludDgudG9TdHJpbmcoMTYpO1xuICAgIHJldHVybiBiLmxlbmd0aCA8IDIgPyBcIjBcIiArIGIgOiBiO1xuICB9O1xuICBsZXQgYnl0ZXMgPSBcIjB4XCI7XG4gIGZvciAobGV0IGNpID0gMDsgY2kgIT0gcy5sZW5ndGg7IGNpKyspIHtcbiAgICBsZXQgYyA9IHMuY2hhckNvZGVBdChjaSk7XG4gICAgaWYgKGMgPCAxMjgpIHtcbiAgICAgIGJ5dGVzICs9IG1ha2VCeXRlKGMpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChjIDwgMjA0OCkge1xuICAgICAgYnl0ZXMgKz0gbWFrZUJ5dGUoYyA+PiA2IHwgMTkyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGMgPiAweGQ3ZmYgJiYgYyA8IDB4ZGMwMCkge1xuICAgICAgICBpZiAoKytjaSA9PSBzLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gICAgICAgIGxldCBjMiA9IHMuY2hhckNvZGVBdChjaSk7XG4gICAgICAgIGlmIChjMiA8IDB4ZGMwMCB8fCBjMiA+IDB4ZGZmZikgcmV0dXJuIG51bGw7XG4gICAgICAgIGMgPSAweDEwMDAwICsgKChjICYgMHgwM2ZmKSA8PCAxMCkgKyAoYzIgJiAweDAzZmYpO1xuICAgICAgICBieXRlcyArPSBtYWtlQnl0ZShjID4+IDE4IHwgMjQwKTtcbiAgICAgICAgYnl0ZXMgKz0gbWFrZUJ5dGUoYyA+PiAxMiAmIDYzIHwgMTI4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGMgPD0gMHhmZmZmXG4gICAgICAgIGJ5dGVzICs9IG1ha2VCeXRlKGMgPj4gMTIgfCAyMjQpO1xuICAgICAgfVxuICAgICAgYnl0ZXMgKz0gbWFrZUJ5dGUoYyA+PiA2ICYgNjMgfCAxMjgpO1xuICAgIH1cbiAgICBieXRlcyArPSBtYWtlQnl0ZShjICYgNjMgfCAxMjgpO1xuICB9XG4gIHJldHVybiBieXRlcztcbn07XG5cbmNvbnN0IHRvU3RyaW5nID0gYnl0ZXMgPT4ge1xuICBsZXQgcyA9ICcnO1xuICBsZXQgaSA9IDA7XG4gIGxldCBsID0gbGVuZ3RoKGJ5dGVzKTtcbiAgd2hpbGUgKGkgPCBsKSB7XG4gICAgbGV0IGMgPSBhdChieXRlcywgaSsrKTtcbiAgICBpZiAoYyA+IDEyNykge1xuICAgICAgaWYgKGMgPiAxOTEgJiYgYyA8IDIyNCkge1xuICAgICAgICBpZiAoaSA+PSBsKSByZXR1cm4gbnVsbDtcbiAgICAgICAgYyA9IChjICYgMzEpIDw8IDYgfCBhdChieXRlcywgaSkgJiA2MztcbiAgICAgIH0gZWxzZSBpZiAoYyA+IDIyMyAmJiBjIDwgMjQwKSB7XG4gICAgICAgIGlmIChpICsgMSA+PSBsKSByZXR1cm4gbnVsbDtcbiAgICAgICAgYyA9IChjICYgMTUpIDw8IDEyIHwgKGF0KGJ5dGVzLCBpKSAmIDYzKSA8PCA2IHwgYXQoYnl0ZXMsICsraSkgJiA2MztcbiAgICAgIH0gZWxzZSBpZiAoYyA+IDIzOSAmJiBjIDwgMjQ4KSB7XG4gICAgICAgIGlmIChpICsgMiA+PSBsKSByZXR1cm4gbnVsbDtcbiAgICAgICAgYyA9IChjICYgNykgPDwgMTggfCAoYXQoYnl0ZXMsIGkpICYgNjMpIDw8IDEyIHwgKGF0KGJ5dGVzLCArK2kpICYgNjMpIDw8IDYgfCBhdChieXRlcywgKytpKSAmIDYzO1xuICAgICAgfSBlbHNlIHJldHVybiBudWxsO1xuICAgICAgKytpO1xuICAgIH1cbiAgICBpZiAoYyA8PSAweGZmZmYpIHMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtlbHNlIGlmIChjIDw9IDB4MTBmZmZmKSB7XG4gICAgICBjIC09IDB4MTAwMDA7XG4gICAgICBzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyA+PiAxMCB8IDB4ZDgwMCk7XG4gICAgICBzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyAmIDB4M0ZGIHwgMHhkYzAwKTtcbiAgICB9IGVsc2UgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIHM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcmFuZG9tLFxuICBsZW5ndGgsXG4gIGNvbmNhdCxcbiAgZmxhdHRlbixcbiAgc2xpY2UsXG4gIHJldmVyc2UsXG4gIHBhZCxcbiAgcGFkUmlnaHQsXG4gIGZyb21Bc2NpaSxcbiAgdG9Bc2NpaSxcbiAgZnJvbVN0cmluZyxcbiAgdG9TdHJpbmcsXG4gIGZyb21OdW1iZXIsXG4gIHRvTnVtYmVyLFxuICBmcm9tTmF0LFxuICB0b05hdCxcbiAgZnJvbUFycmF5LFxuICB0b0FycmF5LFxuICBmcm9tVWludDhBcnJheSxcbiAgdG9VaW50OEFycmF5XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-lib/lib/bytes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-lib/lib/hash.js":
/*!******************************************!*\
  !*** ./node_modules/eth-lib/lib/hash.js ***!
  \******************************************/
/***/ ((module) => {

eval("// This was ported from https://github.com/emn178/js-sha3, with some minor\n// modifications and pruning. It is licensed under MIT:\n//\n// Copyright 2015-2016 Chen, Yi-Cyuan\n//  \n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nconst HEX_CHARS = '0123456789abcdef'.split('');\nconst KECCAK_PADDING = [1, 256, 65536, 16777216];\nconst SHIFT = [0, 8, 16, 24];\nconst RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n\nconst Keccak = bits => ({\n  blocks: [],\n  reset: true,\n  block: 0,\n  start: 0,\n  blockCount: 1600 - (bits << 1) >> 5,\n  outputBlocks: bits >> 5,\n  s: (s => [].concat(s, s, s, s, s))([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n});\n\nconst update = (state, message) => {\n  var length = message.length,\n      blocks = state.blocks,\n      byteCount = state.blockCount << 2,\n      blockCount = state.blockCount,\n      outputBlocks = state.outputBlocks,\n      s = state.s,\n      index = 0,\n      i,\n      code;\n\n  // update\n  while (index < length) {\n    if (state.reset) {\n      state.reset = false;\n      blocks[0] = state.block;\n      for (i = 1; i < blockCount + 1; ++i) {\n        blocks[i] = 0;\n      }\n    }\n    if (typeof message !== \"string\") {\n      for (i = state.start; index < length && i < byteCount; ++index) {\n        blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n      }\n    } else {\n      for (i = state.start; index < length && i < byteCount; ++index) {\n        code = message.charCodeAt(index);\n        if (code < 0x80) {\n          blocks[i >> 2] |= code << SHIFT[i++ & 3];\n        } else if (code < 0x800) {\n          blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n        } else if (code < 0xd800 || code >= 0xe000) {\n          blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n        } else {\n          code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n          blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n        }\n      }\n    }\n    state.lastByteIndex = i;\n    if (i >= byteCount) {\n      state.start = i - byteCount;\n      state.block = blocks[blockCount];\n      for (i = 0; i < blockCount; ++i) {\n        s[i] ^= blocks[i];\n      }\n      f(s);\n      state.reset = true;\n    } else {\n      state.start = i;\n    }\n  }\n\n  // finalize\n  i = state.lastByteIndex;\n  blocks[i >> 2] |= KECCAK_PADDING[i & 3];\n  if (state.lastByteIndex === byteCount) {\n    blocks[0] = blocks[blockCount];\n    for (i = 1; i < blockCount + 1; ++i) {\n      blocks[i] = 0;\n    }\n  }\n  blocks[blockCount - 1] |= 0x80000000;\n  for (i = 0; i < blockCount; ++i) {\n    s[i] ^= blocks[i];\n  }\n  f(s);\n\n  // toString\n  var hex = '',\n      i = 0,\n      j = 0,\n      block;\n  while (j < outputBlocks) {\n    for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n      block = s[i];\n      hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];\n    }\n    if (j % blockCount === 0) {\n      f(s);\n      i = 0;\n    }\n  }\n  return \"0x\" + hex;\n};\n\nconst f = s => {\n  var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n\n  for (n = 0; n < 48; n += 2) {\n    c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n    c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n    c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n    c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n    c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n    c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n    c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n    c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n    c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n    c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n\n    h = c8 ^ (c2 << 1 | c3 >>> 31);\n    l = c9 ^ (c3 << 1 | c2 >>> 31);\n    s[0] ^= h;\n    s[1] ^= l;\n    s[10] ^= h;\n    s[11] ^= l;\n    s[20] ^= h;\n    s[21] ^= l;\n    s[30] ^= h;\n    s[31] ^= l;\n    s[40] ^= h;\n    s[41] ^= l;\n    h = c0 ^ (c4 << 1 | c5 >>> 31);\n    l = c1 ^ (c5 << 1 | c4 >>> 31);\n    s[2] ^= h;\n    s[3] ^= l;\n    s[12] ^= h;\n    s[13] ^= l;\n    s[22] ^= h;\n    s[23] ^= l;\n    s[32] ^= h;\n    s[33] ^= l;\n    s[42] ^= h;\n    s[43] ^= l;\n    h = c2 ^ (c6 << 1 | c7 >>> 31);\n    l = c3 ^ (c7 << 1 | c6 >>> 31);\n    s[4] ^= h;\n    s[5] ^= l;\n    s[14] ^= h;\n    s[15] ^= l;\n    s[24] ^= h;\n    s[25] ^= l;\n    s[34] ^= h;\n    s[35] ^= l;\n    s[44] ^= h;\n    s[45] ^= l;\n    h = c4 ^ (c8 << 1 | c9 >>> 31);\n    l = c5 ^ (c9 << 1 | c8 >>> 31);\n    s[6] ^= h;\n    s[7] ^= l;\n    s[16] ^= h;\n    s[17] ^= l;\n    s[26] ^= h;\n    s[27] ^= l;\n    s[36] ^= h;\n    s[37] ^= l;\n    s[46] ^= h;\n    s[47] ^= l;\n    h = c6 ^ (c0 << 1 | c1 >>> 31);\n    l = c7 ^ (c1 << 1 | c0 >>> 31);\n    s[8] ^= h;\n    s[9] ^= l;\n    s[18] ^= h;\n    s[19] ^= l;\n    s[28] ^= h;\n    s[29] ^= l;\n    s[38] ^= h;\n    s[39] ^= l;\n    s[48] ^= h;\n    s[49] ^= l;\n\n    b0 = s[0];\n    b1 = s[1];\n    b32 = s[11] << 4 | s[10] >>> 28;\n    b33 = s[10] << 4 | s[11] >>> 28;\n    b14 = s[20] << 3 | s[21] >>> 29;\n    b15 = s[21] << 3 | s[20] >>> 29;\n    b46 = s[31] << 9 | s[30] >>> 23;\n    b47 = s[30] << 9 | s[31] >>> 23;\n    b28 = s[40] << 18 | s[41] >>> 14;\n    b29 = s[41] << 18 | s[40] >>> 14;\n    b20 = s[2] << 1 | s[3] >>> 31;\n    b21 = s[3] << 1 | s[2] >>> 31;\n    b2 = s[13] << 12 | s[12] >>> 20;\n    b3 = s[12] << 12 | s[13] >>> 20;\n    b34 = s[22] << 10 | s[23] >>> 22;\n    b35 = s[23] << 10 | s[22] >>> 22;\n    b16 = s[33] << 13 | s[32] >>> 19;\n    b17 = s[32] << 13 | s[33] >>> 19;\n    b48 = s[42] << 2 | s[43] >>> 30;\n    b49 = s[43] << 2 | s[42] >>> 30;\n    b40 = s[5] << 30 | s[4] >>> 2;\n    b41 = s[4] << 30 | s[5] >>> 2;\n    b22 = s[14] << 6 | s[15] >>> 26;\n    b23 = s[15] << 6 | s[14] >>> 26;\n    b4 = s[25] << 11 | s[24] >>> 21;\n    b5 = s[24] << 11 | s[25] >>> 21;\n    b36 = s[34] << 15 | s[35] >>> 17;\n    b37 = s[35] << 15 | s[34] >>> 17;\n    b18 = s[45] << 29 | s[44] >>> 3;\n    b19 = s[44] << 29 | s[45] >>> 3;\n    b10 = s[6] << 28 | s[7] >>> 4;\n    b11 = s[7] << 28 | s[6] >>> 4;\n    b42 = s[17] << 23 | s[16] >>> 9;\n    b43 = s[16] << 23 | s[17] >>> 9;\n    b24 = s[26] << 25 | s[27] >>> 7;\n    b25 = s[27] << 25 | s[26] >>> 7;\n    b6 = s[36] << 21 | s[37] >>> 11;\n    b7 = s[37] << 21 | s[36] >>> 11;\n    b38 = s[47] << 24 | s[46] >>> 8;\n    b39 = s[46] << 24 | s[47] >>> 8;\n    b30 = s[8] << 27 | s[9] >>> 5;\n    b31 = s[9] << 27 | s[8] >>> 5;\n    b12 = s[18] << 20 | s[19] >>> 12;\n    b13 = s[19] << 20 | s[18] >>> 12;\n    b44 = s[29] << 7 | s[28] >>> 25;\n    b45 = s[28] << 7 | s[29] >>> 25;\n    b26 = s[38] << 8 | s[39] >>> 24;\n    b27 = s[39] << 8 | s[38] >>> 24;\n    b8 = s[48] << 14 | s[49] >>> 18;\n    b9 = s[49] << 14 | s[48] >>> 18;\n\n    s[0] = b0 ^ ~b2 & b4;\n    s[1] = b1 ^ ~b3 & b5;\n    s[10] = b10 ^ ~b12 & b14;\n    s[11] = b11 ^ ~b13 & b15;\n    s[20] = b20 ^ ~b22 & b24;\n    s[21] = b21 ^ ~b23 & b25;\n    s[30] = b30 ^ ~b32 & b34;\n    s[31] = b31 ^ ~b33 & b35;\n    s[40] = b40 ^ ~b42 & b44;\n    s[41] = b41 ^ ~b43 & b45;\n    s[2] = b2 ^ ~b4 & b6;\n    s[3] = b3 ^ ~b5 & b7;\n    s[12] = b12 ^ ~b14 & b16;\n    s[13] = b13 ^ ~b15 & b17;\n    s[22] = b22 ^ ~b24 & b26;\n    s[23] = b23 ^ ~b25 & b27;\n    s[32] = b32 ^ ~b34 & b36;\n    s[33] = b33 ^ ~b35 & b37;\n    s[42] = b42 ^ ~b44 & b46;\n    s[43] = b43 ^ ~b45 & b47;\n    s[4] = b4 ^ ~b6 & b8;\n    s[5] = b5 ^ ~b7 & b9;\n    s[14] = b14 ^ ~b16 & b18;\n    s[15] = b15 ^ ~b17 & b19;\n    s[24] = b24 ^ ~b26 & b28;\n    s[25] = b25 ^ ~b27 & b29;\n    s[34] = b34 ^ ~b36 & b38;\n    s[35] = b35 ^ ~b37 & b39;\n    s[44] = b44 ^ ~b46 & b48;\n    s[45] = b45 ^ ~b47 & b49;\n    s[6] = b6 ^ ~b8 & b0;\n    s[7] = b7 ^ ~b9 & b1;\n    s[16] = b16 ^ ~b18 & b10;\n    s[17] = b17 ^ ~b19 & b11;\n    s[26] = b26 ^ ~b28 & b20;\n    s[27] = b27 ^ ~b29 & b21;\n    s[36] = b36 ^ ~b38 & b30;\n    s[37] = b37 ^ ~b39 & b31;\n    s[46] = b46 ^ ~b48 & b40;\n    s[47] = b47 ^ ~b49 & b41;\n    s[8] = b8 ^ ~b0 & b2;\n    s[9] = b9 ^ ~b1 & b3;\n    s[18] = b18 ^ ~b10 & b12;\n    s[19] = b19 ^ ~b11 & b13;\n    s[28] = b28 ^ ~b20 & b22;\n    s[29] = b29 ^ ~b21 & b23;\n    s[38] = b38 ^ ~b30 & b32;\n    s[39] = b39 ^ ~b31 & b33;\n    s[48] = b48 ^ ~b40 & b42;\n    s[49] = b49 ^ ~b41 & b43;\n\n    s[0] ^= RC[n];\n    s[1] ^= RC[n + 1];\n  }\n};\n\nconst keccak = bits => str => {\n  var msg;\n  if (str.slice(0, 2) === \"0x\") {\n    msg = [];\n    for (var i = 2, l = str.length; i < l; i += 2) msg.push(parseInt(str.slice(i, i + 2), 16));\n  } else {\n    msg = str;\n  }\n  return update(Keccak(bits, bits), msg);\n};\n\nmodule.exports = {\n  keccak256: keccak(256),\n  keccak512: keccak(512),\n  keccak256s: keccak(256),\n  keccak512s: keccak(512)\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-lib/lib/hash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-lib/lib/nat.js":
/*!*****************************************!*\
  !*** ./node_modules/eth-lib/lib/nat.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\nconst Bytes = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/eth-lib/lib/bytes.js\");\n\nconst fromBN = bn => \"0x\" + bn.toString(\"hex\");\n\nconst toBN = str => new BN(str.slice(2), 16);\n\nconst fromString = str => {\n  const bn = \"0x\" + (str.slice(0, 2) === \"0x\" ? new BN(str.slice(2), 16) : new BN(str, 10)).toString(\"hex\");\n  return bn === \"0x0\" ? \"0x\" : bn;\n};\n\nconst toEther = wei => toNumber(div(wei, fromString(\"10000000000\"))) / 100000000;\n\nconst fromEther = eth => mul(fromNumber(Math.floor(eth * 100000000)), fromString(\"10000000000\"));\n\nconst toString = a => toBN(a).toString(10);\n\nconst fromNumber = a => typeof a === \"string\" ? /^0x/.test(a) ? a : \"0x\" + a : \"0x\" + new BN(a).toString(\"hex\");\n\nconst toNumber = a => toBN(a).toNumber();\n\nconst toUint256 = a => Bytes.pad(32, a);\n\nconst bin = method => (a, b) => fromBN(toBN(a)[method](toBN(b)));\n\nconst add = bin(\"add\");\nconst mul = bin(\"mul\");\nconst div = bin(\"div\");\nconst sub = bin(\"sub\");\n\nmodule.exports = {\n  toString,\n  fromString,\n  toNumber,\n  fromNumber,\n  toEther,\n  fromEther,\n  toUint256,\n  add,\n  mul,\n  div,\n  sub\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWxpYi9saWIvbmF0LmpzIiwibWFwcGluZ3MiOiJBQUFBLFdBQVcsbUJBQU8sQ0FBQyxtREFBTztBQUMxQixjQUFjLG1CQUFPLENBQUMsMERBQVM7O0FBRS9COztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHBvcnRrZXkvbmV4dC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2V0aC1saWIvbGliL25hdC5qcz8xMWVhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEJOID0gcmVxdWlyZShcImJuLmpzXCIpO1xuY29uc3QgQnl0ZXMgPSByZXF1aXJlKFwiLi9ieXRlc1wiKTtcblxuY29uc3QgZnJvbUJOID0gYm4gPT4gXCIweFwiICsgYm4udG9TdHJpbmcoXCJoZXhcIik7XG5cbmNvbnN0IHRvQk4gPSBzdHIgPT4gbmV3IEJOKHN0ci5zbGljZSgyKSwgMTYpO1xuXG5jb25zdCBmcm9tU3RyaW5nID0gc3RyID0+IHtcbiAgY29uc3QgYm4gPSBcIjB4XCIgKyAoc3RyLnNsaWNlKDAsIDIpID09PSBcIjB4XCIgPyBuZXcgQk4oc3RyLnNsaWNlKDIpLCAxNikgOiBuZXcgQk4oc3RyLCAxMCkpLnRvU3RyaW5nKFwiaGV4XCIpO1xuICByZXR1cm4gYm4gPT09IFwiMHgwXCIgPyBcIjB4XCIgOiBibjtcbn07XG5cbmNvbnN0IHRvRXRoZXIgPSB3ZWkgPT4gdG9OdW1iZXIoZGl2KHdlaSwgZnJvbVN0cmluZyhcIjEwMDAwMDAwMDAwXCIpKSkgLyAxMDAwMDAwMDA7XG5cbmNvbnN0IGZyb21FdGhlciA9IGV0aCA9PiBtdWwoZnJvbU51bWJlcihNYXRoLmZsb29yKGV0aCAqIDEwMDAwMDAwMCkpLCBmcm9tU3RyaW5nKFwiMTAwMDAwMDAwMDBcIikpO1xuXG5jb25zdCB0b1N0cmluZyA9IGEgPT4gdG9CTihhKS50b1N0cmluZygxMCk7XG5cbmNvbnN0IGZyb21OdW1iZXIgPSBhID0+IHR5cGVvZiBhID09PSBcInN0cmluZ1wiID8gL14weC8udGVzdChhKSA/IGEgOiBcIjB4XCIgKyBhIDogXCIweFwiICsgbmV3IEJOKGEpLnRvU3RyaW5nKFwiaGV4XCIpO1xuXG5jb25zdCB0b051bWJlciA9IGEgPT4gdG9CTihhKS50b051bWJlcigpO1xuXG5jb25zdCB0b1VpbnQyNTYgPSBhID0+IEJ5dGVzLnBhZCgzMiwgYSk7XG5cbmNvbnN0IGJpbiA9IG1ldGhvZCA9PiAoYSwgYikgPT4gZnJvbUJOKHRvQk4oYSlbbWV0aG9kXSh0b0JOKGIpKSk7XG5cbmNvbnN0IGFkZCA9IGJpbihcImFkZFwiKTtcbmNvbnN0IG11bCA9IGJpbihcIm11bFwiKTtcbmNvbnN0IGRpdiA9IGJpbihcImRpdlwiKTtcbmNvbnN0IHN1YiA9IGJpbihcInN1YlwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHRvU3RyaW5nLFxuICBmcm9tU3RyaW5nLFxuICB0b051bWJlcixcbiAgZnJvbU51bWJlcixcbiAgdG9FdGhlcixcbiAgZnJvbUV0aGVyLFxuICB0b1VpbnQyNTYsXG4gIGFkZCxcbiAgbXVsLFxuICBkaXYsXG4gIHN1YlxufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-lib/lib/nat.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-lib/lib/rlp.js":
/*!*****************************************!*\
  !*** ./node_modules/eth-lib/lib/rlp.js ***!
  \*****************************************/
/***/ ((module) => {

eval("// The RLP format\n// Serialization and deserialization for the BytesTree type, under the following grammar:\n// | First byte | Meaning                                                                    |\n// | ---------- | -------------------------------------------------------------------------- |\n// | 0   to 127 | HEX(leaf)                                                                  |\n// | 128 to 183 | HEX(length_of_leaf + 128) + HEX(leaf)                                      |\n// | 184 to 191 | HEX(length_of_length_of_leaf + 128 + 55) + HEX(length_of_leaf) + HEX(leaf) |\n// | 192 to 247 | HEX(length_of_node + 192) + HEX(node)                                      |\n// | 248 to 255 | HEX(length_of_length_of_node + 128 + 55) + HEX(length_of_node) + HEX(node) |\n\nconst encode = tree => {\n  const padEven = str => str.length % 2 === 0 ? str : \"0\" + str;\n\n  const uint = num => padEven(num.toString(16));\n\n  const length = (len, add) => len < 56 ? uint(add + len) : uint(add + uint(len).length / 2 + 55) + uint(len);\n\n  const dataTree = tree => {\n    if (typeof tree === \"string\") {\n      const hex = tree.slice(2);\n      const pre = hex.length != 2 || hex >= \"80\" ? length(hex.length / 2, 128) : \"\";\n      return pre + hex;\n    } else {\n      const hex = tree.map(dataTree).join(\"\");\n      const pre = length(hex.length / 2, 192);\n      return pre + hex;\n    }\n  };\n\n  return \"0x\" + dataTree(tree);\n};\n\nconst decode = hex => {\n  let i = 2;\n\n  const parseTree = () => {\n    if (i >= hex.length) throw \"\";\n    const head = hex.slice(i, i + 2);\n    return head < \"80\" ? (i += 2, \"0x\" + head) : head < \"c0\" ? parseHex() : parseList();\n  };\n\n  const parseLength = () => {\n    const len = parseInt(hex.slice(i, i += 2), 16) % 64;\n    return len < 56 ? len : parseInt(hex.slice(i, i += (len - 55) * 2), 16);\n  };\n\n  const parseHex = () => {\n    const len = parseLength();\n    return \"0x\" + hex.slice(i, i += len * 2);\n  };\n\n  const parseList = () => {\n    const lim = parseLength() * 2 + i;\n    let list = [];\n    while (i < lim) list.push(parseTree());\n    return list;\n  };\n\n  try {\n    return parseTree();\n  } catch (e) {\n    return [];\n  }\n};\n\nmodule.exports = { encode, decode };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWxpYi9saWIvcmxwLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHBvcnRrZXkvbmV4dC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2V0aC1saWIvbGliL3JscC5qcz8yMDcyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSBSTFAgZm9ybWF0XG4vLyBTZXJpYWxpemF0aW9uIGFuZCBkZXNlcmlhbGl6YXRpb24gZm9yIHRoZSBCeXRlc1RyZWUgdHlwZSwgdW5kZXIgdGhlIGZvbGxvd2luZyBncmFtbWFyOlxuLy8gfCBGaXJzdCBieXRlIHwgTWVhbmluZyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuLy8gfCAtLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxuLy8gfCAwICAgdG8gMTI3IHwgSEVYKGxlYWYpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuLy8gfCAxMjggdG8gMTgzIHwgSEVYKGxlbmd0aF9vZl9sZWFmICsgMTI4KSArIEhFWChsZWFmKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuLy8gfCAxODQgdG8gMTkxIHwgSEVYKGxlbmd0aF9vZl9sZW5ndGhfb2ZfbGVhZiArIDEyOCArIDU1KSArIEhFWChsZW5ndGhfb2ZfbGVhZikgKyBIRVgobGVhZikgfFxuLy8gfCAxOTIgdG8gMjQ3IHwgSEVYKGxlbmd0aF9vZl9ub2RlICsgMTkyKSArIEhFWChub2RlKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuLy8gfCAyNDggdG8gMjU1IHwgSEVYKGxlbmd0aF9vZl9sZW5ndGhfb2Zfbm9kZSArIDEyOCArIDU1KSArIEhFWChsZW5ndGhfb2Zfbm9kZSkgKyBIRVgobm9kZSkgfFxuXG5jb25zdCBlbmNvZGUgPSB0cmVlID0+IHtcbiAgY29uc3QgcGFkRXZlbiA9IHN0ciA9PiBzdHIubGVuZ3RoICUgMiA9PT0gMCA/IHN0ciA6IFwiMFwiICsgc3RyO1xuXG4gIGNvbnN0IHVpbnQgPSBudW0gPT4gcGFkRXZlbihudW0udG9TdHJpbmcoMTYpKTtcblxuICBjb25zdCBsZW5ndGggPSAobGVuLCBhZGQpID0+IGxlbiA8IDU2ID8gdWludChhZGQgKyBsZW4pIDogdWludChhZGQgKyB1aW50KGxlbikubGVuZ3RoIC8gMiArIDU1KSArIHVpbnQobGVuKTtcblxuICBjb25zdCBkYXRhVHJlZSA9IHRyZWUgPT4ge1xuICAgIGlmICh0eXBlb2YgdHJlZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgY29uc3QgaGV4ID0gdHJlZS5zbGljZSgyKTtcbiAgICAgIGNvbnN0IHByZSA9IGhleC5sZW5ndGggIT0gMiB8fCBoZXggPj0gXCI4MFwiID8gbGVuZ3RoKGhleC5sZW5ndGggLyAyLCAxMjgpIDogXCJcIjtcbiAgICAgIHJldHVybiBwcmUgKyBoZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGhleCA9IHRyZWUubWFwKGRhdGFUcmVlKS5qb2luKFwiXCIpO1xuICAgICAgY29uc3QgcHJlID0gbGVuZ3RoKGhleC5sZW5ndGggLyAyLCAxOTIpO1xuICAgICAgcmV0dXJuIHByZSArIGhleDtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFwiMHhcIiArIGRhdGFUcmVlKHRyZWUpO1xufTtcblxuY29uc3QgZGVjb2RlID0gaGV4ID0+IHtcbiAgbGV0IGkgPSAyO1xuXG4gIGNvbnN0IHBhcnNlVHJlZSA9ICgpID0+IHtcbiAgICBpZiAoaSA+PSBoZXgubGVuZ3RoKSB0aHJvdyBcIlwiO1xuICAgIGNvbnN0IGhlYWQgPSBoZXguc2xpY2UoaSwgaSArIDIpO1xuICAgIHJldHVybiBoZWFkIDwgXCI4MFwiID8gKGkgKz0gMiwgXCIweFwiICsgaGVhZCkgOiBoZWFkIDwgXCJjMFwiID8gcGFyc2VIZXgoKSA6IHBhcnNlTGlzdCgpO1xuICB9O1xuXG4gIGNvbnN0IHBhcnNlTGVuZ3RoID0gKCkgPT4ge1xuICAgIGNvbnN0IGxlbiA9IHBhcnNlSW50KGhleC5zbGljZShpLCBpICs9IDIpLCAxNikgJSA2NDtcbiAgICByZXR1cm4gbGVuIDwgNTYgPyBsZW4gOiBwYXJzZUludChoZXguc2xpY2UoaSwgaSArPSAobGVuIC0gNTUpICogMiksIDE2KTtcbiAgfTtcblxuICBjb25zdCBwYXJzZUhleCA9ICgpID0+IHtcbiAgICBjb25zdCBsZW4gPSBwYXJzZUxlbmd0aCgpO1xuICAgIHJldHVybiBcIjB4XCIgKyBoZXguc2xpY2UoaSwgaSArPSBsZW4gKiAyKTtcbiAgfTtcblxuICBjb25zdCBwYXJzZUxpc3QgPSAoKSA9PiB7XG4gICAgY29uc3QgbGltID0gcGFyc2VMZW5ndGgoKSAqIDIgKyBpO1xuICAgIGxldCBsaXN0ID0gW107XG4gICAgd2hpbGUgKGkgPCBsaW0pIGxpc3QucHVzaChwYXJzZVRyZWUoKSk7XG4gICAgcmV0dXJuIGxpc3Q7XG4gIH07XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gcGFyc2VUcmVlKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0geyBlbmNvZGUsIGRlY29kZSB9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-lib/lib/rlp.js\n");

/***/ })

};
;